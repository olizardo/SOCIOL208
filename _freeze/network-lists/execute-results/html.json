{
  "hash": "3c2a35145e17d6927dc951be370d7831",
  "result": {
    "markdown": "---\ntitle: \"Handling Graph Objects in Lists\"\nexecute: \n  eval: true\n  echo: true\n  output: true\n  warning: false\n  message: false\nformat: \n   html:\n      code-line-numbers: true\n---\n\n\nSometimes network data comes pre-stored as an `R` **list**. This is typical if you have a network with multiple kinds of ties recorded on the same set of actors (and thus multiple networks), or longitudinal network data, where we collect multiple \"snapshots\" of the same system (containing the same or more typically a different set of actors per time slice). \n\nThe `networkdata` package contains one such data set called `atp`. It's a network of Tennis players who played in grand slam or official matches of the Association of Tennis Professionals (hence ATP) covering the years 1968-2021 [@radicchi2011best]. \n\nIn the directed graph representing each network, a tie goes **from** the *loser* **to** the *winner* of each match. Accordingly, it can be interpreted as a directed \"deference\" network (it would be a dominance network if it was the other way around), where actor *i* \"defers\" to actor *j* by getting their ass kicked by them. \n\nLet's see how this list of networks works:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   library(networkdata)\n   library(igraph)\n   g <- atp\n   head(g)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\nIGRAPH 08a202a DNW- 497 1213 -- ATP Season 1968\n+ attr: name (g/c), name (v/c), age (v/n), hand (v/c), country (v/c),\n| surface (e/c), weight (e/n)\n+ edges from 08a202a (vertex names):\n [1] U Unknown    ->Jose Mandarino     Alfredo Acuna->Alan Fox          \n [3] Andres Gimeno->Ken Rosewall       Andres Gimeno->Raymond Moore     \n [5] Juan Gisbert ->Tom Okker          Juan Gisbert ->Zeljko Franulovic \n [7] Onny Parun   ->Jan Kodes          Peter Curtis ->Tom Okker         \n [9] Premjit Lall ->Clark Graebner     Rod Laver    ->Ken Rosewall      \n[11] Thomas Lejus ->Nicola Pietrangeli Tom Okker    ->Arthur Ashe       \n[13] U Unknown    ->Jaidip Mukherjea   U Unknown    ->Jose Luis Arillla \n+ ... omitted several edges\n\n[[2]]\nIGRAPH c895c57 DNW- 446 1418 -- ATP Season 1969\n+ attr: name (g/c), name (v/c), age (v/n), hand (v/c), country (v/c),\n| surface (e/c), weight (e/n)\n+ edges from c895c57 (vertex names):\n [1] U Unknown           ->U Unknown        \n [2] Alejandro Olmedo    ->Ron Holmberg     \n [3] Arthur Ashe         ->Rod Laver        \n [4] Bob Carmichael      ->Jim Osborne      \n [5] Cliff Richey        ->Zeljko Franulovic\n [6] Francois Jauffret   ->Martin Mulligan  \n [7] Fred Stolle         ->John Newcombe    \n+ ... omitted several edges\n\n[[3]]\nIGRAPH d6709af DNW- 451 1650 -- ATP Season 1970\n+ attr: name (g/c), name (v/c), age (v/n), hand (v/c), country (v/c),\n| surface (e/c), weight (e/n)\n+ edges from d6709af (vertex names):\n [1] Mark Cox            ->Jan Kodes        \n [2] Charlie Pasarell    ->Stan Smith       \n [3] Cliff Richey        ->Arthur Ashe      \n [4] Francois Jauffret   ->Manuel Orantes   \n [5] Georges Goven       ->Jan Kodes        \n [6] Harald Elschenbroich->Zeljko Franulovic\n [7] Ilie Nastase        ->Zeljko Franulovic\n+ ... omitted several edges\n\n[[4]]\nIGRAPH a73a020 DNW- 459 2580 -- ATP Season 1971\n+ attr: name (g/c), name (v/c), age (v/n), hand (v/c), country (v/c),\n| surface (e/c), weight (e/n)\n+ edges from a73a020 (vertex names):\n [1] Andres Gimeno    ->Ken Rosewall   Arthur Ashe      ->Rod Laver     \n [3] Charlie Pasarell ->Cliff Drysdale Frank Froehling  ->Clark Graebner\n [5] Joaquin Loyo Mayo->Thomaz Koch    John Alexander   ->John Newcombe \n [7] John Newcombe    ->Marty Riessen  Nikola Pilic     ->Cliff Drysdale\n [9] Owen Davidson    ->Cliff Drysdale Robert Maud      ->Cliff Drysdale\n[11] Roger Taylor     ->Marty Riessen  Roy Emerson      ->Rod Laver     \n[13] Tom Okker        ->John Newcombe  Allan Stone      ->Bob Carmichael\n+ ... omitted several edges\n\n[[5]]\nIGRAPH 761ed05 DNW- 504 2767 -- ATP Season 1972\n+ attr: name (g/c), name (v/c), age (v/n), hand (v/c), country (v/c),\n| surface (e/c), weight (e/n)\n+ edges from 761ed05 (vertex names):\n [1] Jean Loup Rouyer->Stan Smith     Marty Riessen   ->Cliff Drysdale\n [3] Roy Emerson     ->Arthur Ashe    Roy Emerson     ->Arthur Ashe   \n [5] Tom Leonard     ->John Newcombe  Tom Okker       ->Arthur Ashe   \n [7] Tom Okker       ->Rod Laver      Adriano Panatta ->Andres Gimeno \n [9] Adriano Panatta ->Ilie Nastase   Allan Stone     ->John Alexander\n[11] Allan Stone     ->Marty Riessen  Andres Gimeno   ->Jan Kodes     \n[13] Andres Gimeno   ->Stan Smith     Andrew Pattison ->Ilie Nastase  \n+ ... omitted several edges\n\n[[6]]\nIGRAPH 92ff576 DNW- 592 3653 -- ATP Season 1973\n+ attr: name (g/c), name (v/c), age (v/n), hand (v/c), country (v/c),\n| surface (e/c), weight (e/n)\n+ edges from 92ff576 (vertex names):\n [1] Harold Solomon    ->Stan Smith       John Alexander    ->Stan Smith      \n [3] Patrice Dominguez ->Paolo Bertolucci Paul Gerken       ->Jimmy Connors   \n [5] Roy Emerson       ->Rod Laver        Adriano Panatta   ->Ilie Nastase    \n [7] Bjorn Borg        ->Adriano Panatta  Brian Gottfried   ->Cliff Richey    \n [9] Charlie Pasarell  ->John Alexander   Cliff Richey      ->Stan Smith      \n[11] Corrado Barazzutti->Bjorn Borg       Francois Jauffret ->Ilie Nastase    \n[13] Georges Goven     ->Manuel Orantes   Manuel Orantes    ->Ilie Nastase    \n+ ... omitted several edges\n```\n:::\n:::\n\n\nWe create a graph object and then examine its contents, which we can see is a set of graph objects. In unnamed `R` lists each of the objects inside is indexed by a number in double brackets. So [[6]] just means the sixth network in the list object (corresponding to the year 1973).\n\nNow let's say we wanted to compute a network statistic like density. One way to proceed would be:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   edge_density(g)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `ensure_igraph()`:\n! Must provide a graph object (provided wrong object type).\n```\n:::\n:::\n\n\nWhich gives us a weird error about the wrong object type. The reason is that `edge_density` expects an `igraph` graph object as input, but g is not a graph object it is a *list* of such objects. For it to work you have to reference a particular *element inside the list* not the whole list. \n\nTo do that, we use the double bracket notation:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   edge_density(g[[6]])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.01044096\n```\n:::\n:::\n\n\nWhich gives us the density for the 1973 network. \n\n### Looping Through Lists\n\nBut what if we wanted a table of network statistics for all the years or some subset of years? Of course, we could just type a million versions of the `edge_density` command or whatever, but that would be tedious. We could also write a `for` loop or something like that (less tedious). Even less tedious is to use the many `apply` functions in `R` that are designed to work with lists, which is a subject onto itself in `R` programming.\n\nBut here we can just use the simple version. Let's say we wanted a vector of densities (or any other whole network statistic) for the whole 54 years. In that case, our friend `sapply` can do the job: \n\n\n::: {.cell}\n\n```{.r .cell-code}\n   sapply(g, edge_density)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 0.004920653 0.007144657 0.008130081 0.012272740 0.010914671 0.010440961\n [7] 0.010567864 0.013315132 0.012088214 0.014019237 0.014135328 0.011649909\n[13] 0.011172821 0.011261426 0.012703925 0.012177336 0.012648755 0.012445937\n[19] 0.012034362 0.012351377 0.010174271 0.009772014 0.019526953 0.012236462\n[25] 0.014050245 0.015054181 0.013872832 0.014727924 0.014329906 0.013935502\n[31] 0.013962809 0.013870042 0.013665097 0.013818887 0.012551113 0.011571679\n[37] 0.012329090 0.012923683 0.011402945 0.012677988 0.012256963 0.013512884\n[43] 0.012543025 0.013661748 0.013786518 0.013679697 0.015052857 0.015075622\n[49] 0.015081206 0.014346468 0.015764351 0.020169225 0.011889114 0.016935400\n```\n:::\n:::\n\n\n`sapply` is kind of a \"meta\" function that takes two inputs: A list, and *the name* of a function (which could be native, a package, or user defined); `sapply` then \"applies\" that function to each element inside the list. Here we asked `R` to apply the function `edge_density` to each element of the list of networks g and it obliged, creating a vector of length 54 containing the info.\n\nWe could use any `igraph` function, like number of nodes in the graph:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   sapply(g, vcount)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 497 446 451 459 504 592 595 535 553 524 509 572 582 573 554 532 495 513 510\n[20] 523 596 597 405 542 509 498 520 496 502 499 497 480 486 479 497 517 505 492\n[39] 524 488 493 464 482 459 457 453 428 430 431 438 419 364 345 393\n```\n:::\n:::\n\n\nWe could also select *subset* of elements inside the list. For instance this counts the number of nodes for the first five years:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   sapply(g[1:5], vcount)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 497 446 451 459 504\n```\n:::\n:::\n\n\nOr for years 2, 6, 8, and 12:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   sapply(g[c(2, 6, 8, 12)], vcount)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 446 592 535 572\n```\n:::\n:::\n\n\nNote the *single bracket* notation here to refer to subsets of elements in the list. Inside the brackets we could put any arbitrary vector, as long as the numbers in the vector do no exceed the length of the list. \n\nOf course, sometimes the functions we apply to elements of the list don't return single numbers but vectors or other igraph objects. In that case it would be better to use `lapply` which is just like `sapply` but returns another list with the set of answers inside it. \n\nFor instance, let's say we wanted the top five players for each year. In this deference network, a \"top\" player is one who beats many others, which means they have high **indegree** (lots of losers pointing at them). \n\nFirst we create a custom function to compute the indegree and return an ordered named vector of top 5 players:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   top5 <- function(x) {\n      library(igraph)\n      t <- degree(x, mode = \"in\")\n      t <- sort(t, decreasing = TRUE)[1:5]\n      return(t)\n   }\n```\n:::\n\n\nNow, we can just feed that function to `lapply`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   top.list <- lapply(g, top5)\n   head(top.list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n   Arthur Ashe      Rod Laver Clark Graebner   Ken Rosewall      Tom Okker \n            33             27             25             23             22 \n\n[[2]]\nJohn Newcombe     Tom Okker     Rod Laver    Tony Roche   Arthur Ashe \n           45            41            40            40            33 \n\n[[3]]\n      Arthur Ashe      Cliff Richey         Rod Laver        Stan Smith \n               51                49                48                45 \nZeljko Franulovic \n               42 \n\n[[4]]\n     Ilie Nastase         Tom Okker     Marty Riessen        Stan Smith \n               69                63                61                61 \nZeljko Franulovic \n               60 \n\n[[5]]\n  Ilie Nastase     Stan Smith Manuel Orantes  Jimmy Connors    Arthur Ashe \n            99             72             68             65             55 \n\n[[6]]\n Ilie Nastase     Tom Okker Jimmy Connors   Arthur Ashe    Stan Smith \n           96            81            68            63            63 \n```\n:::\n:::\n\n\nWhich is a list of named vectors containing the number of victories of the top five players each year. \n\nBecause the object `top.list` is just a list, we can subset it just like before. Let's say we wanted to see the top players for more recent years:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   top.list[49:54]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n   Andy Murray  Dominic Thiem  Kei Nishikori Novak Djokovic   David Goffin \n            63             55             53             50             47 \n\n[[2]]\n         Rafael Nadal          David Goffin      Alexander Zverev \n                   58                    55                    52 \nRoberto Bautista Agut         Dominic Thiem \n                   45                    43 \n\n[[3]]\n   Dominic Thiem Alexander Zverev   Novak Djokovic    Fabio Fognini \n              51               50               46               45 \n   Roger Federer \n              44 \n\n[[4]]\n   Daniil Medvedev     Novak Djokovic       Rafael Nadal Stefanos Tsitsipas \n                55                 52                 52                 49 \n     Roger Federer \n                47 \n\n[[5]]\n     Andrey Rublev     Novak Djokovic Stefanos Tsitsipas       Rafael Nadal \n                40                 36                 27                 26 \n   Daniil Medvedev \n                24 \n\n[[6]]\n   Daniil Medvedev Stefanos Tsitsipas        Casper Ruud   Alexander Zverev \n                54                 52                 52                 51 \n    Novak Djokovic \n                49 \n```\n:::\n:::\n\n\nA series of names which make sense to you if you follow Tennis. \n\n### Naming Lists\nFinally, sometimes it useful to *name* the elements of a list. In this case, for instance, having the year number would be easier to remember what's what. For this, you can use the `names` command, which works via standard `R` assignment:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   names(g) <- c(1968:2021)\n   head(g)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$`1968`\nIGRAPH 08a202a DNW- 497 1213 -- ATP Season 1968\n+ attr: name (g/c), name (v/c), age (v/n), hand (v/c), country (v/c),\n| surface (e/c), weight (e/n)\n+ edges from 08a202a (vertex names):\n [1] U Unknown    ->Jose Mandarino     Alfredo Acuna->Alan Fox          \n [3] Andres Gimeno->Ken Rosewall       Andres Gimeno->Raymond Moore     \n [5] Juan Gisbert ->Tom Okker          Juan Gisbert ->Zeljko Franulovic \n [7] Onny Parun   ->Jan Kodes          Peter Curtis ->Tom Okker         \n [9] Premjit Lall ->Clark Graebner     Rod Laver    ->Ken Rosewall      \n[11] Thomas Lejus ->Nicola Pietrangeli Tom Okker    ->Arthur Ashe       \n[13] U Unknown    ->Jaidip Mukherjea   U Unknown    ->Jose Luis Arillla \n+ ... omitted several edges\n\n$`1969`\nIGRAPH c895c57 DNW- 446 1418 -- ATP Season 1969\n+ attr: name (g/c), name (v/c), age (v/n), hand (v/c), country (v/c),\n| surface (e/c), weight (e/n)\n+ edges from c895c57 (vertex names):\n [1] U Unknown           ->U Unknown        \n [2] Alejandro Olmedo    ->Ron Holmberg     \n [3] Arthur Ashe         ->Rod Laver        \n [4] Bob Carmichael      ->Jim Osborne      \n [5] Cliff Richey        ->Zeljko Franulovic\n [6] Francois Jauffret   ->Martin Mulligan  \n [7] Fred Stolle         ->John Newcombe    \n+ ... omitted several edges\n\n$`1970`\nIGRAPH d6709af DNW- 451 1650 -- ATP Season 1970\n+ attr: name (g/c), name (v/c), age (v/n), hand (v/c), country (v/c),\n| surface (e/c), weight (e/n)\n+ edges from d6709af (vertex names):\n [1] Mark Cox            ->Jan Kodes        \n [2] Charlie Pasarell    ->Stan Smith       \n [3] Cliff Richey        ->Arthur Ashe      \n [4] Francois Jauffret   ->Manuel Orantes   \n [5] Georges Goven       ->Jan Kodes        \n [6] Harald Elschenbroich->Zeljko Franulovic\n [7] Ilie Nastase        ->Zeljko Franulovic\n+ ... omitted several edges\n\n$`1971`\nIGRAPH a73a020 DNW- 459 2580 -- ATP Season 1971\n+ attr: name (g/c), name (v/c), age (v/n), hand (v/c), country (v/c),\n| surface (e/c), weight (e/n)\n+ edges from a73a020 (vertex names):\n [1] Andres Gimeno    ->Ken Rosewall   Arthur Ashe      ->Rod Laver     \n [3] Charlie Pasarell ->Cliff Drysdale Frank Froehling  ->Clark Graebner\n [5] Joaquin Loyo Mayo->Thomaz Koch    John Alexander   ->John Newcombe \n [7] John Newcombe    ->Marty Riessen  Nikola Pilic     ->Cliff Drysdale\n [9] Owen Davidson    ->Cliff Drysdale Robert Maud      ->Cliff Drysdale\n[11] Roger Taylor     ->Marty Riessen  Roy Emerson      ->Rod Laver     \n[13] Tom Okker        ->John Newcombe  Allan Stone      ->Bob Carmichael\n+ ... omitted several edges\n\n$`1972`\nIGRAPH 761ed05 DNW- 504 2767 -- ATP Season 1972\n+ attr: name (g/c), name (v/c), age (v/n), hand (v/c), country (v/c),\n| surface (e/c), weight (e/n)\n+ edges from 761ed05 (vertex names):\n [1] Jean Loup Rouyer->Stan Smith     Marty Riessen   ->Cliff Drysdale\n [3] Roy Emerson     ->Arthur Ashe    Roy Emerson     ->Arthur Ashe   \n [5] Tom Leonard     ->John Newcombe  Tom Okker       ->Arthur Ashe   \n [7] Tom Okker       ->Rod Laver      Adriano Panatta ->Andres Gimeno \n [9] Adriano Panatta ->Ilie Nastase   Allan Stone     ->John Alexander\n[11] Allan Stone     ->Marty Riessen  Andres Gimeno   ->Jan Kodes     \n[13] Andres Gimeno   ->Stan Smith     Andrew Pattison ->Ilie Nastase  \n+ ... omitted several edges\n\n$`1973`\nIGRAPH 92ff576 DNW- 592 3653 -- ATP Season 1973\n+ attr: name (g/c), name (v/c), age (v/n), hand (v/c), country (v/c),\n| surface (e/c), weight (e/n)\n+ edges from 92ff576 (vertex names):\n [1] Harold Solomon    ->Stan Smith       John Alexander    ->Stan Smith      \n [3] Patrice Dominguez ->Paolo Bertolucci Paul Gerken       ->Jimmy Connors   \n [5] Roy Emerson       ->Rod Laver        Adriano Panatta   ->Ilie Nastase    \n [7] Bjorn Borg        ->Adriano Panatta  Brian Gottfried   ->Cliff Richey    \n [9] Charlie Pasarell  ->John Alexander   Cliff Richey      ->Stan Smith      \n[11] Corrado Barazzutti->Bjorn Borg       Francois Jauffret ->Ilie Nastase    \n[13] Georges Goven     ->Manuel Orantes   Manuel Orantes    ->Ilie Nastase    \n+ ... omitted several edges\n```\n:::\n:::\n\n\nNow instead of the useless one, two, three, etc. names, we have the actual year numbers as the names of the elements on each list. \n\nSo if we wanted to know the top five players for 1988 we could just type:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   top5(g[[\"1988\"]])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Stefan Edberg     Andre Agassi     Boris Becker    Mats Wilander \n              63               59               52               49 \nAaron Krickstein \n              48 \n```\n:::\n:::\n\n\nNote the double bracket notation and the fact that the name of the list is a character not a number (hence the scare quotes).\n\nIf we don't want to remember the bracket business, we could also use the $ operator to refer to particular list elements:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   top5(g$\"1988\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Stefan Edberg     Andre Agassi     Boris Becker    Mats Wilander \n              63               59               52               49 \nAaron Krickstein \n              48 \n```\n:::\n:::\n\n\nOf course, we can also use the names to subset the list. Let's say we wanted the top five players for 1970, 1980, 1990, 2000, 2010, and 2020. \n\nAll we have to do is type:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   decades <- c(\"1970\", \"1980\", \"1990\", \"2000\", \"2010\", \"2020\")\n   lapply(g[decades], top5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$`1970`\n      Arthur Ashe      Cliff Richey         Rod Laver        Stan Smith \n               51                49                48                45 \nZeljko Franulovic \n               42 \n\n$`1980`\n     Ivan Lendl    John Mcenroe Brian Gottfried      Bjorn Borg Eliot Teltscher \n             97              76              63              62              62 \n\n$`1990`\n  Boris Becker  Stefan Edberg     Ivan Lendl   Pete Sampras Emilio Sanchez \n            62             57             50             47             44 \n\n$`2000`\nYevgeny Kafelnikov        Marat Safin    Gustavo Kuerten      Magnus Norman \n                63                 61                 59                 58 \n    Lleyton Hewitt \n                53 \n\n$`2010`\n   Rafael Nadal   Roger Federer    David Ferrer Robin Soderling   Jurgen Melzer \n             63              54              53              53              51 \n\n$`2020`\n     Andrey Rublev     Novak Djokovic Stefanos Tsitsipas       Rafael Nadal \n                40                 36                 27                 26 \n   Daniil Medvedev \n                24 \n```\n:::\n:::\n\n\nNote that we are back to the single bracket notation.\n\nWith a bit of practice, lists will become your friends!\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}