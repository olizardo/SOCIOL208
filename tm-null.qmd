---
title: "Graph Ensembles in Two-Mode Networks"
execute: 
  eval: true
  echo: true
  output: true
  warning: false
  message: false
format: 
   html:
      code-line-numbers: true
---

As we saw in the [graph ensemble lesson](swap.qmd), there are many approaches to randomizing the structure of one-mode networks when the aim is to create **graph ensembles** preserving selected properties. These ensembles, in turn, can be used to do **null hypothesis testing** in networks. 

Not surprisingly, a similar suite of techniques exist for the two-mode case, but until recently various approaches were scattered (and reduplicated) across a bunch of literatures in social network analysis, ecology, network physics, and  computer science [@neal_etal24]. 

## Two-Mode Erdos-Renyi Model

Like with one-mode networks, the simplest null model for two-mode networks is one that preserves the number of nodes and the number of edges. This model, like we saw in the one-mode network case, also preserves anything that is a function of these two-quantities. In the two-mode case, this is the bipartite graph's **density** and the average degrees of the nodes in each mode (recall that two-mode networks [have two average degrees](two-mode.qmd)). This is thus a two-mode version of the **Erdos-Renyi** null model. 

Let's load up the *Southern Women* (SW) data and see how it works:

```{r}
   library(igraph)
   library(networkdata)
   A <- as_biadjacency_matrix(southern_women)
```

Let's compute some basic network statistics:

```{r}
   d <- sum(A)/(nrow(A)*ncol(A)) #density
   ad.p <- mean(rowSums(A)) #average degree of people
   ad.g <- mean(colSums(A)) #average degree of groups
   d
   ad.p
   ad.g
```

We can see that the density of the SW network is $d=$ `r round(d, 2)`, the average degree of people $\bar{k_p}=$ `r round(ad.p, 2)` and the average degree of groups $\bar{k_g}=$ `r round(ad.g, 2)`.  

Now, let's compute something on this network, like the **degree correlation** between people and groups, answering  the question: Do people with lots of memberships tend to join larger groups?

First let's create an edge list data frame with the incident nodes' degrees as the two main columns and compute the correlation between the respective degrees:

```{r}
   v.a <- as.vector(A) #adjacency relations
   rd <- rep(rowSums(A), ncol(A)) #row degrees
   cd <- rep(colSums(A), each = nrow(A)) #column degrees
   d <- data.frame(e = v.a, rd =  rd, cd = cd)
   cor(d[d$e == 1, ]$rd, d[d$e == 1, ]$cd) #degree correlation among adjacent nodes
```

Which is negative, suggesting **degree anti-correlation** in this network (people with lots of memberships tend to belong to smaller groups). 

Is this value statistically significant net of the network density? To find out, we need to create a two-mode **graph ensemble** of networks with the same density, number of persons, and number of groups as SW. 

Before we get to that, let's package the steps above into a two-mode degree correlation function:

```{r}
   tm.deg.corr <- function(x) {
      d <- data.frame(e = as.vector(x), 
                      rd = rep(rowSums(x), ncol(x)), 
                      cd = rep(colSums(x), each = nrow(x)))
      return(cor(d[d$e == 1, ]$rd, d[d$e == 1, ]$cd))
   }
```

This function takes the biadjacency matrix as input, and returns the correlations between the degrees of nodes in each mode. 

OK, now back to generating an Erdos-Renyi two-mode network. A simple approach goes like this: 

First, let's create a vectorized version of the adjacency matrix:

```{r}
   v.a <- as.vector(A)
   v.a
```

These are just the biadjacency matrix entries stretched out into a long vector of length equal to the number of rows multiplied by the number of columns of the matrix (`r nrow(A)` $\times$ `r ncol(A)` $=$ `r nrow(A)*ncol(A)`). 

Then we just reshuffle the values of this vector by reassigning vector positions across the entire length of the vector at random:

```{r}
   v.shuff <- v.a[sample(1:length(v.a))]
```

Now we can just generate a new biadjacency matrix `A.perm` from the reshuffled vector `v.shuff`:

```{r}
   A.perm <- matrix(v.shuff, nrow = nrow(A)) #creating permuted biadjacency matrix
   rownames(A.perm) <- rownames(A)
   colnames(A.perm) <- colnames(A)
   A.perm
```

We can verify that `A.perm` has the same basic network statistics as `A`:

```{r}
   d <- sum(A.perm)/(nrow(A.perm)*ncol(A.perm)) #density
   ad.p <- mean(rowSums(A.perm)) #average degree of people
   ad.g <- mean(colSums(A.perm)) #average degree of groups
   d
   ad.p
   ad.g
```

But *not* the same degree distributions:

```{r}
   rowSums(A)
   rowSums(A.perm)
   colSums(A)
   colSums(A.perm)
```

We can now package the two-mode permutation steps into a function called `tm.perm`:

```{r}
   tm.perm <- function(x) {
      v.a <- as.vector(x)
      v.s <- v.a[sample(1:length(v.a))]
      w <- matrix(v.s, nrow = nrow(x))
      rownames(w) <- rownames(x)
      colnames(w) <- colnames(x)
      return(w)
   }
```

And generate a 500 strong Erdos-Renyi graph ensemble for the SW data:

```{r}
   set.seed(4567)
   G <- replicate(500, tm.perm(A), simplify = FALSE)
```

We can now `sapply` the `tm.deg.corr` function from before across our ensemble to get 500 degree correlations:

```{r}
   corrs <- sapply(G, tm.deg.corr)
   corrs[1:100] #first hundred entries
```

So let's see how our observed value stacks up in the grand scheme:

```{r}
   library(ggplot2)
   p <- ggplot(data = data.frame(round(corrs, 2)), aes(x = corrs))
   p <- p + geom_histogram(binwidth = 0.015, stat = "bin", fill = "darkblue")
   p <- p + geom_vline(xintercept = tm.deg.corr(A), 
                       color = "red", linetype = 1, linewidth = 1.5)
   p <- p + geom_vline(xintercept = 0, linetype = 1, 
                       color = "purple", linewidth = 1.5)
   p <- p + theme_minimal() + labs(x = "Q by Level", y = "Freq.")
   p <- p + theme(axis.text = element_text(size = 12))
   p <- p + annotate("text", x=-0.04, y=45, label= "Zero Point", color = "purple")
   p <- p + annotate("text", x=-0.23, y=45, label= "Obs. Value", color = "red")
   p
```

It looks like our observed value is close to the tail end of the negative spectrum, suggesting it is statistically improbable to have been obvserved by chance. We can compute the value that corresponds to the 1st percentile of the assortativity distribution from the ensemble and then see if what observe is below that value ($p < 0.01$). 

```{r}
   quantile(corrs, probs = 0.01)
   tm.deg.corr(A) < quantile(corrs, probs = 0.01)
```

Which is definitely true in this null graph ensemble, suggesting that degree anti-correlation is present in the SW data, at statistically significant levels, net of density. 

As before, if we wanted a more stringent two-tailed we would need to create a vector with the *absolute value* of the two-mode degree correlation: 

```{r}
   1 - ecdf(abs(corrs))(abs(tm.deg.corr(A)))
```

Which is still statistically significant at conventional levels. 

## Fixed Degree Models
As we already noted, the two-mode Erdos-Renyi model fixes the number of edges (and thus the density and average degrees) in the network, but does not preserve the original degree distributions. We might want to test our hypotheses by using a two-mode graph ensemble that "controls for" the node degrees. 

How do we do that? One complication is that we have two sets of degrees so we have more options than in the one mode case. We can fix the row (person) degree, or the column (group) degree or *both* degrees. 

Let's begin with the simplest case, in which we fix *either* the row or column degree but not both. 

### Fixing Row Degrees

To fix the row degrees, we need to randomize the entries in each row of the biadjacency matrix, while preserving the number of ones in that row. One way to do this is to write a function that takes an observed row of the matrix, randomizes it and then substitutes it for the observed row:

```{r}
   rand.row <- function(r) {
      return(r[sample(1:length(r))])
      }
```

Now we can just `apply` the `rand.row` function to each row of the biadjacency matrix `A` to generate a new matrix `A.r`:

```{r}
   A.r <- apply(A, 1, rand.row)
   A.r <- t(A.r)
   rownames(A.r) <- rownames(A)
   colnames(A.r) <- colnames(A)
```

Here's the original matrix `A`:

```{r}
   A
```

And the reshuffled matrix `A.r`

```{r}
   A.r
```

Note that the new matrix `A.r` preserves the person degrees of the original:

```{r}
   rowSums(A)
   rowSums(A.r)
```

But not the group degrees, because each person's memberships are randomly distributed across groups:

```{r}
   colSums(A)
   colSums(A.r)
```

All the other lower order statistics like density are preserved:

```{r}
   sum(A.r)/(nrow(A.r)*ncol(A.r))
```

Now we package everything into a function:

```{r}
   fix.deg <- function(x, mode = 1) {
      w <- apply(x, mode, function(r) {r[sample(1:length(r))]})
      if (mode == 1) {
         w <- t(w)
         }
      rownames(w) <- rownames(x)
      colnames(w) <- colnames(x)
      return(w)
      }
```

We then generate a graph ensemble of reshuffled matrices that preserve the person degrees, and compute our degree correlations in that set of networks:

```{r}
   set.seed(4567)
   G <- replicate(500, fix.deg(A), simplify = FALSE)
   corrs <- sapply(G, tm.deg.corr)
```

Let's compute the degree correlations across this ensemble and see how our observed value stacks up in the grand scheme:

```{r, echo=FALSE}
   p <- ggplot(data = data.frame(round(corrs, 2)), aes(x = corrs))
   p <- p + geom_histogram(binwidth = 0.015, stat = "bin", fill = "darkblue")
   p <- p + geom_vline(xintercept = tm.deg.corr(A), 
                       color = "red", linetype = 1, linewidth = 1.5)
   p <- p + geom_vline(xintercept = 0, linetype = 1, 
                       color = "purple", linewidth = 1.5)
   p <- p + theme_minimal() + labs(x = "Q by Level", y = "Freq.")
   p <- p + theme(axis.text = element_text(size = 12))
   p <- p + annotate("text", x=-0.05, y=47, label= "Zero Point", color = "purple")
   p <- p + annotate("text", x=-0.23, y=47, label= "Obs. Value", color = "red")
   p
```

Looking pretty good! Let's check the p-value:

```{r}
   quantile(corrs, probs = 0.01)
   tm.deg.corr(A) < quantile(corrs, probs = 0.01)
   1 - ecdf(abs(corrs))(abs(tm.deg.corr(A)))
```

Note that our result is no longer statistically significant at the $p <0.01$ level, but it can be defended at the $p < 0.05$ level. Still a chance of getting published.

### Fixing Column Degrees
We can fix the column degrees using the same `fix.deg` function as earlier, but this time, we just change the `mode` argument to equal `2`, to `apply` the function to the columns and not the rows of the matrix `A`. 

For instance:

```{r}
   A.c <- fix.deg(A, mode = 2)
   A.c
```

Which generates a reshuffled adjacency matrix that preserves the group degrees:

```{r}
   colSums(A)
   colSums(A.c)
```

But *not* the person degrees:

```{r}
   rowSums(A)
   rowSums(A.c)
```

And now we test our hypothesis that there is degree anti-correlation in the SW data on an ensemble of graphs with fixed group degrees:


```{r}
   set.seed(4567)
   G <- replicate(500, fix.deg(A, mode = 2), simplify = FALSE)
   corrs <- sapply(G, tm.deg.corr)
```

Let's see how things look:

```{r, echo=FALSE}
   p <- ggplot(data = data.frame(round(corrs, 2)), aes(x = corrs))
   p <- p + geom_histogram(binwidth = 0.015, stat = "bin", fill = "darkblue")
   p <- p + geom_vline(xintercept = tm.deg.corr(A), 
                       color = "red", linetype = 1, linewidth = 1.5)
   p <- p + geom_vline(xintercept = 0, linetype = 1, 
                       color = "purple", linewidth = 1.5)
   p <- p + theme_minimal() + labs(x = "Q by Level", y = "Freq.")
   p <- p + theme(axis.text = element_text(size = 12))
   p <- p + annotate("text", x=-0.05, y=47, label= "Zero Point", color = "purple")
   p <- p + annotate("text", x=-0.23, y=47, label= "Obs. Value", color = "red")
   p
```

Uh oh, adjusting for group degrees seems to have made our conclusions a bit more shaky. Let' see:

```{r}
   quantile(corrs, probs = 0.01)
   tm.deg.corr(A) < quantile(corrs, probs = 0.01)
   1 - ecdf(abs(corrs))(abs(tm.deg.corr(A)))
```

Still significant at $p < 0.05$! 

Regardless, it is clear that our earlier conclusions from the Erdos-Renyi model were a bit too optimistic. What happens when we try to fix *both* the row and column degrees?

### Fixing Row and Column Degrees
To fix row and column degrees, we play a swapping game. At each round, we select two random persons $a$ and $b$. Each person collects their memberships and calculates the memberships they have that the other person does not have (and vice versa). Thus, $a$ has a set of memberships that $b$ does not have, and $b$ has a set of memberships that $a$ does not have. Then they trade memberships $n$ times where $n$ is a number between zero and the minimum of the size of the two sets of memberships that the other person does not have. We repeat this trading game for $k$ number of times. 

Below is a function called `make.swap` that implements this algorithm, called "curveball" [@neal_etal24]. The function takes the biadjacency matrix as input and repeats the swapping process described above 100 times:


```{r}
   make.swap <- function(x, k = 100) {
      z <- 1 #initializing counter
      while(z <= k) {
         n <- sample(rownames(x), 2) #sampling two people at random
         a <- n[1] #person a
         b <- n[2] #person b
         a.m <- names(which(x[a, ] == 1)) #person a's memberships
         b.m <- names(which(x[b, ] == 1)) #person b's memberships
         ab <- setdiff(a.m, b.m) #memberships that a has that b does not
         ba <- setdiff(b.m, a.m) #memberships that b has that a does not
         w <- sample(0:min(length(ab), length(ba)), size = 1) #number of rounds of trade
         if (w > 0) {
            for (i in 1:w) {
               ab.m <- sample(ab, 1) #membership that a will transfer to b
               ba.m <- sample(ba, 1) #membership that b will transfer to a
               x[a, ab.m] <- 0 #a loses membership
               x[b, ab.m] <- 1 #b gains membership
               x[b, ba.m] <- 0 #b loses membership
               x[a, ba.m] <- 1 #a gains membership
               a.m <- names(which(x[a, ] == 1)) #updating a's memberships
               b.m <- names(which(x[b, ] == 1)) #updating b's memberships
               ab <- setdiff(a.m, b.m) #updating differences between a and b's memberships
               ba <- setdiff(b.m, a.m) #updating differences between b and a's memberships
               }
            }
         z <- z + 1 #incrementing counter
         }
      return(x)
   }
```

Here's an example:

```{r}
   A.s <- make.swap(A)
   A.s
```

We can see that while the specifc entries of the swapped biadjacency matrix `A.s` are different from those of the original matrix `A` both the row and column degrees are preserved:
 
```{r}
   rowSums(A.s)
   rowSums(A)
   colSums(A.s)
   colSums(A)
```

And now we create our graph ensemble with fixed row *and* column degrees, and test our degree anti-correlation hypothesis:

```{r}
   set.seed(4567)
   G <- replicate(500, make.swap(A), simplify = FALSE)
   corrs <- sapply(G, tm.deg.corr)
```

Plotting the results gives us:

```{r, echo=FALSE}
   p <- ggplot(data = data.frame(round(corrs, 2)), aes(x = corrs))
   p <- p + geom_histogram(binwidth = 0.015, stat = "bin", fill = "darkblue")
   p <- p + geom_vline(xintercept = tm.deg.corr(A), 
                       color = "red", linetype = 1, linewidth = 1.5)
   p <- p + geom_vline(xintercept = 0, linetype = 1, 
                       color = "purple", linewidth = 1.5)
   p <- p + theme_minimal() + labs(x = "Q by Level", y = "Freq.")
   p <- p + theme(axis.text = element_text(size = 12))
   p <- p + annotate("text", x=-0.03, y=50, label= "Zero Point", color = "purple")
   p <- p + annotate("text", x=-0.24, y=50, label= "Obs. Value", color = "red")
   p
```

Note that once we fix the person and group degrees, most of the degree correlations observed in the ensemble are negative (below zero). The observed value also does not look as extreme as with the Erdos-Renyi or fixed degree model for either rows or columns separately. 

Let's check the p-value at $p < 0.01$:

```{r}
   quantile(corrs, probs = 0.01)
   tm.deg.corr(A) < quantile(corrs, probs = 0.01)
```

Not close to significant it seems. How about $p < 0.05$?

```{r}
   quantile(corrs, probs = 0.05)
   tm.deg.corr(A) < quantile(corrs, probs = 0.05)
```

That does not seem to work either! What's the actual p-value?

```{r}
   1 - ecdf(abs(corrs))(abs(tm.deg.corr(A)))
```

As suspected, the two-tailed test indicates that the hypothesis of degree anti-correlation is no longer justified in these data even using a criterion of $p < 0.05$. 

Looks like our paper won't be published after all :(
