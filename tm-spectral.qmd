---
title: "Spectral Clustering of Two-Mode Networks"
execute: 
  eval: true
  echo: true
  output: true
  warning: false
  message: false
format: 
   html:
      code-line-numbers: true
---

We can use a variant of the [spectral clustering approach](spectral.qmd) to find communities in two-mode networks [@wu_etal22]. This approach combines [Correspondence Analysis (CA)](tm-ca.qmd) and k-means clustering on multiple  dimensions. 

So let's bring back our old friend, the Southern Women data:

```{r}
    library(igraph)
    library(networkdata)
    g <- southern_women #southern women data
    A <- as.matrix(as_biadjacency_matrix(g)) #bi-adjacency matrix
    A2 <- as.matrix(as_adjacency_matrix(g)) #bipartite adjacency matrix
```

Let's also compute the bi-adjacency modularity matrix:

```{r}
   dp <- as.matrix(rowSums(A))
   dg <- as.matrix(colSums(A))
   dpdg <- dp %*% t(dg) #person x group degree product matrix
   B <- A - dpdg/sum(A)
   round(B, 2)
```

Great! Now, from this information we can compute a version of the bipartite modularity matrix:

```{r}
   n <- nrow(A) + ncol(A)
   Np <- nrow(A)
   names <- c(rownames(A), colnames(A))
   B2 <- matrix(0, n, n) #all zeros matrix of dimensions (p + g) X (p + g)
   B2[1:Np, (Np + 1):n] <- B #putting B in the top right block
   B2[(Np + 1):n, 1:Np] <- t(B) #putting B transpose in the lower-left block
   rownames(B2) <- names
   colnames(B2) <- names
```

And now let's find the CA scores. This time will use the canned function `CA` from the the package `FactoMineR`

```{r}
   #install.packages("FactoMineR")
   library(FactoMineR)
   CA.res <- CA(A, graph = FALSE, ncp = 10)
```

Which computes CA directly on the bi-adjacency matrix (the argument `ncp` asks to keep the first ten dimensions). 

We can now extract the CA scores for persons and groups from the resulting object:

```{r}
   eig.vec.p <- CA.res$row$coord
   eig.vec.g <- CA.res$col$coord
   head(eig.vec.p)
   head(eig.vec.g)
```

Great! You can verify that these are the same scores we obtained in [two-mode CA lecture](tm-ca.qmd) via a more elaborate route.

Now, we can just create our `U` matrix by stacking the person and group scores using the first three dimensions:

```{r}
   U <- rbind(eig.vec.p, eig.vec.g)[, 1:3]
   head(U)
   tail(U)
```

Nice! Now we can just feed `U` to our `k.cuts` function to place persons and groups into cluster assignments beginning with two and ending with ten:

```{r}
   k.cuts <- function(x, max = 9) {
      clus <- list()
      for (i in 1:max) {
         set.seed(456) #setting seed because kmeans uses random starting nodes for cluster centroids
         k <- i + 1
         clus[[i]] <- kmeans(x, k)$cluster
         }
      return(clus)
   }
```

```{r}
   clus <- k.cuts(U)
```

Of course, we can't use the `mod.check` function [we used before](spectral.qmd) because that relies on the standard method for checking the modularity in one-mode networks and doesn't take into account the structural zeros in the bipartite graph. 

So we need to come up with a custom method to check the modularity for the bipartite case. 

First, we need a function that takes a cluster assignment vector containing numbers for each cluster $k = \{1, 2, 3, \ldots C\}$ and turns it into a dummy coded cluster assignment matrix:

```{r}
   make.dummies <- function(x) {
      vals <- unique(x)
      U <- matrix(0, length(x), length(vals))
      for (k in vals) {
         U[, k] <- as.numeric(x == k)
      }
   return(U)
   }
```

Let's test it out:

```{r}
   make.dummies(clus[[3]])
```

Great! Looks like it works. 

Finally, we need to write a custom function for bipartite modularity checking across different assignments:

```{r}
   mod.check2 <- function(x, c, w) {
      k <- length(c)
      m <- rep(0, k)
      for (i in 1:k) {
         u <- make.dummies(c[[i]])
         m[i] <- sum(diag(t(u) %*% x %*% u))/sum(w)
         }
   names(m) <- 2:(k+1)
   return(m)
   }
```

The function `mod.check2` needs three inputs: The bipartite modularity matrix, a list with different assignments of the nodes in the bipartite graph to different clusters, and the bipartite adjacency matrix. It returns a vector `m` with the modularities of each of the partitions in the list `c`. 

And, now, for the big reveal:

```{r}
   round(mod.check2(B2, clus, A2), 3)
```

Looks like the spectral clustering results favor a four-community partition although the more parsimonious three and binary community partitions also look pretty good. 

@fig-women-1 and @fig-women-2 show a plot of the three and four community solutions according to the CA dimensions (since we already saw the binary partition in the CA handout).

Of course, just like we did with one-mode networks, we can also obtain a spectral clustering directly from the eigenvectors of the bipartite modularity matrix in just a couple of lines:

```{r}
   clusB <- k.cuts(eigen(B2)$vectors[, 1:2])
   round(mod.check2(B2, clusB, A2), 3)
```

Here we create the `U` matrix from the first two dimensions of the eigendecomposition of the bipartite modularity matrix. The results suggest that the three community partition is optimal, although the two-community one also does well. The corresponding splits are shown in @fig-women-3 and @fig-women-4. 

Note that the main difference between CA and modularity based clustering in two-mode networks is that modularity seems to prefer evenly balanced communities (in terms of number of nodes), while CA does not mind grouping nodes into small communities (like $\{Flora, Nora, 2/23\}$)


```{r}  
#| label: fig-women
#| fig-height: 12
#| fig-width: 12
#| fig-cap: "Spectral Clustering of Nodes in the Southern Women Data."
#| fig-subcap:
#|   - "Three Community Solution (CA)"
#|   - "Four Community Solution (CA)"
#|   - "Two Community Solution (Bipartite Modularity)"
#|   - "Three Community Solution (Bipartite Modularity)"
#| layout-ncol: 2
#| echo: false

   V(g)$type <- bipartite_mapping(g)$type
   V(g)$shape <- ifelse(V(g)$type, "square", "circle")
   V(g)$color <- clus[[2]]
   set.seed(123)
   plot(g, 
     vertex.size=7, vertex.frame.color="lightgray", 
     vertex.label.dist = 1.5, edge.curved=0.2, 
     vertex.label.cex = 1.35)
   V(g)$color <- clus[[3]]
   set.seed(123)
   plot(g, 
     vertex.size=7, vertex.frame.color="lightgray", 
     vertex.label.dist = 1.5, edge.curved=0.2, 
     vertex.label.cex = 1.35)
   V(g)$type <- bipartite_mapping(g)$type
   V(g)$shape <- ifelse(V(g)$type, "square", "circle")
   V(g)$color <- clusB[[1]]
   set.seed(123)
   plot(g, 
     vertex.size=7, vertex.frame.color="lightgray", 
     vertex.label.dist = 1.5, edge.curved=0.2, 
     vertex.label.cex = 1.35)
   V(g)$color <- clusB[[2]]
   set.seed(123)
   plot(g, 
     vertex.size=7, vertex.frame.color="lightgray", 
     vertex.label.dist = 1.5, edge.curved=0.2, 
     vertex.label.cex = 1.35)
```

## Bipartite Modularity Allowing People and Groups to Belong to Different Number of Communities

One limitation of Barber's [-@barber07] approach to computing the modularity we have been using to analyze community structure in two-mode networks is that it can only be used under the assumption that the number of communities is the *same* for both persons and groups. 

However, it could be that the optimal partition is actually one in which the people node set is split into a *different* number of clusters than the group node set. 

So we need a way to evaluate the modularity of a partition when we have different number of communities on the people and group side. 

Here's how to do it.

First, we generate two separate candidate community assignments for people and groups via spectral clustering from CA using the first six eigenvectors:

```{r}
   k.cuts.p <- k.cuts(CA.res$row$coord[, 1:6])
   k.cuts.g <- k.cuts(CA.res$col$coord[, 1:6])
```

As an example, let's pick the solution that partitions people into four communities and the groups into three communities:

```{r}
   C.p <- k.cuts.p[[3]]
   C.g <- k.cuts.g[[2]]
```

Given this information, we can create a $4 \times 3$ matrix recording the proportion of ties in the network that go from person-community $l$ to group-community $m$:

```{r}
   e <- matrix(0, 4, 3)
   for (l in 1:4) {
      for (m in 1:3) {
         e[l, m] = sum(A[C.p == l, C.g == m]) * 1/sum(A)
      }
   }
   round(e, 2)
```

For instance, this matrix says that 53% of the ties in the Southern women data go from people in the fourth community to groups in the third community, according to the CA spectral partition. 

@suzuki_wakita09, building on work by @murata09, suggest using the `e` matrix above to compute the modularity of any pair of person/group community assignment according to the following formula:

$$
Q = \frac{1}{2}\sum_{l, m}\frac{e_{lm}}{e_{l+}}\left(e_{lm} - e_{l+}e_{+m}\right)
$$

Where $e_{lm}$ is the proportion of edges connecting people in the $l^{th}$ person-community to groups in the $m^{th}$ event-community, $e_{l+}$ is the proportion of edges originating from person-community $i$ (the corresponding entry of the row sum of `e`), and $e_{+m}$ is the proportion of edges originating from nodes in group-community $j$ (the corresponding entry of the column sum of `e`).

So the idea is that given a partition of the person nodes into $L$ communities and a partition of the group nodes into $M$ communities, we can generate an `e` matrix like the one above and compute the corresponding modularity of that person/group partition using the above equation.

Here's a function that computes the `e` matrix from a pair of person/group partitions and then returns the $Q$ value corresponding to that matrix using the above formula:

```{r}
   find.mod <- function(w, x, y) {
      Cx <- max(x)
      Cy <- max(y)
      M <- sum(w)
      e <- matrix(0, Cx, Cy)
      for (l in 1:Cx) {
         for (m in 1:Cy) {
            e[l, m] = sum(w[x == l, y == m]) * 1/M
         }
      }
      Q <- 0
      a <- rowSums(e)
      b <- colSums(e)
      for (l in 1:Cx) {
         for (m in 1:Cy) {
            Q <- Q + (e[l, m]/a[l] * (e[l, m] - a[l]*b[m]))
         }
      }
   return(Q/2)
   }
```

So for the `e` matrix from the above example, $Q$ would be:

```{r}
   find.mod(A,  k.cuts.p[[3]],  k.cuts.g[[2]])
```

Which looks like a positive number. But is it the biggest of all the possible community partition combinations between people and groups?

To answer this question, we can use the `find.mod` function to compute the modularity between *every pair* of partitions between people and groups that we calculated earlier. Since we computed eight different partitions for people and groups this leads to $8 \times 8 = 64$ pairs.

Here's a wrapper function over `find.mod` that computes the corresponding modularity values for each partition pair:

```{r}
   mod.mat <- function(d) {
     q <- matrix(0, d, d)
      for (i in 1:d) {
         for (j in 1:d) {
               q[i, j] <- find.mod(A,  k.cuts.p[[i]],  k.cuts.g[[j]])
         }
      }
    return(q)
   }
   Q <- round(mod.mat(8), 3)
   Q
```

Interestingly, the analysis suggests that the maximum modularity $Q = `r Q[4, 1]`$ is obtained with a partition of people into five communities and groups into two communities corresponding to cells $(4, 1)$ of the above matrix.

Here's what this community assignment looks like in the Southern Women data:

```{r}  
#| fig-height: 12
#| fig-width: 12
#| fig-cap: "Spectral Clustering of Nodes in the Southern Women Data with Optimal Community Assignment Obtained via the Suzuki Modularity, with Five Communities for People, Two Communities for Groups."
#| echo: false

   V(g)$type <- bipartite_mapping(g)$type
   V(g)$shape <- ifelse(V(g)$type, "square", "circle")
   V(g)$color <- c(k.cuts.p[[4]], k.cuts.g[[1]] + 5)
   set.seed(456)
   plot(g, 
     vertex.size=7, vertex.frame.color="lightgray", 
     vertex.label.dist = 1.5, edge.curved=0.2, 
     vertex.label.cex = 1.15)
```

The analysis separates two groups of densely connected actors of size six and five, respectively, namely, \{Brenda, Theresa, Laura, Frances, Evelyn, Eleanor\} and \{Katherine, Nora, Sylvia, Myrna, Helen\} along with their corresponding events from the one another. In the same way, \{Pearl, Dorothy, Ruth, Verne\} form a community of more peripheral actors who selectively attend the more popular events; \{Flora, Olivia\} are a two-actor community occupying the most peripheral position. Among the core set of actors, \{Charlotte\} occupies a singleton-community of her own. 

Events are partitioned into two broad groups: One the one hand, we have those selectively attended by the larger community of densely connected actors along with the most popular events; on the other hand, we have the events selectively attended by the smaller group of densely connected actors. 