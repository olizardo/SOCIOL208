{
  "hash": "3b89151f0d808d8301fb02de380961b2",
  "result": {
    "markdown": "---\ntitle: \"Analyzing Two-Mode Networks\"\nexecute: \n  eval: true\n  echo: true\n  output: true\n  warning: false\n  message: false\nformat: \n   html:\n      code-line-numbers: true\n---\n\n\n## Two-Mode Networks\n\nThis lecture deals with the network analysis of two-mode networks. Note that in the literature there is some terminological slippage. Two-mode networks are a type of social network. By definition two-mode networks can be represented using rectangular adjacency matrices (sometimes called **affiliation matrices** in sociology). \n\nIn this case, two-mode networks fall under the general category of \"two-mode data.\" Any data set that has information on two types of objects (e.g., people and variables) is two-mode data so two-mode networks are just a special case of two-mode data.\n\nIn this sense, there is a useful a distinction, due to @borgatti_everett97. This is that between the \"modes\" and the \"ways\" of a data matrix. So most data matrices are two-ways, in that they have at least two dimensions (e.g., the row and column dimensions). \n\nBut some data matrices (like the usual adjacency matrix in regular network data) only collect information on a single type of entity, so they are \"one mode, two ways.\" But sometimes we have network data on two sets of objects, in which case, we use a data matrix that has \"two-modes\" (sets of nodes) *and* \"two ways\" (rows and columns).\n\nSo what makes a network a \"two-mode network\"? Well, a two-mode network is different from a regular network, because it has two sets of nodes not just one. So instead of $V$ now we have $V_1$ and $V_2$. Moreover, the edges in a two-mode network only go from nodes in one set to nodes in the other set; there are no within-node-set edges. \n\n## Bipartite Graphs\n\nThis restriction makes the graph that represents a two-mode network a special kind of graph called a **bipartite graph**. A graph is bipartite if the set of nodes in the graph can be divided into two groups, such that relations go from nodes in one set to nodes in the other set. \n\nNote that bipartite graphs can be be used to represent both two-mode and regular one mode networks, as long as the above condition holds. For instance, a dating network with 100% heterosexual people will yield a bipartite graph based on the dating relation, with men in one set and women on the other node set, even though it's a one-mode network. \n\nSo whether or not a graph is bipartite is something you can check for. \n\nLet's see how that works. Let us load the most famous two-mode network data set (kind of the Drosophila of two-mode network analysis; one of the most repeatedly analyzed social structures in history: For a classic sampling of such analyses see [here](https://www.csc2.ncsu.edu/faculty/mpsingh/local/Social/f16/wrap/readings/Freeman-social-groups.pdf)) a network composed of eighteen women from the social elite of a tiny town in the south in the 1930s who attended fourteen social events [@breiger74]:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   library(igraph)\n   library(networkdata)\n   g <- southern_women\n```\n:::\n\n\nNow we already know this is a bipartite graph. However, let's say you are new and you've never heard of these data. You can check whether the graph you loaded up is bipartite or not by using the `igraph` function `is_bipartite`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   is_bipartite(g)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\nWhich returns `TRUE` as an answer. Had we loaded up any old non-bipartite graph, the answer would have been:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   g.whatever <- movie_45\n   is_bipartite(g.whatever)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\nWhich makes sense because that's just a regular old graph. \n\nNote that if we check the bipartite graph object, it looks like any other `igraph` object:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   g\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIGRAPH 1074643 UN-B 32 89 -- \n+ attr: type (v/l), name (v/c)\n+ edges from 1074643 (vertex names):\n [1] EVELYN   --6/27 EVELYN   --3/2  EVELYN   --4/12 EVELYN   --9/26\n [5] EVELYN   --2/25 EVELYN   --5/19 EVELYN   --9/16 EVELYN   --4/8 \n [9] LAURA    --6/27 LAURA    --3/2  LAURA    --4/12 LAURA    --2/25\n[13] LAURA    --5/19 LAURA    --3/15 LAURA    --9/16 THERESA  --3/2 \n[17] THERESA  --4/12 THERESA  --9/26 THERESA  --2/25 THERESA  --5/19\n[21] THERESA  --3/15 THERESA  --9/16 THERESA  --4/8  BRENDA   --6/27\n[25] BRENDA   --4/12 BRENDA   --9/26 BRENDA   --2/25 BRENDA   --5/19\n[29] BRENDA   --3/15 BRENDA   --9/16 CHARLOTTE--4/12 CHARLOTTE--9/26\n+ ... omitted several edges\n```\n:::\n:::\n\n\nBut we can tell that the graph is a two-mode network because we have links starting with people with old southern lady names from the 1930s (which are also the names of a bunch of young girls in middle school today) and ending with events that have dates in them. So the (undirected) edge is $person-event$. \n\nThe graph is undirected because the \"membership\" or \"attendance\" relation between a person and an organization/event doesn't have a natural directionality:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   is_directed(g)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\nAnother way of checking the \"bipartiteness\" of a graph in `igraph` is by using the `bipartite_mapping` function. \n\nLet's see what it does:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   bipartite_mapping(g)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$res\n[1] TRUE\n\n$type\n   EVELYN     LAURA   THERESA    BRENDA CHARLOTTE   FRANCES   ELEANOR     PEARL \n    FALSE     FALSE     FALSE     FALSE     FALSE     FALSE     FALSE     FALSE \n     RUTH     VERNE     MYRNA KATHERINE    SYLVIA      NORA     HELEN   DOROTHY \n    FALSE     FALSE     FALSE     FALSE     FALSE     FALSE     FALSE     FALSE \n   OLIVIA     FLORA      6/27       3/2      4/12      9/26      2/25      5/19 \n    FALSE     FALSE      TRUE      TRUE      TRUE      TRUE      TRUE      TRUE \n     3/15      9/16       4/8      6/10      2/23       4/7     11/21       8/3 \n     TRUE      TRUE      TRUE      TRUE      TRUE      TRUE      TRUE      TRUE \n```\n:::\n:::\n\n\nThis function takes the candidate bipartite graph as input and returns to objects: `res` is just a check to see if the graph is actually bipartite (`TRUE` in this case), `type` is a logical vector of dimensions $M + N$ (where $M$ is the number of nodes in the person set and $N$ is the number of nodes in the event set) dividing the nodes into two groups. Here people get `FALSE` and events get `TRUE`, but this designations are arbitrary (a kind of dummy coding; `FALSE` = 0 and `TRUE` = 1). \n\nWe can add this as a node attribute to our graph so that way we know which node is in which set:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   V(g)$type <- bipartite_mapping(g)$type\n```\n:::\n\n\n## The Bi-Adjacency (Affiliation) Matrix\n\nOnce you have your bipartite graph loaded up, you may want (if the graph is small enough) to check out the graph's affiliation matrix $A$. \n\nThis works just like before, except that now we use the `as_biadjacency_matrix` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   A <- as.matrix(as_biadjacency_matrix(g))\n   A\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          6/27 3/2 4/12 9/26 2/25 5/19 3/15 9/16 4/8 6/10 2/23 4/7 11/21 8/3\nEVELYN       1   1    1    1    1    1    0    1   1    0    0   0     0   0\nLAURA        1   1    1    0    1    1    1    1   0    0    0   0     0   0\nTHERESA      0   1    1    1    1    1    1    1   1    0    0   0     0   0\nBRENDA       1   0    1    1    1    1    1    1   0    0    0   0     0   0\nCHARLOTTE    0   0    1    1    1    0    1    0   0    0    0   0     0   0\nFRANCES      0   0    1    0    1    1    0    1   0    0    0   0     0   0\nELEANOR      0   0    0    0    1    1    1    1   0    0    0   0     0   0\nPEARL        0   0    0    0    0    1    0    1   1    0    0   0     0   0\nRUTH         0   0    0    0    1    0    1    1   1    0    0   0     0   0\nVERNE        0   0    0    0    0    0    1    1   1    0    0   1     0   0\nMYRNA        0   0    0    0    0    0    0    1   1    1    0   1     0   0\nKATHERINE    0   0    0    0    0    0    0    1   1    1    0   1     1   1\nSYLVIA       0   0    0    0    0    0    1    1   1    1    0   1     1   1\nNORA         0   0    0    0    0    1    1    0   1    1    1   1     1   1\nHELEN        0   0    0    0    0    0    1    1   0    1    1   1     0   0\nDOROTHY      0   0    0    0    0    0    0    1   1    0    0   0     0   0\nOLIVIA       0   0    0    0    0    0    0    0   1    0    1   0     0   0\nFLORA        0   0    0    0    0    0    0    0   1    0    1   0     0   0\n```\n:::\n:::\n\n\nIn this matrix we list one set of nodes in the rows and the other set is in the columns. Each cell $a_{ij} = 1$ if row node $i$ is affiliated with column node $j$, otherwise $a_{ij} = 0$.\n\n## The Bipartite Adjacency Matrix\n\nNote that if we were to use the regular `as_adjacency_matrix` function on a bipartite graph, we get a curious version of the adjacency matrix:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   B <- as.matrix(as_adjacency_matrix(g))\n   B\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          EVELYN LAURA THERESA BRENDA CHARLOTTE FRANCES ELEANOR PEARL RUTH\nEVELYN         0     0       0      0         0       0       0     0    0\nLAURA          0     0       0      0         0       0       0     0    0\nTHERESA        0     0       0      0         0       0       0     0    0\nBRENDA         0     0       0      0         0       0       0     0    0\nCHARLOTTE      0     0       0      0         0       0       0     0    0\nFRANCES        0     0       0      0         0       0       0     0    0\nELEANOR        0     0       0      0         0       0       0     0    0\nPEARL          0     0       0      0         0       0       0     0    0\nRUTH           0     0       0      0         0       0       0     0    0\nVERNE          0     0       0      0         0       0       0     0    0\nMYRNA          0     0       0      0         0       0       0     0    0\nKATHERINE      0     0       0      0         0       0       0     0    0\nSYLVIA         0     0       0      0         0       0       0     0    0\nNORA           0     0       0      0         0       0       0     0    0\nHELEN          0     0       0      0         0       0       0     0    0\nDOROTHY        0     0       0      0         0       0       0     0    0\nOLIVIA         0     0       0      0         0       0       0     0    0\nFLORA          0     0       0      0         0       0       0     0    0\n6/27           1     1       0      1         0       0       0     0    0\n3/2            1     1       1      0         0       0       0     0    0\n4/12           1     1       1      1         1       1       0     0    0\n9/26           1     0       1      1         1       0       0     0    0\n2/25           1     1       1      1         1       1       1     0    1\n5/19           1     1       1      1         0       1       1     1    0\n3/15           0     1       1      1         1       0       1     0    1\n9/16           1     1       1      1         0       1       1     1    1\n4/8            1     0       1      0         0       0       0     1    1\n6/10           0     0       0      0         0       0       0     0    0\n2/23           0     0       0      0         0       0       0     0    0\n4/7            0     0       0      0         0       0       0     0    0\n11/21          0     0       0      0         0       0       0     0    0\n8/3            0     0       0      0         0       0       0     0    0\n          VERNE MYRNA KATHERINE SYLVIA NORA HELEN DOROTHY OLIVIA FLORA 6/27 3/2\nEVELYN        0     0         0      0    0     0       0      0     0    1   1\nLAURA         0     0         0      0    0     0       0      0     0    1   1\nTHERESA       0     0         0      0    0     0       0      0     0    0   1\nBRENDA        0     0         0      0    0     0       0      0     0    1   0\nCHARLOTTE     0     0         0      0    0     0       0      0     0    0   0\nFRANCES       0     0         0      0    0     0       0      0     0    0   0\nELEANOR       0     0         0      0    0     0       0      0     0    0   0\nPEARL         0     0         0      0    0     0       0      0     0    0   0\nRUTH          0     0         0      0    0     0       0      0     0    0   0\nVERNE         0     0         0      0    0     0       0      0     0    0   0\nMYRNA         0     0         0      0    0     0       0      0     0    0   0\nKATHERINE     0     0         0      0    0     0       0      0     0    0   0\nSYLVIA        0     0         0      0    0     0       0      0     0    0   0\nNORA          0     0         0      0    0     0       0      0     0    0   0\nHELEN         0     0         0      0    0     0       0      0     0    0   0\nDOROTHY       0     0         0      0    0     0       0      0     0    0   0\nOLIVIA        0     0         0      0    0     0       0      0     0    0   0\nFLORA         0     0         0      0    0     0       0      0     0    0   0\n6/27          0     0         0      0    0     0       0      0     0    0   0\n3/2           0     0         0      0    0     0       0      0     0    0   0\n4/12          0     0         0      0    0     0       0      0     0    0   0\n9/26          0     0         0      0    0     0       0      0     0    0   0\n2/25          0     0         0      0    0     0       0      0     0    0   0\n5/19          0     0         0      0    1     0       0      0     0    0   0\n3/15          1     0         0      1    1     1       0      0     0    0   0\n9/16          1     1         1      1    0     1       1      0     0    0   0\n4/8           1     1         1      1    1     0       1      1     1    0   0\n6/10          0     1         1      1    1     1       0      0     0    0   0\n2/23          0     0         0      0    1     1       0      1     1    0   0\n4/7           1     1         1      1    1     1       0      0     0    0   0\n11/21         0     0         1      1    1     0       0      0     0    0   0\n8/3           0     0         1      1    1     0       0      0     0    0   0\n          4/12 9/26 2/25 5/19 3/15 9/16 4/8 6/10 2/23 4/7 11/21 8/3\nEVELYN       1    1    1    1    0    1   1    0    0   0     0   0\nLAURA        1    0    1    1    1    1   0    0    0   0     0   0\nTHERESA      1    1    1    1    1    1   1    0    0   0     0   0\nBRENDA       1    1    1    1    1    1   0    0    0   0     0   0\nCHARLOTTE    1    1    1    0    1    0   0    0    0   0     0   0\nFRANCES      1    0    1    1    0    1   0    0    0   0     0   0\nELEANOR      0    0    1    1    1    1   0    0    0   0     0   0\nPEARL        0    0    0    1    0    1   1    0    0   0     0   0\nRUTH         0    0    1    0    1    1   1    0    0   0     0   0\nVERNE        0    0    0    0    1    1   1    0    0   1     0   0\nMYRNA        0    0    0    0    0    1   1    1    0   1     0   0\nKATHERINE    0    0    0    0    0    1   1    1    0   1     1   1\nSYLVIA       0    0    0    0    1    1   1    1    0   1     1   1\nNORA         0    0    0    1    1    0   1    1    1   1     1   1\nHELEN        0    0    0    0    1    1   0    1    1   1     0   0\nDOROTHY      0    0    0    0    0    1   1    0    0   0     0   0\nOLIVIA       0    0    0    0    0    0   1    0    1   0     0   0\nFLORA        0    0    0    0    0    0   1    0    1   0     0   0\n6/27         0    0    0    0    0    0   0    0    0   0     0   0\n3/2          0    0    0    0    0    0   0    0    0   0     0   0\n4/12         0    0    0    0    0    0   0    0    0   0     0   0\n9/26         0    0    0    0    0    0   0    0    0   0     0   0\n2/25         0    0    0    0    0    0   0    0    0   0     0   0\n5/19         0    0    0    0    0    0   0    0    0   0     0   0\n3/15         0    0    0    0    0    0   0    0    0   0     0   0\n9/16         0    0    0    0    0    0   0    0    0   0     0   0\n4/8          0    0    0    0    0    0   0    0    0   0     0   0\n6/10         0    0    0    0    0    0   0    0    0   0     0   0\n2/23         0    0    0    0    0    0   0    0    0   0     0   0\n4/7          0    0    0    0    0    0   0    0    0   0     0   0\n11/21        0    0    0    0    0    0   0    0    0   0     0   0\n8/3          0    0    0    0    0    0   0    0    0   0     0   0\n```\n:::\n:::\n\n\nThis bipartite adjacency matrix $\\mathbf{B}$ is of dimensions $(M + N) \\times (M + N)$, which is $(18 + 14) \\times (18 + 14) = 32 \\times 32$ in the Southern Women data; it has the following block structure [@fouss_etal16, p. 12]:\n\n$$\n\\mathbf{B} = \\left[\n\\begin{matrix}\n\\mathbf{O}_{M \\times M} & \\mathbf{A}_{M \\times N} \\\\\n\\mathbf{A}^T_{N \\times M} & \\mathbf{O}_{N \\times N}\n\\end{matrix}\n\\right]\n$$\n\nWhere $\\mathbf{O}$ is just the all zeros matrix of the relevant dimensions, and $\\mathbf{A}$ is the bi-adjacency (affiliation) matrix as defined earlier. Thus, the bipartite adjacency matrix necessarily has two big diagonal \"zero blocks\" in it (upper-left and lower-right) corresponding to where the links between nodes in the same set would be (but necessarily aren't because this is a two-mode network). The non-zero blocks are just the affiliation matrix (upper-right) and its transpose(lower-left).\n\n## Bipartiteness as \"Anti-Community\"\n\nRecall from the [community lecture](community.qmd), that community structure is defined by clusters of nodes that have more connections among themselves than they do with outsiders. If you think about it, a bipartite graph has the *opposite* of this going on. Nodes of the same type have *zero* connections among themselves, and they have *all* their connections with nodes of the other group!\n\nSo that means that *bipartite structure* is the mirror image of *community structure* (in the two group case). This also means that if we were to compute the modularity of a bipartite graph, using the node type as the grouping variable we should get the theoretical minimum of this measure (which you may recall is $Q = -\\frac{1}{2}$).\n\nLet's try it out, by computing the modularity from the bipartite adjacency matrix of the Southern Women data, using node type as the grouping variable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   V(g)$comm <- as.numeric(bipartite_mapping(g)$type) + 1\n   modularity(g, V(g)$comm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -0.5\n```\n:::\n:::\n\n\nAnd indeed, we recover the theoretical minimum value of the modularity [@brandes07, p. 173]! This also means that this method can be used to test whether a graph is bipartite, or whether any network *approximates* bipartiteness [@newman06b, p. 13]. Values that are close to $-0.5$ would indicate that the network in question has bipartite structure. \n\n## Basic Two-Mode Network Statistics\n\nWe can calculate some basic network statistics from the affiliation (bi-adjacency) matrix. We have two number of nodes to calculate, but only one quantity for the number of edges.\n\nThe number of nodes on the people side $N$ is just the number of rows of $A$:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   nrow(A)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 18\n```\n:::\n:::\n\n\nAnd the number of events/groups $M$ is just the number of columns:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   ncol(A)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 14\n```\n:::\n:::\n\n\nFinally, the number of edges $E$ is just the sum of all the entries of $A$:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   sum(A)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 89\n```\n:::\n:::\n\n\nNote that if you were to use the `igraph` function `vcount` on the original graph object, you get the wrong answer:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   vcount(g)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 32\n```\n:::\n:::\n\n\nThat's because `vcount` is working with the $32 \\times 32$ regular adjacency matrix, not the bi-adjacency matrix. Here, `vcount` is returning the *total* number of nodes in the graph summing across the two sets, which is $M + N$. \n\nIf you wanted to get the right answer for each set of edges from the regular `igraph` graph object, you could use the `type` node attribute we defined earlier along with the `subgraph` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   vcount(subgraph(g, V(g)$type == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 18\n```\n:::\n:::\n\n\nWhich gives us the number of women. For the events we do the same thing:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   vcount(subgraph(g, V(g)$type == TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 14\n```\n:::\n:::\n\n\nHowever, because there's only one set of edges, `ecount` still gives us the right answer:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   ecount(g)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 89\n```\n:::\n:::\n\n\nWhich is the same as:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   sum(A)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 89\n```\n:::\n:::\n\n\n### Degree Statistics\n\nBecause we have two sets of degrees, all the basic degree statistics in the network double up. So we have two mean degrees, two maximum degrees, and two minimum degree to take care of:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   mean.d.p <- mean(rowSums(A))\n   mean.d.g <- mean(colSums(A))\n   max.d.p <- max(rowSums(A))\n   max.d.g <- max(colSums(A))\n   min.d.p <- min(rowSums(A))\n   min.d.g <- min(colSums(A))\n```\n:::\n\n\nSo we have:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   round(mean.d.p, 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4.9\n```\n:::\n\n```{.r .cell-code}\n   round(mean.d.g, 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6.4\n```\n:::\n\n```{.r .cell-code}\n   max.d.p\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n\n```{.r .cell-code}\n   max.d.g\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 14\n```\n:::\n\n```{.r .cell-code}\n   min.d.p\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\n   min.d.g\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\nHowever, note that because there's only one set of undirected edges, the total number of edges incident to each node in each of the two sets is always going to be the same.\n\nThat means that there's only one sum of degrees. So the sum of degrees for people:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   sum(rowSums(A))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 89\n```\n:::\n:::\n\n\nIs the same as the sum of degrees of events:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   sum(colSums(A))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 89\n```\n:::\n:::\n\n\nNote that in a bipartite graph, therefore, the sum of degrees of nodes in each node set is equal to the $|E|$, the number of edges in the graph!\n\n### Density\nAs we saw in the case of one-mode networks, one of the most basic network statistics that can be derived from the above quantities is the **density** (observed number of edges divided by maximum possible number of edges in the graph). \n\nIn a two-mode network, density is given by:\n\n$$\nd = \\frac{|E|}{N \\times M}\n$$\n\nWhere $|E|$ is the number of edges in the network. In our case we can compute the density as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   d <- sum(A)/(nrow(A) * ncol(A))\n   d\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.3531746\n```\n:::\n:::\n\n\n## Degree Centrality\nIn a two-mode network, there are two degree sets, each corresponding to one set of nodes. For the people, in this case, their degree (centrality) is just the number of events they attend, and for the groups, it's just the number of people that attend each event. \n\nAs we have already seen, we can get each from the affiliation matrix. The degree of the people are just the row sums:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   rowSums(A)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   EVELYN     LAURA   THERESA    BRENDA CHARLOTTE   FRANCES   ELEANOR     PEARL \n        8         7         8         7         4         4         4         3 \n     RUTH     VERNE     MYRNA KATHERINE    SYLVIA      NORA     HELEN   DOROTHY \n        4         4         4         6         7         8         5         2 \n   OLIVIA     FLORA \n        2         2 \n```\n:::\n:::\n\n\nAnd the degree of the events are just the column sums:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   colSums(A)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n 6/27   3/2  4/12  9/26  2/25  5/19  3/15  9/16   4/8  6/10  2/23   4/7 11/21 \n    3     3     6     4     8     8    10    14    12     5     4     6     3 \n  8/3 \n    3 \n```\n:::\n:::\n\n\nThe `igraph` function `degree` will also give us the right answer, but in the form of a single vector including both people and events:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   degree(g)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   EVELYN     LAURA   THERESA    BRENDA CHARLOTTE   FRANCES   ELEANOR     PEARL \n        8         7         8         7         4         4         4         3 \n     RUTH     VERNE     MYRNA KATHERINE    SYLVIA      NORA     HELEN   DOROTHY \n        4         4         4         6         7         8         5         2 \n   OLIVIA     FLORA      6/27       3/2      4/12      9/26      2/25      5/19 \n        2         2         3         3         6         4         8         8 \n     3/15      9/16       4/8      6/10      2/23       4/7     11/21       8/3 \n       10        14        12         5         4         6         3         3 \n```\n:::\n:::\n\n\nAs @borgatti_everett97 note, if we want *normalized* degree centrality measures, we need to divide by either $M$ (for people) or $N$ (for events). That is, for people we use the number of events as the norm (as this is the theoretical maximum) and for events the number of people.\n\nSo for people, normalized degree is:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   round(rowSums(A)/ncol(A), 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   EVELYN     LAURA   THERESA    BRENDA CHARLOTTE   FRANCES   ELEANOR     PEARL \n    0.571     0.500     0.571     0.500     0.286     0.286     0.286     0.214 \n     RUTH     VERNE     MYRNA KATHERINE    SYLVIA      NORA     HELEN   DOROTHY \n    0.286     0.286     0.286     0.429     0.500     0.571     0.357     0.143 \n   OLIVIA     FLORA \n    0.143     0.143 \n```\n:::\n:::\n\n\nAnd for events:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   round(colSums(A)/nrow(A), 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n 6/27   3/2  4/12  9/26  2/25  5/19  3/15  9/16   4/8  6/10  2/23   4/7 11/21 \n0.167 0.167 0.333 0.222 0.444 0.444 0.556 0.778 0.667 0.278 0.222 0.333 0.167 \n  8/3 \n0.167 \n```\n:::\n:::\n\n\nOr with `igraph`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   round(degree(g)/c(rep(14, 18), rep(18, 14)), 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   EVELYN     LAURA   THERESA    BRENDA CHARLOTTE   FRANCES   ELEANOR     PEARL \n    0.571     0.500     0.571     0.500     0.286     0.286     0.286     0.214 \n     RUTH     VERNE     MYRNA KATHERINE    SYLVIA      NORA     HELEN   DOROTHY \n    0.286     0.286     0.286     0.429     0.500     0.571     0.357     0.143 \n   OLIVIA     FLORA      6/27       3/2      4/12      9/26      2/25      5/19 \n    0.143     0.143     0.167     0.167     0.333     0.222     0.444     0.444 \n     3/15      9/16       4/8      6/10      2/23       4/7     11/21       8/3 \n    0.556     0.778     0.667     0.278     0.222     0.333     0.167     0.167 \n```\n:::\n:::\n\n\n\n## Geodesic Distances\n\nGeodesic distances work a bit different in two-mode networks because of the only between-node-sets edges restriction. \n\nFor instance, the minimum geodesic distance $g_{ii'}$ between two people is two (a person cannot be adjacent to another person), but it is one between a person and a group (if the person is a member of the group). \n\nIn the same way, a group $g$ cannot be at geodesic distance less than three from a person $p*$ who is not a member, because the shortest path is $g-p-g^*-p^*$. \n\nThat is, there has to be some other group $g^*$ shared between a member $p$ of the focal group $g$ and another person $p^*$ for the shortest path between $g$ and the non-member $p^*$ to exist, and that involves three links at minimum: $g-p$, $p-g^*$, and $g^*-p^*$. This means that the links in paths in two-mode networks always alternate between persons and group nodes.\n\nBeyond that geodesic distances work the same way. In `igraph` when we use the `distances` function on a bipartite graph, we get:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   D.pg <- distances(g)\n   head(D.pg)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          EVELYN LAURA THERESA BRENDA CHARLOTTE FRANCES ELEANOR PEARL RUTH\nEVELYN         0     2       2      2         2       2       2     2    2\nLAURA          2     0       2      2         2       2       2     2    2\nTHERESA        2     2       0      2         2       2       2     2    2\nBRENDA         2     2       2      0         2       2       2     2    2\nCHARLOTTE      2     2       2      2         0       2       2     4    2\nFRANCES        2     2       2      2         2       0       2     2    2\n          VERNE MYRNA KATHERINE SYLVIA NORA HELEN DOROTHY OLIVIA FLORA 6/27 3/2\nEVELYN        2     2         2      2    2     2       2      2     2    1   1\nLAURA         2     2         2      2    2     2       2      4     4    1   1\nTHERESA       2     2         2      2    2     2       2      2     2    3   1\nBRENDA        2     2         2      2    2     2       2      4     4    1   3\nCHARLOTTE     2     4         4      2    2     2       4      4     4    3   3\nFRANCES       2     2         2      2    2     2       2      4     4    3   3\n          4/12 9/26 2/25 5/19 3/15 9/16 4/8 6/10 2/23 4/7 11/21 8/3\nEVELYN       1    1    1    1    3    1   1    3    3   3     3   3\nLAURA        1    3    1    1    1    1   3    3    3   3     3   3\nTHERESA      1    1    1    1    1    1   1    3    3   3     3   3\nBRENDA       1    1    1    1    1    1   3    3    3   3     3   3\nCHARLOTTE    1    1    1    3    1    3   3    3    3   3     3   3\nFRANCES      1    3    1    1    3    1   3    3    3   3     3   3\n```\n:::\n\n```{.r .cell-code}\n   tail(D.pg)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      EVELYN LAURA THERESA BRENDA CHARLOTTE FRANCES ELEANOR PEARL RUTH VERNE\n4/8        1     3       1      3         3       3       3     1    1     1\n6/10       3     3       3      3         3       3       3     3    3     3\n2/23       3     3       3      3         3       3       3     3    3     3\n4/7        3     3       3      3         3       3       3     3    3     1\n11/21      3     3       3      3         3       3       3     3    3     3\n8/3        3     3       3      3         3       3       3     3    3     3\n      MYRNA KATHERINE SYLVIA NORA HELEN DOROTHY OLIVIA FLORA 6/27 3/2 4/12 9/26\n4/8       1         1      1    1     3       1      1     1    2   2    2    2\n6/10      1         1      1    1     1       3      3     3    4   4    4    4\n2/23      3         3      3    1     1       3      1     1    4   4    4    4\n4/7       1         1      1    1     1       3      3     3    4   4    4    4\n11/21     3         1      1    1     3       3      3     3    4   4    4    4\n8/3       3         1      1    1     3       3      3     3    4   4    4    4\n      2/25 5/19 3/15 9/16 4/8 6/10 2/23 4/7 11/21 8/3\n4/8      2    2    2    2   0    2    2   2     2   2\n6/10     4    2    2    2   2    0    2   2     2   2\n2/23     4    2    2    2   2    2    0   2     2   2\n4/7      4    2    2    2   2    2    2   0     2   2\n11/21    4    2    2    2   2    2    2   2     0   2\n8/3      4    2    2    2   2    2    2   2     2   0\n```\n:::\n:::\n\n\nWhich is a square matrix of dimensions $(M + N) \\times (M + N)$; that's $(18 + 14) \\times (18 + 14) = 32 \\times 32$ in our case. \n\nWe can check in `R`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   dim(D.pg)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 32 32\n```\n:::\n:::\n\n\nAs we can see in the distance matrix, distances between nodes in the same set are even $g_{ii'|jj'} = \\{2, 4, \\ldots\\}$ but distances in nodes in different sets are odd $g_{ij|ji} = \\{1, 3, \\ldots\\}$. Beyond this hiccup, distances can be interpreted in the same way as one-mode networks.\n\n## Closeness Centrality in two-mode Networks\n\nThis means that (unnormalized) closeness centrality works the same way as it does in regular networks:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   round(closeness(g), 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   EVELYN     LAURA   THERESA    BRENDA CHARLOTTE   FRANCES   ELEANOR     PEARL \n    0.017     0.015     0.017     0.015     0.013     0.014     0.014     0.014 \n     RUTH     VERNE     MYRNA KATHERINE    SYLVIA      NORA     HELEN   DOROTHY \n    0.015     0.015     0.014     0.015     0.016     0.017     0.015     0.014 \n   OLIVIA     FLORA      6/27       3/2      4/12      9/26      2/25      5/19 \n    0.012     0.012     0.012     0.012     0.013     0.012     0.014     0.016 \n     3/15      9/16       4/8      6/10      2/23       4/7     11/21       8/3 \n    0.017     0.019     0.018     0.013     0.012     0.013     0.012     0.012 \n```\n:::\n:::\n\n\nWhich is just the inverse of the sums of the distances matrix for people and groups counting their geodesic distances to nodes of both sets. \n\nHowever, as @borgatti_everett97 note, if we want *normalized* closeness centralities, we can't use the off-the-shelf normalization for one-mode networks in `igraph` ($n-1$) as it will give us non-sense results because now we have two sets of nodes.\n\nInstead, we need to normalize the closeness score for each node set by its theoretical maximum for each node set. \n\nFor people, this is:\n\n$$\nN + 2(M - 1)\n$$\n\nAnd for groups/events this same quantity is:\n\n$$\nM + 2(N - 1)\n$$\n\nThe basic idea is that nodes can be at minimum geodesic distance $g = 1$ from nodes of the other set (for people, groups; for groups, people) and at minimum distance $g = 2$ from nodes of their own set, with their own presence eliminated by subtraction [@borgatti_everett97]. \n\nIn our case, we create a normalization vector with these quantities of length $M + N$:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   M <- nrow(A)\n   N <- ncol(A)\n   n.p <- N + 2 * (M - 1)\n   n.e <- M + 2 * (N - 1)\n   norm.vec <- c(rep(n.p, M), rep(n.e, N))\n```\n:::\n\n\nAnd normalized closeness is:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   round(norm.vec/rowSums(D.pg), 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   EVELYN     LAURA   THERESA    BRENDA CHARLOTTE   FRANCES   ELEANOR     PEARL \n    0.800     0.727     0.800     0.727     0.600     0.667     0.667     0.667 \n     RUTH     VERNE     MYRNA KATHERINE    SYLVIA      NORA     HELEN   DOROTHY \n    0.706     0.706     0.686     0.727     0.774     0.800     0.727     0.649 \n   OLIVIA     FLORA      6/27       3/2      4/12      9/26      2/25      5/19 \n    0.585     0.585     0.524     0.524     0.564     0.537     0.595     0.688 \n     3/15      9/16       4/8      6/10      2/23       4/7     11/21       8/3 \n    0.733     0.846     0.786     0.550     0.537     0.564     0.524     0.524 \n```\n:::\n:::\n\n\nWhich are the same numbers in @borgatti_everett97 [table 1, column 6].\n\n## Betweenness Centrality in two-mode Networks\n\nAs @borgatti_everett97 also note, the normalizations for betweenness centrality in the two-mode case are a bit more involved. This is because they depend on which node set is larger than the other. \n\nFor the larger node set, which in our case is the people, the normalization is:\n\n$$\n2(M-1)(N-1)\n$$\n\nFor the smaller node set, which in our case is the groups/events, the normalization is:\n\n$$\n\\frac{1}{2}(N)(N-1)+\\frac{1}{2}(M-1)(M-2)+(M-1)(N-1)\n$$\n\nRemember that you have to switch this around if you are analyzing a network with more groups than people. \n\nCreating the relevant vectors:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   n.p <- 2*(M-1)*(N-1)\n   n.e <- (1/2)*(N*(N-1))+(1/2)*(M-1)*(M-2)+(M-1)*(N-1)\n   norm.vec <- c(rep(n.p, M), rep(n.e, N))\n```\n:::\n\n\nAnd normalized betweenness is:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   round(betweenness(g)/norm.vec, 4)*100\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   EVELYN     LAURA   THERESA    BRENDA CHARLOTTE   FRANCES   ELEANOR     PEARL \n     9.72      5.17      8.82      4.98      1.07      1.08      0.95      0.68 \n     RUTH     VERNE     MYRNA KATHERINE    SYLVIA      NORA     HELEN   DOROTHY \n     1.69      1.58      1.65      4.77      7.22     11.42      4.27      0.20 \n   OLIVIA     FLORA      6/27       3/2      4/12      9/26      2/25      5/19 \n     0.51      0.51      0.22      0.21      1.84      0.78      3.80      6.56 \n     3/15      9/16       4/8      6/10      2/23       4/7     11/21       8/3 \n    13.07     24.60     22.75      1.15      1.98      1.83      0.23      0.23 \n```\n:::\n:::\n\n\nWhich are (with some slight differences and rounding errors) the same numbers in @borgatti_everett97 [table 2, column 3].\n\n## The Duality of Persons and Groups\n\nRemember that in the one-mode case, multiplying the adjacency matrix times its transpose yields the **common neighbors matrix** $\\mathbf{M}$:\n\n$$\n\\mathbf{M} = \\mathbf{A}\\mathbf{A}^T\n$$\n\nAs famously noted by @breiger74, doing the same for the affiliation matrix of a two-mode network also returns the common-neighbors matrix, but because objects in one mode can only connect to objects in another mode, this also reveals the **duality of persons and groups**: The connections between people are made up of the groups they share, and the connections between groups are revealed by the groups they share.\n\nThus, computing the common neighbors matrix for both persons and groups (also called the **projection** of the two-mode network into each of its modes) produces a one-mode similarity matrix between people and groups, where the similarities are defined by the number of objects in the other mode that they share. \n\nSo for the people the relevant projection is:\n\n$$\n\\mathbf{P} = \\mathbf{A}\\mathbf{A}^T\n$$\n\nAnd for the groups:\n\n$$\n\\mathbf{G} = \\mathbf{A}^T\\mathbf{A}\n$$\n\nWhich in our case yields:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   P <- A %*% t(A)\n   P\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          EVELYN LAURA THERESA BRENDA CHARLOTTE FRANCES ELEANOR PEARL RUTH\nEVELYN         8     6       7      6         3       4       3     3    3\nLAURA          6     7       6      6         3       4       4     2    3\nTHERESA        7     6       8      6         4       4       4     3    4\nBRENDA         6     6       6      7         4       4       4     2    3\nCHARLOTTE      3     3       4      4         4       2       2     0    2\nFRANCES        4     4       4      4         2       4       3     2    2\nELEANOR        3     4       4      4         2       3       4     2    3\nPEARL          3     2       3      2         0       2       2     3    2\nRUTH           3     3       4      3         2       2       3     2    4\nVERNE          2     2       3      2         1       1       2     2    3\nMYRNA          2     1       2      1         0       1       1     2    2\nKATHERINE      2     1       2      1         0       1       1     2    2\nSYLVIA         2     2       3      2         1       1       2     2    3\nNORA           2     2       3      2         1       1       2     2    2\nHELEN          1     2       2      2         1       1       2     1    2\nDOROTHY        2     1       2      1         0       1       1     2    2\nOLIVIA         1     0       1      0         0       0       0     1    1\nFLORA          1     0       1      0         0       0       0     1    1\n          VERNE MYRNA KATHERINE SYLVIA NORA HELEN DOROTHY OLIVIA FLORA\nEVELYN        2     2         2      2    2     1       2      1     1\nLAURA         2     1         1      2    2     2       1      0     0\nTHERESA       3     2         2      3    3     2       2      1     1\nBRENDA        2     1         1      2    2     2       1      0     0\nCHARLOTTE     1     0         0      1    1     1       0      0     0\nFRANCES       1     1         1      1    1     1       1      0     0\nELEANOR       2     1         1      2    2     2       1      0     0\nPEARL         2     2         2      2    2     1       2      1     1\nRUTH          3     2         2      3    2     2       2      1     1\nVERNE         4     3         3      4    3     3       2      1     1\nMYRNA         3     4         4      4    3     3       2      1     1\nKATHERINE     3     4         6      6    5     3       2      1     1\nSYLVIA        4     4         6      7    6     4       2      1     1\nNORA          3     3         5      6    8     4       1      2     2\nHELEN         3     3         3      4    4     5       1      1     1\nDOROTHY       2     2         2      2    1     1       2      1     1\nOLIVIA        1     1         1      1    2     1       1      2     2\nFLORA         1     1         1      1    2     1       1      2     2\n```\n:::\n\n```{.r .cell-code}\n   G <- t(A) %*% A\n   G\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      6/27 3/2 4/12 9/26 2/25 5/19 3/15 9/16 4/8 6/10 2/23 4/7 11/21 8/3\n6/27     3   2    3    2    3    3    2    3   1    0    0   0     0   0\n3/2      2   3    3    2    3    3    2    3   2    0    0   0     0   0\n4/12     3   3    6    4    6    5    4    5   2    0    0   0     0   0\n9/26     2   2    4    4    4    3    3    3   2    0    0   0     0   0\n2/25     3   3    6    4    8    6    6    7   3    0    0   0     0   0\n5/19     3   3    5    3    6    8    5    7   4    1    1   1     1   1\n3/15     2   2    4    3    6    5   10    8   5    3    2   4     2   2\n9/16     3   3    5    3    7    7    8   14   9    4    1   5     2   2\n4/8      1   2    2    2    3    4    5    9  12    4    3   5     3   3\n6/10     0   0    0    0    0    1    3    4   4    5    2   5     3   3\n2/23     0   0    0    0    0    1    2    1   3    2    4   2     1   1\n4/7      0   0    0    0    0    1    4    5   5    5    2   6     3   3\n11/21    0   0    0    0    0    1    2    2   3    3    1   3     3   3\n8/3      0   0    0    0    0    1    2    2   3    3    1   3     3   3\n```\n:::\n:::\n\n\nThe off-diagonal entries of these square person by person (group by group) matrices is the number of groups (people) shared by each person (group) and the diagonals are the number of memberships of each person (the size of each group/event).\n\nIn `igraph` the  relevant function is called `bipartite_projection`. It takes a graph as an input and returns a list containing `igraph` graph objects of both projections by default:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   Proj <- bipartite_projection(g)\n   G.p <- Proj[[1]]\n   G.g <- Proj[[2]]\n```\n:::\n\n\nIn the graph objects produced by the `bipartite_projection` function, the actual shared memberships and shared members are stored as an *attribute* of each edge called `weight` used in the plotting code above to set the `edge.width`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   edge_attr(G.p)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$weight\n  [1] 6 6 7 3 4 3 3 3 2 2 2 2 2 1 2 1 1 6 6 3 4 4 3 2 2 2 2 2 1 1 1 6 4 4 4 4 3\n [38] 3 3 3 2 2 2 2 1 1 4 4 4 3 2 2 2 2 2 1 1 1 2 2 2 1 1 1 1 3 2 2 1 1 1 1 1 1\n [75] 1 3 2 2 2 2 2 1 1 1 2 2 2 2 2 2 1 2 1 1 3 3 2 2 2 2 2 1 1 4 3 3 3 3 2 1 1\n[112] 4 4 3 2 3 1 1 6 3 2 5 1 1 6 4 2 1 1 4 1 2 2 1 1 1 1 1 2\n```\n:::\n\n```{.r .cell-code}\n   edge_attr(G.g)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$weight\n [1] 2 3 2 3 3 3 1 2 3 2 3 3 3 2 2 4 6 5 5 2 4 4 3 3 2 3 6 7 3 6 7 4 5 1 1 1 1 1\n[39] 8 5 4 3 2 2 2 9 5 4 2 2 1 5 4 3 3 3 5 3 3 2 2 1 1 3 3 3\n```\n:::\n:::\n\n\nSo to get the weighted projection matrix, we need to type:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   as.matrix(as_adjacency_matrix(G.p, attr = \"weight\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          EVELYN LAURA THERESA BRENDA CHARLOTTE FRANCES ELEANOR PEARL RUTH\nEVELYN         0     6       7      6         3       4       3     3    3\nLAURA          6     0       6      6         3       4       4     2    3\nTHERESA        7     6       0      6         4       4       4     3    4\nBRENDA         6     6       6      0         4       4       4     2    3\nCHARLOTTE      3     3       4      4         0       2       2     0    2\nFRANCES        4     4       4      4         2       0       3     2    2\nELEANOR        3     4       4      4         2       3       0     2    3\nPEARL          3     2       3      2         0       2       2     0    2\nRUTH           3     3       4      3         2       2       3     2    0\nVERNE          2     2       3      2         1       1       2     2    3\nMYRNA          2     1       2      1         0       1       1     2    2\nKATHERINE      2     1       2      1         0       1       1     2    2\nSYLVIA         2     2       3      2         1       1       2     2    3\nNORA           2     2       3      2         1       1       2     2    2\nHELEN          1     2       2      2         1       1       2     1    2\nDOROTHY        2     1       2      1         0       1       1     2    2\nOLIVIA         1     0       1      0         0       0       0     1    1\nFLORA          1     0       1      0         0       0       0     1    1\n          VERNE MYRNA KATHERINE SYLVIA NORA HELEN DOROTHY OLIVIA FLORA\nEVELYN        2     2         2      2    2     1       2      1     1\nLAURA         2     1         1      2    2     2       1      0     0\nTHERESA       3     2         2      3    3     2       2      1     1\nBRENDA        2     1         1      2    2     2       1      0     0\nCHARLOTTE     1     0         0      1    1     1       0      0     0\nFRANCES       1     1         1      1    1     1       1      0     0\nELEANOR       2     1         1      2    2     2       1      0     0\nPEARL         2     2         2      2    2     1       2      1     1\nRUTH          3     2         2      3    2     2       2      1     1\nVERNE         0     3         3      4    3     3       2      1     1\nMYRNA         3     0         4      4    3     3       2      1     1\nKATHERINE     3     4         0      6    5     3       2      1     1\nSYLVIA        4     4         6      0    6     4       2      1     1\nNORA          3     3         5      6    0     4       1      2     2\nHELEN         3     3         3      4    4     0       1      1     1\nDOROTHY       2     2         2      2    1     1       0      1     1\nOLIVIA        1     1         1      1    2     1       1      0     2\nFLORA         1     1         1      1    2     1       1      2     0\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n   as.matrix(as_adjacency_matrix(G.g, attr = \"weight\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      6/27 3/2 4/12 9/26 2/25 5/19 3/15 9/16 4/8 6/10 2/23 4/7 11/21 8/3\n6/27     0   2    3    2    3    3    2    3   1    0    0   0     0   0\n3/2      2   0    3    2    3    3    2    3   2    0    0   0     0   0\n4/12     3   3    0    4    6    5    4    5   2    0    0   0     0   0\n9/26     2   2    4    0    4    3    3    3   2    0    0   0     0   0\n2/25     3   3    6    4    0    6    6    7   3    0    0   0     0   0\n5/19     3   3    5    3    6    0    5    7   4    1    1   1     1   1\n3/15     2   2    4    3    6    5    0    8   5    3    2   4     2   2\n9/16     3   3    5    3    7    7    8    0   9    4    1   5     2   2\n4/8      1   2    2    2    3    4    5    9   0    4    3   5     3   3\n6/10     0   0    0    0    0    1    3    4   4    0    2   5     3   3\n2/23     0   0    0    0    0    1    2    1   3    2    0   2     1   1\n4/7      0   0    0    0    0    1    4    5   5    5    2   0     3   3\n11/21    0   0    0    0    0    1    2    2   3    3    1   3     0   3\n8/3      0   0    0    0    0    1    2    2   3    3    1   3     3   0\n```\n:::\n:::\n\n\nWe can also use the weights to draw a weighted graph network plot of people and group projections. All we have to do is set the `edge.with` argument to the value of the edge weight attribute in the corresponding graph:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   set.seed(123)\n   plot(G.p, \n     vertex.size=8, vertex.frame.color=\"lightgray\", \n     vertex.label.dist=2, edge.curved=0.2, \n     vertex.label.cex = 1.25, edge.color = \"lightgray\",\n     edge.width = E(G.p)$weight)\n```\n\n::: {.cell-output-display}\n![One mode projection of people.](two-mode_files/figure-html/unnamed-chunk-42-1.png){width=1152}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n   set.seed(123)\n   plot(G.g, \n     vertex.size=8, vertex.frame.color=\"lightgray\", \n     vertex.label.dist=2, edge.curved=0.2, \n     vertex.label.cex = 1.25, edge.color = \"lightgray\",\n     edge.width = E(G.g)$weight)\n```\n\n::: {.cell-output-display}\n![One mode projection of groups](two-mode_files/figure-html/unnamed-chunk-43-1.png){width=1152}\n:::\n:::\n\n\nNote that because both `G.p` and `G.g` are **weighted graphs** we can calculate the weighted version of degree for both persons and groups from them (sometimes called the **vertex strength**).\n\nIn `igraph` we can do this using the `strength` function, which takes a weighted graph object as input:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   strength(G.p)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   EVELYN     LAURA   THERESA    BRENDA CHARLOTTE   FRANCES   ELEANOR     PEARL \n       50        45        57        46        24        32        36        31 \n     RUTH     VERNE     MYRNA KATHERINE    SYLVIA      NORA     HELEN   DOROTHY \n       40        38        33        37        46        43        34        24 \n   OLIVIA     FLORA \n       14        14 \n```\n:::\n\n```{.r .cell-code}\n   strength(G.g)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n 6/27   3/2  4/12  9/26  2/25  5/19  3/15  9/16   4/8  6/10  2/23   4/7 11/21 \n   19    20    32    23    38    41    48    59    46    25    13    28    18 \n  8/3 \n   18 \n```\n:::\n:::\n\n\nInterestingly, as noted by @faust97 [p. 167], there is a (dual!) mathematical connection between the strength of each vertex in the weighted projection and the centrality of the nodes from the other set they are connected to:\n\n1. For people, the vertex strength is equal to the sum of the sizes of the groups they belong to minus their own degree.\n\n1. For groups, the vertex strength is equal to the sum of the memberships of the people that belong to them, minus their own size.\n\nWe can verify this relationship for $EVELYN$:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   sum.size.evelyn <- sum(A[\"EVELYN\", ] * degree(g)[which(V(g)$type == TRUE)]) #sum of the sizes of the groups Evelyn belongs to\n   sum.size.evelyn - degree(g)[which(V(g)$name == \"EVELYN\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEVELYN \n    50 \n```\n:::\n:::\n\n\nWhich is indeed Evelyn's vertex strength. \n\nDually, the same relation applies to groups:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   sum.mem.6.27 <- sum(A[, \"6/27\"] * degree(g)[which(V(g)$type == FALSE)]) #sum of the memberships of people in the first group\n   sum.mem.6.27 - degree(g)[which(V(g)$name == \"6/27\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n6/27 \n  19 \n```\n:::\n:::\n\n\nWhich is indeed the vertex strength of the event held on 6/27.\n\n## Normalized Vertex Similarity Metrics\n\nNote that the one-mode projections are unnormalized similarity matrices just like in the case of regular networks. That means that if we have the degrees of nodes in each mode, we can transform this matrix into any of the **normalized vertex similarity** metrics we discussed before, including Jaccard, Cosine, Dice, LHN, and so on. \n\nThus repackaging our vertex similarity function for the two-mode case, we have:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   vertex.sim <- function(x) {\n      A <- as.matrix(as_biadjacency_matrix(x))\n      M <- nrow(A) #number of persons\n      N <- ncol(A) #number of groups\n      p.d <- rowSums(A) #person degrees\n      g.d <- colSums(A) #group degrees\n      P <- A %*% t(A) #person projection\n      G <- t(A) %*% A #group projection\n      J.p <- diag(1, M, M)\n      J.g <- diag(1, N, N)\n      C.p <- diag(1, M, M)\n      C.g <- diag(1, N, N)\n      D.p <- diag(1, M, M)\n      D.g <- diag(1, N, N)\n      L.p <- diag(1, M, M)\n      L.g <- diag(1, N, N)\n      for (i in 1:M) {\n         for (j in 1:M) {\n            if (i < j) {\n               J.p[i,j] <- P[i,j]/(P[i,j] + p.d[i] + p.d[j])\n               J.p[j,i] <- P[i,j]/(P[i,j] + p.d[i] + p.d[j])\n               C.p[i,j] <- P[i,j]/(sqrt(p.d[i] * p.d[j]))\n               C.p[j,i] <- P[i,j]/(sqrt(p.d[i] * p.d[j]))\n               D.p[i,j] <- (2*P[i,j])/(2*P[i,j] + p.d[i] + p.d[j])\n               D.p[j,i] <- (2*P[i,j])/(2*P[i,j] + p.d[i] + p.d[j])\n               L.p[i,j] <- P[i,j]/(p.d[i] * p.d[j])\n               L.p[j,i] <- P[i,j]/(p.d[i] * p.d[j])\n               }\n            }\n         }\n      for (i in 1:N) {\n         for (j in 1:N) {\n            if (i < j) {\n               J.g[i,j] <- G[i,j]/(G[i,j] + g.d[i] + g.d[j])\n               J.g[j,i] <- G[i,j]/(G[i,j] + g.d[i] + g.d[j])\n               C.g[i,j] <- G[i,j]/(sqrt(g.d[i] * g.d[j]))\n               C.g[j,i] <- G[i,j]/(sqrt(g.d[i] * g.d[j]))\n               D.g[i,j] <- (2*G[i,j])/(2*G[i,j] + g.d[i] + g.d[j])\n               D.g[j,i] <- (2*G[i,j])/(2*G[i,j] + g.d[i] + g.d[j])\n               L.g[i,j] <- G[i,j]/(g.d[i] * g.d[j])\n               L.g[j,i] <- G[i,j]/(g.d[i] * g.d[j])\n               }\n            }\n         }\n      return(list(J.p = J.p, C.p = C.p, D.p = D.p, L.p = L.p,\n                  J.g = J.g, C.g = C.g, D.g = D.g, L.g = L.g))\n      }\n```\n:::\n\n\nUsing this function to compute the Jaccard similarity between people yields:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   J.p <- vertex.sim(g)$J.p\n   rownames(J.p) <- rownames(A)\n   colnames(J.p) <- rownames(A)\n   round(J.p, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          EVELYN LAURA THERESA BRENDA CHARLOTTE FRANCES ELEANOR PEARL RUTH\nEVELYN      1.00  0.29    0.30   0.29      0.20    0.25    0.20  0.21 0.20\nLAURA       0.29  1.00    0.29   0.30      0.21    0.27    0.27  0.17 0.21\nTHERESA     0.30  0.29    1.00   0.29      0.25    0.25    0.25  0.21 0.25\nBRENDA      0.29  0.30    0.29   1.00      0.27    0.27    0.27  0.17 0.21\nCHARLOTTE   0.20  0.21    0.25   0.27      1.00    0.20    0.20  0.00 0.20\nFRANCES     0.25  0.27    0.25   0.27      0.20    1.00    0.27  0.22 0.20\nELEANOR     0.20  0.27    0.25   0.27      0.20    0.27    1.00  0.22 0.27\nPEARL       0.21  0.17    0.21   0.17      0.00    0.22    0.22  1.00 0.22\nRUTH        0.20  0.21    0.25   0.21      0.20    0.20    0.27  0.22 1.00\nVERNE       0.14  0.15    0.20   0.15      0.11    0.11    0.20  0.22 0.27\nMYRNA       0.14  0.08    0.14   0.08      0.00    0.11    0.11  0.22 0.20\nKATHERINE   0.12  0.07    0.12   0.07      0.00    0.09    0.09  0.18 0.17\nSYLVIA      0.12  0.12    0.17   0.12      0.08    0.08    0.15  0.17 0.21\nNORA        0.11  0.12    0.16   0.12      0.08    0.08    0.14  0.15 0.14\nHELEN       0.07  0.14    0.13   0.14      0.10    0.10    0.18  0.11 0.18\nDOROTHY     0.17  0.10    0.17   0.10      0.00    0.14    0.14  0.29 0.25\nOLIVIA      0.09  0.00    0.09   0.00      0.00    0.00    0.00  0.17 0.14\nFLORA       0.09  0.00    0.09   0.00      0.00    0.00    0.00  0.17 0.14\n          VERNE MYRNA KATHERINE SYLVIA NORA HELEN DOROTHY OLIVIA FLORA\nEVELYN     0.14  0.14      0.12   0.12 0.11  0.07    0.17   0.09  0.09\nLAURA      0.15  0.08      0.07   0.12 0.12  0.14    0.10   0.00  0.00\nTHERESA    0.20  0.14      0.12   0.17 0.16  0.13    0.17   0.09  0.09\nBRENDA     0.15  0.08      0.07   0.12 0.12  0.14    0.10   0.00  0.00\nCHARLOTTE  0.11  0.00      0.00   0.08 0.08  0.10    0.00   0.00  0.00\nFRANCES    0.11  0.11      0.09   0.08 0.08  0.10    0.14   0.00  0.00\nELEANOR    0.20  0.11      0.09   0.15 0.14  0.18    0.14   0.00  0.00\nPEARL      0.22  0.22      0.18   0.17 0.15  0.11    0.29   0.17  0.17\nRUTH       0.27  0.20      0.17   0.21 0.14  0.18    0.25   0.14  0.14\nVERNE      1.00  0.27      0.23   0.27 0.20  0.25    0.25   0.14  0.14\nMYRNA      0.27  1.00      0.29   0.27 0.20  0.25    0.25   0.14  0.14\nKATHERINE  0.23  0.29      1.00   0.32 0.26  0.21    0.20   0.11  0.11\nSYLVIA     0.27  0.27      0.32   1.00 0.29  0.25    0.18   0.10  0.10\nNORA       0.20  0.20      0.26   0.29 1.00  0.24    0.09   0.17  0.17\nHELEN      0.25  0.25      0.21   0.25 0.24  1.00    0.12   0.12  0.12\nDOROTHY    0.25  0.25      0.20   0.18 0.09  0.12    1.00   0.20  0.20\nOLIVIA     0.14  0.14      0.11   0.10 0.17  0.12    0.20   1.00  0.33\nFLORA      0.14  0.14      0.11   0.10 0.17  0.12    0.20   0.33  1.00\n```\n:::\n:::\n\n\n## Structural Equivalence\n\nAnd, of course, once we have a similarity we can cluster nodes based on approximate structural equivalence by transforming proximities to distances:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   D <- as.dist(1- J.p)\n   hc.p <- hclust(D, method = \"ward.D2\")\n   plot(hc.p)\n```\n\n::: {.cell-output-display}\n![](two-mode_files/figure-html/unnamed-chunk-49-1.png){width=672}\n:::\n:::\n\n\nAnd for events:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   J.g <- vertex.sim(g)$J.g\n   rownames(J.g) <- colnames(A)\n   colnames(J.g) <- colnames(A)\n   D <- as.dist(1- J.g)\n   hc.g <- hclust(D, method = \"ward.D2\")\n   plot(hc.g)\n```\n\n::: {.cell-output-display}\n![](two-mode_files/figure-html/unnamed-chunk-50-1.png){width=672}\n:::\n:::\n\n\nWe can then derive cluster memberships for people and groups from the `hclust` object:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   library(dendextend)\n   clus.p <- sort(cutree(hc.p, 4)) #selecting four clusters for people\n   clus.p\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   EVELYN     LAURA   THERESA    BRENDA CHARLOTTE   FRANCES   ELEANOR     PEARL \n        1         1         1         1         1         1         1         2 \n     RUTH     VERNE   DOROTHY     MYRNA KATHERINE    SYLVIA      NORA     HELEN \n        2         2         2         3         3         3         3         3 \n   OLIVIA     FLORA \n        4         4 \n```\n:::\n\n```{.r .cell-code}\n   clus.g <- sort(cutree(hc.g, 3)) #selecting three clusters for groups\n   clus.g\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n 6/27   3/2  4/12  9/26  2/25  5/19  3/15  9/16   4/8  6/10  2/23   4/7 11/21 \n    1     1     1     1     1     1     2     2     2     3     3     3     3 \n  8/3 \n    3 \n```\n:::\n:::\n\n\nAnd finally we can block the original affiliation matrix, as recommended by @everett_borgatti13 [p. 210, table 5]:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   library(ggcorrplot)\n   p <- ggcorrplot(t(A[names(clus.p), names(clus.g)]), \n                   colors = c(\"white\", \"white\", \"red\")) \n   p <- p + theme(legend.position = \"none\", \n                  axis.text.y = element_text(size = 8),\n                  axis.text.x = element_text(size = 8, angle = 0),\n                  )\n   p <- p + scale_x_discrete(position = \"top\") \n   p <- p + geom_hline(yintercept = 7.5, linewidth = 2, color = \"blue\")\n   p <- p + geom_hline(yintercept = 11.5, linewidth = 2, color = \"blue\")\n   p <- p + geom_hline(yintercept = 16.5, linewidth = 2, color = \"blue\")\n   p <- p + geom_vline(xintercept = 6.5, linewidth = 2, color = \"blue\")\n   p <- p + geom_vline(xintercept = 9.5, linewidth = 2, color = \"blue\")\n   p\n```\n\n::: {.cell-output-display}\n![](two-mode_files/figure-html/unnamed-chunk-52-1.png){width=672}\n:::\n:::\n\n\nWhich reveals a number of almost complete (one-blocks) and almost null (zero-blocks) in the social structure, with a reduced image matrix that looks like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   library(kableExtra)\n   IM <- matrix(0, 4, 3)\n   IM[1, ] <- c(0, 1, 0)\n   IM[2, ] <- c(0, 1, 1)\n   IM[3, ] <- c(0, 1, 0)\n   IM[4, ] <- c(1, 1, 0)\n   rownames(IM) <- c(\"P.Block1\", \"P.Block2\", \"P.Block3\", \"P.Block4\")\n   colnames(IM) <- c(\"E.Block1\", \"E.Block2\", \"E.Block3\")\n   kbl(IM, format = \"html\", , align = \"c\") %>% \n      column_spec(1, bold = TRUE) %>% \n      kable_styling(full_width = TRUE,\n                     bootstrap_options = c(\"hover\", \"condensed\", \"responsive\"))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-hover table-condensed table-responsive\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\">   </th>\n   <th style=\"text-align:center;\"> E.Block1 </th>\n   <th style=\"text-align:center;\"> E.Block2 </th>\n   <th style=\"text-align:center;\"> E.Block3 </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> P.Block1 </td>\n   <td style=\"text-align:center;\"> 0 </td>\n   <td style=\"text-align:center;\"> 1 </td>\n   <td style=\"text-align:center;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> P.Block2 </td>\n   <td style=\"text-align:center;\"> 0 </td>\n   <td style=\"text-align:center;\"> 1 </td>\n   <td style=\"text-align:center;\"> 1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> P.Block3 </td>\n   <td style=\"text-align:center;\"> 0 </td>\n   <td style=\"text-align:center;\"> 1 </td>\n   <td style=\"text-align:center;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> P.Block4 </td>\n   <td style=\"text-align:center;\"> 1 </td>\n   <td style=\"text-align:center;\"> 1 </td>\n   <td style=\"text-align:center;\"> 0 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n## Generalized Vertex Similarity\n\nRecall that vertex similarity works using the principle of *structural equivalence*: Two people are similar if the choose the *same* objects (groups), and two objects (groups) are similar if they are chosen by the *same* people. \n\nWe can, like we did in the one mode case, be after a more general version of similarity, which says that: Two people are similar if they choose *similar* (not necessarily the same) objects, and two objects are similar if they are chosen by *similar* (not necessarily the same) people.\n\nThis leads to the same problem setup that inspired the **SimRank** approach [@jeh_widom02]. \n\nA (longish) function to compute the SimRank similarity between nodes in a two mode network goes as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   TM.SimRank <- function(A, C = 0.8, iter = 10) {\n        nr <- nrow(A)\n        nc <- ncol(A)\n        dr <- rowSums(A)\n        dc <- colSums(A)\n        Sr <- diag(1, nr, nr) #baseline similarity: every node maximally similar to themselves\n        Sc <- diag(1, nc, nc) #baseline similarity: every node maximally similar to themselves\n        rn <- rownames(A)\n        cn <- colnames(A)\n        rownames(Sr) <- rn\n        colnames(Sr) <- rn\n        rownames(Sc) <- cn\n        colnames(Sc) <- cn\n        m <- 1\n        while(m < iter) {\n             Sr.pre <- Sr\n             Sc.pre <- Sc\n             for(i in 1:nr) {\n                  for(j in 1:nr) {\n                       if (i != j) {\n                            a <- names(which(A[i, ] == 1)) #objects chosen by i\n                            b <- names(which(A[j, ] == 1)) #objects chosen by j\n                            Scij <- 0\n                            for (k in a) {\n                                 for (l in b) {\n                                      Scij <- Scij + Sc[k, l] #i's similarity to j\n                                 }\n                            }\n                            Sr[i, j] <- C/(dr[i] * dr[j]) * Scij\n                       }\n                  }\n             }\n             for(i in 1:nc) {\n                  for(j in 1:nc) {\n                       if (i != j) {\n                            a <- names(which(A[, i] == 1)) #people who chose object i\n                            b <- names(which(A[, j] == 1)) #people who chose object j\n                            Srij <- 0\n                            for (k in a) {\n                                 for (l in b) {\n                                      Srij <- Srij + Sr[k, l] #i's similarity to j\n                                 }\n                            }\n                            Sc[i, j] <- C/(dc[i] * dc[j]) * Srij\n                       }\n                  }\n             }\n             m <- m + 1\n        }\n        return(list(Sr = Sr, Sc = Sc))\n   }\n```\n:::\n\n\nThis function takes the bi-adjacency matrix $\\mathbf{A}$ as input and returns two generalized relational similarity matrices: One for the people (row objects) and the other one for the groups (column objects).\n\nHere's how that would work in the Southern Women data. First we compute the SimRank scores:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   sim.res <- TM.SimRank(A)\n```\n:::\n\n\nThen we peek inside the people similarity matrix:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   round(sim.res$Sr[1:10, 1:10], 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          EVELYN LAURA THERESA BRENDA CHARLOTTE FRANCES ELEANOR PEARL  RUTH\nEVELYN     1.000 0.267   0.262  0.266     0.259   0.275   0.248 0.255 0.237\nLAURA      0.267 1.000   0.262  0.277     0.270   0.287   0.280 0.237 0.247\nTHERESA    0.262 0.262   1.000  0.262     0.273   0.270   0.264 0.254 0.256\nBRENDA     0.266 0.277   0.262  1.000     0.290   0.287   0.279 0.235 0.246\nCHARLOTTE  0.259 0.270   0.273  0.290     1.000   0.276   0.269 0.175 0.256\nFRANCES    0.275 0.287   0.270  0.287     0.276   1.000   0.305 0.280 0.256\nELEANOR    0.248 0.280   0.264  0.279     0.269   0.305   1.000 0.279 0.294\nPEARL      0.255 0.237   0.254  0.235     0.175   0.280   0.279 1.000 0.279\nRUTH       0.237 0.247   0.256  0.246     0.256   0.256   0.294 0.279 1.000\nVERNE      0.201 0.207   0.222  0.206     0.198   0.202   0.246 0.276 0.288\n          VERNE\nEVELYN    0.201\nLAURA     0.207\nTHERESA   0.222\nBRENDA    0.206\nCHARLOTTE 0.198\nFRANCES   0.202\nELEANOR   0.246\nPEARL     0.276\nRUTH      0.288\nVERNE     1.000\n```\n:::\n:::\n\n\nAnd the group similarity matrix:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   round(sim.res$Sc[1:10, 1:10], 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      6/27   3/2  4/12  9/26  2/25  5/19  3/15  9/16   4/8  6/10\n6/27 1.000 0.343 0.314 0.312 0.287 0.277 0.224 0.226 0.178 0.137\n3/2  0.343 1.000 0.312 0.311 0.285 0.276 0.224 0.228 0.200 0.141\n4/12 0.314 0.312 1.000 0.314 0.288 0.265 0.226 0.220 0.179 0.138\n9/26 0.312 0.311 0.314 1.000 0.287 0.256 0.230 0.214 0.186 0.137\n2/25 0.287 0.285 0.288 0.287 1.000 0.260 0.235 0.226 0.187 0.146\n5/19 0.277 0.276 0.265 0.256 0.260 1.000 0.224 0.226 0.200 0.171\n3/15 0.224 0.224 0.226 0.230 0.235 0.224 1.000 0.221 0.204 0.209\n9/16 0.226 0.228 0.220 0.214 0.226 0.226 0.221 1.000 0.221 0.214\n4/8  0.178 0.200 0.179 0.186 0.187 0.200 0.204 0.221 1.000 0.234\n6/10 0.137 0.141 0.138 0.137 0.146 0.171 0.209 0.214 0.234 1.000\n```\n:::\n:::\n\n\nLike before we can use these results to define two sets of distances:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   D.p <- as.dist(1 - sim.res$Sr)\n   D.g <- as.dist(1 - sim.res$Sc)\n```\n:::\n\n\nSubject to hierarchical clustering:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   hc.p <- hclust(D.p, method = \"ward.D2\")\n   hc.g <- hclust(D.g, method = \"ward.D2\")\n```\n:::\n\n\nAnd plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   plot(hc.p)\n```\n\n::: {.cell-output-display}\n![](two-mode_files/figure-html/unnamed-chunk-60-1.png){width=672}\n:::\n\n```{.r .cell-code}\n   plot(hc.g)\n```\n\n::: {.cell-output-display}\n![](two-mode_files/figure-html/unnamed-chunk-60-2.png){width=672}\n:::\n:::\n\n\nGet cluster memberships for people and groups from the `hclust` object:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   clus.p <- sort(cutree(hc.p, 4)) #selecting four clusters for people\n   clus.p\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   EVELYN     LAURA   THERESA    BRENDA CHARLOTTE   FRANCES   ELEANOR     PEARL \n        1         1         1         1         1         1         1         2 \n     RUTH     VERNE   DOROTHY     MYRNA KATHERINE    SYLVIA      NORA     HELEN \n        2         2         2         3         3         3         3         3 \n   OLIVIA     FLORA \n        4         4 \n```\n:::\n\n```{.r .cell-code}\n   clus.g <- sort(cutree(hc.g, 3)) #selecting three clusters for groups\n   clus.g\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n 6/27   3/2  4/12  9/26  2/25  5/19  3/15  9/16   4/8  2/23  6/10   4/7 11/21 \n    1     1     1     1     1     1     2     2     2     2     3     3     3 \n  8/3 \n    3 \n```\n:::\n:::\n\n\nAnd block the bi-adjacency matrix:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   p <- ggcorrplot(t(A[names(clus.p), names(clus.g)]), \n                   colors = c(\"white\", \"white\", \"red\")) \n   p <- p + theme(legend.position = \"none\", \n                  axis.text.y = element_text(size = 8),\n                  axis.text.x = element_text(size = 8, angle = 0),\n                  )\n   p <- p + scale_x_discrete(position = \"top\") \n   p <- p + geom_hline(yintercept = 7.5, linewidth = 2, color = \"blue\")\n   p <- p + geom_hline(yintercept = 11.5, linewidth = 2, color = \"blue\")\n   p <- p + geom_hline(yintercept = 16.5, linewidth = 2, color = \"blue\")\n   p <- p + geom_vline(xintercept = 6.5, linewidth = 2, color = \"blue\")\n   p <- p + geom_vline(xintercept = 10.5, linewidth = 2, color = \"blue\")\n   p\n```\n\n::: {.cell-output-display}\n![](two-mode_files/figure-html/unnamed-chunk-62-1.png){width=672}\n:::\n:::\n\n\nNote that this block solution is similar (pun intended) but not *exactly* the same as the one based on structural equivalence we obtained earlier, although it would lead to the same reduced image matrix for the blocks.\n\n\n\n\n",
    "supporting": [
      "two-mode_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\r\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}