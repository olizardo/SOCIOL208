---
title: "Fitness and Complexity in Two Mode Networks"
execute: 
  eval: true
  echo: true
  output: true
  warning: false
  message: false
format: 
   html:
      code-line-numbers: true
---

In a highly cited piece, @tacchella_etal12 introduce a new prestige metric for two-mode networks that relies on the same "prismatic" model of status distribution we considered [before](tm-prestige.qmd). 

@tacchella_etal12 called the prestige metrics they obtained using their approach "fitness" and "complexity" because they developed in the empirical context of calculating metrics for ranking nations based on their competitive advantage in exporting products, which means analyzing a two-mode country-by-product matrix [@hidalgo_hausmann09]. 

However, when considered in the more general context of two-mode network link analysis [@fouss_etal16], it is clear that their approach is a prestige metric for two-mode networks that combines ideas from Bonacich Eigenvector scoring and PageRank scoring that we covered in the [two-mode prestige lecture notes](tm-prestige.qmd). 

## Fitness/Complexity Scores

Their basic idea is that when we are (asymmetrically) interested in determining the status or prestige of nodes in one particular mode (e.g., the row-mode nodes), we should not use summaries (e.g., sums or averages) of the scores for nodes in the other (e.g., column) mode in determining their status. Instead, we should deeply discount those nodes that connect to low status nodes in the other end. 

To understand what they are getting at, it helps to write down the Bonacich prestige scoring in equation form, as we go through each iteration of the two-mode [status distribution game](tm-prestige.qmd):

If you remember from the function `tm.status`, each iteration $q$, the vector of status scores for the row nodes $\mathbf{s}^R$ and the column nodes $\mathbf{s}^C$ is given by: 

$$
s^R_i(q) = \sum_j\mathbf{A}_{ij}s^C_j(q-1)
$${#eq-iter1}


$$
s^C_j(q) = \sum_i\mathbf{A}_{ij}s^R_i(q-1)
$${#eq-iter2}   


Where $\mathbf{A}$ is the two-mode network's biadjacency matrix, and with the restriction that at the initial step $\mathbf{s}(0)^C = \mathbf{1}$ where $\mathbf{1}$ is the all ones vector of length equals to the number of columns of the biadjacency matrix $\mathbf{A}$. 

At each iteration $q > 0$ we normalize both score vectors:

$$
\mathbf{s}^R(q) = \frac{\mathbf{s}^R(q)}{\left\langle\mathbf{s}^R(q)\right\rangle}
$${#eq-norm1}   

$$
\mathbf{s}^C(q) = \frac{\mathbf{s}^C(q)}{\left\langle\mathbf{s}^C(q)\right\rangle}
$${#eq-norm2} 

Where $\left\langle \mathbf{s} \right\rangle$ is the Euclidean vector norm, and the continue iterating until the differences between the vectors across successive iterations is minimal.  

So far, this is what we [covered before](tm-prestige.qmd). What @tacchella_etal12 propose is to substitute @eq-iter2 above with:

$$
   s^C_j(q) = \left[\sum_i\mathbf{A}_{ij}\left(s^R_i(q-1)\right)^{-1}\right]^{-1}
$${#eq-gen2}

Which means that first (inner parentheses) we take the reciprocal of the row-mode nodes' status scores, sum them across column-mode nodes (such that column-mode nodes that connect to low status row-mode nodes get a big score), and then take the reciprocal of the reciprocal to get back to a measure of status for column-mode nodes. This non-linear transformation heavily discounts the status scores assigned to column-mode nodes whenever they connect to lower status row-mode nodes. @tacchella_etal12 also change the normalization step, using the mean value of the vector in denominator of @eq-norm1, and @eq-norm2. 

## Beyond Status as Popularity/Activity

How should we understand this modification? Recall that the basic principle of standard Bonacich prestige scoring is based on the equation of status/prestige and *popularity*/*activity*. In the canonical case of persons and groups [@breiger74], an event receives status from being attended by high-status individuals and an individual receives status from being affiliated with a high status event; in each case, status from the point of view of the event means having highly active members, and from the point of view of the individual it means being affiliated with popular events. 

But status may not always work this way. Consider the world-economic network linking countries to the products they have a competitive advantage in producing [@hidalgo_hausmann09]. Analysts noticed that the most developed countries produce both "complex" (i.e., high status) products that only a select few of other highly developed economies produce (like semiconductors) and also less "complex" (i.e., low status, like extractive  natural resources) products that the other less developed economics produce [@tacchella_etal12]. 

That  means that the "complexity" (i.e., status score) of a product cannot be derived simply taking a summary (e.g., sum or average) of the status score of the countries that produce it, because high status countries engage in both high and low status forms of production. However, knowing that a product is produced by a low-status country is more informative (and should weigh more significantly in the determination of a product's status score) because low-status countries only produce low-status products. 

Applying the same reasoning to the aforementioned case of persons and groups [@breiger74], an equivalent situation would go as follows. Imagine there is a set of prestigious women and a set of prestigious events that only the prestigious women attend. However, prestigious women are also endowed with a spirit of *noblesse oblige*, which means that the most prestigious of them *also* attend low status events. 

This means that when determining the prestige of the *events* it is not very informative to know that prestigious women affiliate with them; rather, we should weigh more heavily whether *low status* women affiliate with an event in determining an event's status, such that as the number of low-status women who affiliate with an event increases, a given event's status is downgraded in a non-linear way which feeds back into the computation of each woman's prestige. 

Let's see how this would work in the *Southern Wome* data. First we load it up:

```{r}
   library(networkdata)
   library(igraph)
   g <- southern_women
   A <- as.matrix(as_biadjacency_matrix(g))
```

And here's a function called `tm.fitness` that modifies the old two-mode status distribution game function [we played before](tm-prestige.qmd)---which as you recall was itself based on the HITS [@kleinberg99] algorithm for directed one-mode networks---to compute the fitness and complexity prestige scores for persons and groups:

```{r}
   tm.fitness <- function(w, iter = 1000) {
      y <- matrix(1, ncol(w), 1) #initial group status column vector set to a constant
      z <- t(w)
      k <- 0
      while (k < iter) {
         o.y <- y 
         x <- w %*% o.y #fitness status scores for people
         x <- x/mean(x) #normalizing new people status scores 
         y <- (z %*% x^-1)^-1 #complexity status scores for groups
         y <- y/mean(y) #normalizing new group status scores 
         k <- k + 1
         }
   return(list(p.s = x, g.s = y, k = k))
   }
```

Note that we move to a number of iterations approach to indicate convergence (governed by the `iter` argument) rather than a successive differences approach, due to the non-linear nature of the algorithm's scoring. 

We then apply the `tm.fitness` function to the SW data:

```{r}
    fc <- tm.fitness(A, iter = 50)
```

We also calculate the usual Bonacich eigenvector scores using the `svd` function for comparison purposes:

```{r}
   eig <- svd(A)
   p.s <- eig$u[, 1] * -1
   g.s <- eig$v[, 1] * -1
   names(p.s) <- rownames(A)
   names(g.s) <- colnames(A)
```

And we put them in a table:

```{r}
#| echo: false
#| label: tbl-bfc
#| tbl-cap: "Status Scores"
#| tbl-subcap:
#|   - "Persons."
#|   - "Groups." 
#| layout-nrow: 1

   library(kableExtra)
   library(dplyr)
   s.tab <- data.frame(b = p.s/max(p.s), fc = fc$p.s/max(fc$p.s)) |> 
      arrange(desc(fc))
   kbl(s.tab, format = "pipe", digits = 3,
       align = c("l", "c", "c"),
       col.names = c(" ", "Bonacich", "Fitness")) %>% 
   kable_styling(bootstrap_options = c("hover", "condensed", "responsive")) %>%
   column_spec(1, bold = TRUE) |> 
   footnote(symbol = c("Scores normalized by dividing by the maximum.")) 

   s.tab <- data.frame(b = g.s/max(g.s), fc = fc$g.s/max(fc$g.s)) |> 
      arrange(desc(fc))
   kbl(s.tab, format = "pipe", digits = 3,
       align = c("l", "c", "c"),
       col.names = c(" ", "Bonacich", "Complexity")) %>% 
   kable_styling(bootstrap_options = c("hover", "condensed", "responsive")) %>%
   column_spec(1, bold = TRUE) |> 
   footnote(symbol = c("Scores normalized by dividing by the maximum.")) 
```

Each table sorts persons and groups according to the fitness/complexity score. We can see that the status order changes once we introduce the fitness/complexity mode of scoring. While *\{Theresa\}* is the top person according to the usual dual Bonacich prestige score, once we heavily discount the status of events that include low status people, *\{Evelyn\}* becomes the top person, with *\{Theresa\}* dropping to the sixth spot. In the same way while *\{Nora\}* is ranked sixth by the Bonacich prestige, her standing improves to third in the fitness scoring. Meanwhile *\{Brenda\}* was number three according to the Bonacich score, but her prestige drops to seventh place in the fitness/complexity scoring. 

The status of groups changes even more dramatically once complexity is calculated by heavily discounting the status of groups that include lower status people. While *\{9/16\}* is the top event by the usual Bonacich prestige scoring, this event has minimal status according to the complexity scoring, ending up third from the bottom. Instead, the top even by complexity is \{3/2\} a relatively low-status event according to the Bonacich score. In fact, all of the other top events according to the complexity scoring, were ranked minimally by the Bonacich scoring, except for event *\{2/23\}*, which is a low status event on both accountings. This means that the Bonacich prestige and complexity scores for events have a strong negative correlation (*r* =  `r round(cor(g.s, fc$g.s),2)`). This is different from the person ranks, which agree more closely (*r* =  `r round(cor(p.s, fc$p.s),2)`).

To help us make sense of the differences between the Bonacich and the fitness/complexity prestige scoring, @fig-sw-1 shows the original SW biadjacency matrix with rows and columns ordered by the degree of each node. This means that highly attended events appear in on the left, and highly active women appear on the top.  

@fig-sw gives us some insight as to why event *\{9/16\}* drops so much in the fitness/complexity rankings. While it is the most prestigious (and well attended) event by the Bonacich score (leftmost in @fig-sw-1), this also means that it is attended by a lot of low status women (ones at the bottom of @fig-sw-2). The same thing happens to event *\{4/8\}* which is third according to Bonacich prestige, but dead last according to complexity, given its heavy bulk of low fitness attendees (e.g., *\{Verne, Ruth, Pearl, Dorothy, Olivia, Flora\}*). 

Event *\{3/2\}* on the other hand, while having relatively sparse attendance (only three women), and thus low Bonacich prestige (which rewards volume), has a membership composed of exclusively hight status persons (ones at the top of @fig-sw-2: *\{Evelyn, Laura, Theresa\}*). Event *\{2/23\}* gets ranked similarly by the two measures because it has both sparse attendance and the majority (two thirds) of its attendees are low status women (*\{Olivia, Flora\}*).

@fig-sw also helps us make sense of the *\{Theresa\}* versus *\{Evelyn\}* contrasts across prestige rankings. Both are highly active women, but Evelyn's membership in the top two events according to fitness/complexity *\{3/2, 6/27\}*  puts her towards the top. The same goes for Laura's membership in the same events, which move her from fourth to second in the fitness/complexity ranks. Nora's membership in third and fourth most highly ranked events according  to complexity, *\{11/21, 8/3\}*, also help her improve her fitness ranks in @fig-sw-2.

## An Eigenvector-Based Approach
@sciarra_etal20 [p. 8-9] describe an eigenvector-based (and thus linear and non-iterative) method to derive values that are close (but not exactly) as the fitness/complexity scores. Their idea is to produce a degree-normalized biadjacency matrix that equals:

$$
\tilde{\mathbf{A}} = \mathbf{D}_p \mathbf{A} \mathbf{D'}_g
$$

Where $\mathbf{D}_p$ is the diagonal matrix of people's degrees and $\mathbf{D'}_g$ is a diagonal matrix with each entry $d'_{gg}$ in the diagonal equal to:

$$
d'_{gg} = \sum_g \frac{A_{pg}}{k_p}
$$

Where $k_p = \sum_p A_{pg}$ is the degree of each person.

In `R` we can obtain these matrices as follows:

```{r}
   D.p <- diag(1/rowSums(A))
   k.g <- colSums(A/(rowSums(A)))
   D.g <- diag(1/k.g)
   A.n <- D.p %*% A %*% D.g
```

Once we have the normalized biadjacency matrix, we compute the normalized Breiger projections:

$$
\tilde{\mathbf{P}} = \tilde{\mathbf{A}}\tilde{\mathbf{A}}^T
$$

$$
\tilde{\mathbf{G}} = \tilde{\mathbf{A}}^T\tilde{\mathbf{A}}
$$

The linear fitness/complexity scores $\mathbf{x}$ and $\mathbf{y}$ are then obtained as the solution to the following, now familiar, eigenvector problem:

$$
\lambda \mathbf{x} = \tilde{\mathbf{P}}\mathbf{x}
$$

$$
\lambda \mathbf{y} = \tilde{\mathbf{G}}\mathbf{y}
$$

Which in `R` we obtain as follows:

```{r}
   P.n <- A.n %*% t(A.n)
   G.n <- t(A.n) %*% A.n
   eig.p <- abs(eigen(P.n)$vectors[,1])
   eig.g <- abs(eigen(G.n)$vectors[,1])
   names(eig.p) <- rownames(A)
   names(eig.g) <- colnames(A)
```

We can then compare the scores for both persons and groups, with the proviso that, to maximize the correlation with their linear approximations, we normalize the fitness scores for people by dividing by the person degrees $k_p$, and the complexity scores for groups by multiplying by the corresponding $d'_{gg}$ score.


```{r}
#| label: fig-sw
#| fig-cap: "Southern Women Data Biadjacency Matrix."
#| echo: false
#| fig-cap-location: margin
#| fig-subcap:
#|   - "Rows/Columns Reordered by Bonacich Prestige."
#|   - "Rows/Columns Reordered by Fitness/Complexity." 
#|   - "Rows/Columns Reordered by Linearized Fitness/Complexity." 
#| layout-nrow: 2
#| fig-width: 8
#| fig-height: 8
#| 
    library(corrplot)
    A.reord <- A[names(sort(p.s, decreasing = TRUE)), names(sort(g.s, decreasing = TRUE))]
    corrplot(A.reord, is.corr = FALSE, method = "color", 
         tl.col = "black", tl.cex = 1, tl.srt = 45,
         addCoef.col = "black", cl.pos = "n",
         number.cex = 1.5, number.digits = 0, addgrid.col = "darkgray",
         col=colorRampPalette(c("white","white","red"))(200))
    a <- names(fc$p.s[order(fc$p.s[, 1]*-1), ])
    b <- names(fc$g.s[order(fc$g.s[, 1]*-1), ])
    A.reord <- A[a, b]
    corrplot(A.reord, is.corr = FALSE, method = "color", 
         tl.col = "black", tl.cex = 1, tl.srt = 45,
         addCoef.col = "black", cl.pos = "n",
         number.cex = 1.5, number.digits = 0, addgrid.col = "darkgray",
         col=colorRampPalette(c("white","white","red"))(200))
    A.reord <- A[names(sort(eig.p, decreasing = TRUE)), names(sort(eig.g, decreasing = TRUE))]
    corrplot(A.reord, is.corr = FALSE, method = "color", 
         tl.col = "black", tl.cex = 1, tl.srt = 45,
         addCoef.col = "black", cl.pos = "n",
         number.cex = 1.5, number.digits = 0, addgrid.col = "darkgray",
         col=colorRampPalette(c("white","white","red"))(200))
```

Here are the linear fitness/complexity scores compared to the non-linear ones:

```{r}
#| echo: false
#| label: tbl-fclc
#| tbl-cap: "Status Scores"
#| tbl-subcap:
#|   - "Persons."
#|   - "Groups." 
#| layout-nrow: 1

   nfc.ps <- fc$p.s/rowSums(A)
   s.tab <- data.frame(fc = nfc.ps/max(nfc.ps), lfc = eig.p/max(eig.p)) |> 
      arrange(desc(fc))
   kbl(s.tab, format = "pipe", digits = 3,
       align = c("l", "c", "c"),
       col.names = c(" ", "Fitness", "Linear Fitness")) %>% 
   kable_styling(bootstrap_options = c("hover", "condensed", "responsive")) %>%
   column_spec(1, bold = TRUE) |> 
   footnote(symbol = c("Scores normalized by dividing by the maximum.")) 

   nfc.gs <- fc$g.s * k.g
   s.tab <- data.frame(fc = nfc.gs/max(nfc.gs), lfc = eig.g/max(eig.g)) |> 
      arrange(desc(fc))
   kbl(s.tab, format = "pipe", digits = 3,
       align = c("l", "c", "c"),
       col.names = c(" ", "Complexity", "Linear Complexity")) %>% 
   kable_styling(bootstrap_options = c("hover", "condensed", "responsive")) %>%
   column_spec(1, bold = TRUE) |> 
   footnote(symbol = c("Scores normalized by dividing by the maximum.")) 
```

The row/column re-ordered biadjacency matrix according to the linearized fitness/complexity scores is shown in @fig-sw-3.
