---
title: "Analyzing Ego Networks"
execute: 
  eval: true
  echo: true
  output: true
  warning: false
  message: false
format: 
   html:
      code-line-numbers: true
---

## Ego Networks and Ego Network Data

An ego-network, is just a **subgraph** of a larger network--referred to as an **ego graph**--that includes a node of interest ("ego"), all of the connections between ego and their neighbors (called "alters") and usually all of the connections between each of the alters, *excluding* the connections alters may have with other nodes who are not directly tied to ego. 

**Ego network data** is social network data collected in such way (e.g., using standard social survey techniques) that you capture the ego networks of some set of people, usually a convenience sample or, more rarely, a probability sample of some population. 

Note that if you collect traditional ("whole") network data (e.g., all the people in a classroom) you have ego network data for that settings (the ego subgraphs of each node as just defined), but not the reverse; ego-network data cannot be converted into "whole" network data, although it can approximate it. 

Once you have ego network data you can analyze each ego graph using the standard techniques we learned so far (if you are only interested in the structural characteristics of the ego graph).

If you have attributes on each alter, you can alternatively compute measures of **diversity** to or **homophily** to get a sense of how likely ego is to connect to similar or diverse others.

## Structural Measures

### The Clustering Coefficient

Perhaps the most basic structural characteristic of an ego network is the density of the subgraph formed by all of the connections between the alters. This is called ego's **clustering coefficient**.  

Let's see how it works. First we load up the *New Hope* Star Wars social network included in the `networkdata`` package [@gabasova16]:

```{r}
   library(networkdata)
   g <- starwars[[4]]
```

As we said an ego graph is just a subgraph centered on a particular actor. So R2-D2's ego graph is just:

```{r}
   library(igraph)
   N <- neighbors(g, "R2-D2")
   a <- subgraph(g, c("R2-D2", names(N))) #ego graph
```

And we can just plot it like we would any `igraph` object:

```{r}
#| fig-height: 8
#| fig-width: 8
#| fig-cap: "R2-D2's Ego Network."
   V(a)$color <- c(1, rep(2, length(N)))
   plot(a, 
     vertex.size=10, vertex.frame.color="lightgray", 
     vertex.label.dist=2, 
     layout = layout_as_star(a, center = "R2-D2"),
     vertex.label.cex = 1.25, edge.color = "lightgray")
```

Note that we use the `layout_as_star()` for the layout, so that the ego is put in the center of the star graph surrounded by their alters, we can specify who the star node is using the option `center`.

R2-D2's clustering coefficient is just the density of the graph that includes only the alters:

```{r}
   alters <- a - vertex("R2-D2")
   C <- round(edge_density(alters), 2)
   C
```

The clustering coefficient $C_i$ for an ego $i$ ranges from zero to one. $C = 0$ means that *none* of ego's alters are connected to one another and $C = 1$ means that *all* of ego's alters are connected to one another. In this case, $C = `r C`$ means that `r C*100`% of R2-D2's alters are connected (co-appear in scenes) with one another. 

Typically we would want to compute the clustering coefficient of every node in a graph. This can be done using our trusty `lapply` and `sapply` meta-functions:

```{r}
   create.ego <- function(x, w) {
      alter.net <- subgraph(w, neighbors(w, x))
      return(alter.net)
      }
   ego.graphs <- lapply(V(g)$name, create.ego, w = g)
   head(ego.graphs)
```

First, we turn the code we used to find R2-D2's ego graph into a function, then we apply the function to each node in the network. The result is a `list` object with $|V| = `r vcount(g)`$ ego subgraphs composed of each node's alters and their connections. 

Now, to find out the clustering coefficient of each node, we just type:

```{r}
   C <- round(sapply(ego.graphs, edge_density), 2)
   names(C) <- V(g)$name
   C
```

Note we have a couple of `NaN` values in the slots corresponding to Greedo and Jabba in the clustering coefficient vector. 

Let's check out why:

```{r}
   degree(g)
```

Here we see the problem is that both Greedo and Jabba are singleton nodes (with degree equal to one), so it doesn't make sense to analyze their clustering coefficients because their ego graph is just an isolated node!

We can just drop them and re-analyze:

```{r}
   g <- subgraph(g, degree(g)> 1)
   ego.graphs <- lapply(V(g)$name, create.ego, w = g)
   C <- round(sapply(ego.graphs, edge_density), 2)
   names(C) <- V(g)$name
   C
```

Much better!

Note that in this analysis, Luke has the lowest clustering coefficient ($C = 0.34$) this usually indicates an ego whose alters are partitioned into distinct clusters (and hence they are not connected to one another), and ego is a mediator or *broker* between those clusters.

Let's see what that looks like:

```{r}
#| fig-height: 8
#| fig-width: 8
#| fig-cap: "Luke's ego network with alter nodes colored by community assingment via Newman's leading eigenvector method."
   set.seed(456)
   N <- neighbors(g, "LUKE")
   luke.alters <- subgraph(g, N)  
   V(luke.alters)$color <- cluster_leading_eigen(luke.alters)$membership
   luke <- subgraph(g, c("LUKE", names(N)))
   luke <- simplify(union(luke, luke.alters))
   V(luke)$color[which(is.na(V(luke)$color))] <- "red"
   plot(luke, 
     vertex.size=6, vertex.frame.color="lightgray", 
     vertex.label.dist=1.25,  
     vertex.label.cex = 0.75, edge.color = "lightgray")
```

Here we can see that Luke mediates between the Rebel Pilot community on the left and the Obi-Wan, Leia, Chewbacca, Han Solo and Droid communities on the right. Note that we didn't have to use that `layout_as_star` option because when ego's network has community structure, the traditional spring embedding layout will put ego at the center.

Note that in the ego graph that includes ego, each connected alter is a **triangle** in the ego graph. So the clustering coefficient is simply a count of the *number of undirected triangles that are centered on ego*, or the number of *cycles of length three centered on ego*. 

So that means that the diagonals of the cube of the adjacency matrix also contain the information needed to compute the clustering coefficient:

```{r}
   A <- as.matrix(as_adjacency_matrix(g))
   A3 <- A %*% A %*% A
   diag(A3)
```

So all we need to do is divide these numbers by the maximum possible number of undirected triangles that could be centered on a node, which is $k_i(k_i - 1)$ where $k_i$ is ego's degree:

```{r}
   k <- degree(g)
   C <- diag(A3)/(k*(k - 1))
   round(C, 2)
```

Which gives us the answer as before!

Finally, from each ego's clustering coefficient (sometimes called the **local clustering coefficient** of each node) we can compute the graph's **global clustering coefficient** which is just the average this quantity across each node in the graph:

$$
C(G) = \frac{1}{N}\sum_iC_i
$$

In `R`:

```{r}
   C.glob <- mean(C)
   round(C.glob, 2)
```

Which indicates a fairly clustered graph. 

In `igraph` we can use the function `transitivity` to compute the local and global clustering coefficients, which can be specified using the argument `type`. For the local version, the function also expects a list of vertices:

```{r}
   round(transitivity(g, V(g)$name, type = "local"), 2)
```

And the graph's global clustering coefficient is:

```{r}
   round(transitivity(g, type = "average"), 2)
```

### Ego-Network Betweenness

An alternative structural measure of ego's position in the ego network, closely related to the clustering coefficient, is **ego network betweenness**. 
As @everett_borgatti05 note, in an ego network betweenness is determined by the number of paths of length two that involve ego, that is, by the number of disconnected alters. 

Therefore, if $\mathbf{A}$ is the adjacency matrix recording the links between the alters, then $\mathbf{A}^2$ will contain the number of paths of length two between each pair of alters. Because we are only interested in the number of paths of length two between each pair of *disconnected* alters, we multiply (element-wise) this matrix by the adjacency matrix corresponding to the **graph complement** (a matrix with a one for every zero in the original adjacency matrix and a zero for each one). We then take the sum of the reciprocals of one of the triangles (excluding the main diagonal) of the resulting matrix to find the betweenness of ego. 

In math:

$$
C_B(Ego) = \sum_{i < j}\left[\mathbf{A}^2 \bullet (\mathbf{J} - \mathbf{A})\right]_{ij}^{-1}
$$

Where $\mathbf{J}$ is a matrix full of ones of the same dimensions as $\mathbf{A}$ and $\bullet$ indicates element-wise matrix multiplication.

A simple function that does this looks like:

```{r}
   ego.bet <- function(x, n) {
      N <- neighbors(x, n)
      alter.net <- subgraph(x, c(n, names(N)))
      A <- as.matrix(as_adjacency_matrix(alter.net))
      A2 <- A %*% A
      J <- matrix(1, nrow(A), ncol(A))
      cb <- A2 * (J - A)
      cb <- 1/cb
      cb[is.infinite(cb)] <- 0
      cb <- sum(cb[upper.tri(cb)])
      return(cb)
   }
```

Let's see how it works for Luke:

```{r}
   round(ego.bet(g, "LUKE"), 2)
```

Which says that Luke has pretty high ego-network betweenness.

We can, of course, compute it for everyone in the network like before:

```{r}
   round(sapply(V(g)$name, ego.bet, x = g), 2)
```

Which confirms our original impression of Luke as the highest ego-network betweenness character with Leia in second place.

What does it mean to have an ego-network betweenness of zero? Well, this is only possible if your clustering coefficient is 1.0, that is, when all of your alters are directly connected to one another. This is evident in Chewbacca's ego network:

```{r}
#| fig-height: 8
#| fig-width: 8
#| fig-cap: "Chewbacca's Ego Network."
   N <- neighbors(g, "CHEWBACCA")
   chew <- subgraph(g, c("CHEWBACCA", names(N)))
   cols <- rep("#56B4E9", vcount(chew))
   names(cols) <- V(chew)$name
   cols[which(names(cols) == "CHEWBACCA")] <- categorical_pal(1)
   V(chew)$color <- cols
   plot(chew, 
     vertex.size=10, vertex.frame.color="lightgray", 
     vertex.label.dist=2, 
     layout = layout_as_star(chew, center = "CHEWBACCA"),
     vertex.label.cex = 1.25, edge.color = "lightgray")
```

Which is a complete clique of size seven.

## Compositional Measures
### Ego Network Diversity

If we have information on the categorical vertex attributes of ego's alters we may be interested in how diverse are ego's choices across those attributes. 

The most common measure is **Blau's Diversity Index** ($H$). For a categorical attribute with $m$ levels, this is given by:

$$
H = 1 - \sum_{k=1}^m p_k^2
$$

Where $p_k$ is the proportion of ego's alters that fall under category level $k$. 

The $H$ measure ranges from a minimum of $H = 0$ (all of ego's alters belong to a single category) to a maximum of $H = 1- \frac{1}{m}$ (all of ego's alters belong to a different category).

When the Blau diversity index is normalized by its theoretical maximum, it is sometimes referred to as the **Index of Qualitative Variation** or $IQV$:

$$
IQV = \frac{1 - \sum_{k=1}^m p_k^2}{1-\frac{1}{m}}
$$

The main difference between $H$ and $IQV$ is that the latter has a maximum of $IQV = 1.0$ indicating the top diversity that can be observed for a categorical attribute with $m$ categories. 

Let's see how this would work. 

First, let's switch to the *Attack of the Clones* Star Wars graph:

```{r}
   g <- starwars[[2]]
   g <- subgraph(g, degree(g)> 1) #removing singletons
```

Now, we will pick the vertex attribute `homeworld` and try to measure how diverse is each character's ego network on this score. 

To do that, we need to get the proportion of characters from each homeworld in the network. 

Let's check out this vertex attribute:

```{r}
   V(g)$homeworld
```

There are some `NA` values here, so let's create a residual category called "other":

```{r}
   V(g)$homeworld[is.na(V(g)$homeworld)] <- "Other"
   V(g)$homeworld
```

Great! Now we can use the native `R` function `table` to get the relevant proportions.

The function `table` gives us the count of characters in each category, and then we divide by the total number of actors in the network, given by `vcount`:

```{r}
   p.hw <- round(table(V(g)$homeworld)/vcount(g), 3)
   p.hw
```

Now that we know how to get the proportions we need, we can write a custom function that will compute $H$ (or its normalized counterpart the $IQV$) for a given ego network for any given attribute:

```{r}
   blau <- function(n, w, a, norm = FALSE) {
      x <- subgraph(w, neighbors(w, n)) #ego subgraph
      p <- table(vertex_attr(x, a))/vcount(x) #proportion of alters in each category of the attribute a
      m <- length(p)
      res <- 1 - sum(p^2) #blau diversity
      if (norm == TRUE) {res <- res /(1 - 1/m)} #IQV
      return(res)
      }
```

This function takes three inputs: The name of the ego `n`, the graph object `w`, and the name of the attribute `a`. It returns the Blau diversity index score for that ego on that attribute by default; when `norm` is set to `TRUE` it returns the normalized Blau score (a.k.a. the $IQV$). 

Let's see Padme's Home World ego network diversity score:

```{r}
   round(blau("PADME", g, "homeworld"), 3)
```

Which says that Padme has a fairly diverse ego network when it comes to Home World. 

We can, of course, just use `sapply` to compute everyone's Home World ego network diversity score:

```{r}
   round(sapply(V(g)$name, blau, w = g, a = "homeworld"), 3)
```

In this network Count Dooku stands out as having a very diverse ego network by Home World, while Owen sports a very homogeneous ego network on the same attribute. 

Let's see a side-by-side comparison:

```{r}
#| fig-height: 8
#| fig-width: 8
#| fig-cap: "Two Ego Networks with Nodes Colored by Homeworld"
#| fig-subcap:
#|   - ""
#|   - ""
#| layout-ncol: 2   
#| echo: false
   N <- neighbors(g, "COUNT DOOKU")
   a <- subgraph(g, c("COUNT DOOKU", names(N)))
   V(a)$color <- as.numeric(as.factor(V(a)$homeworld))
   plot(a, 
     vertex.size=10, vertex.frame.color="lightgray", 
     vertex.label.dist=2, 
     layout = layout_as_star(a, center = "COUNT DOOKU"),
     vertex.label.cex = 1.25, edge.color = "lightgray")
   N <- neighbors(g, "OWEN")
   b <- subgraph(g, c("OWEN", names(N)))
   V(b)$color <- as.numeric(as.factor(V(b)$homeworld))
   plot(b, 
     vertex.size=10, vertex.frame.color="lightgray", 
     vertex.label.dist=2,  
     layout = layout_as_star(b, center = "OWEN"),
     vertex.label.cex = 1.25, edge.color = "lightgray")
```

And here are the corresponding $IQV$ scores for everyone in the network:

```{r}
   round(sapply(V(g)$name, blau, w = g, 
                a = "homeworld", norm = TRUE), 3)
```

As we noted an ego network with maximum diversity $IQV = 1.0$ is one where every alter is in a different category. Here are two examples:

```{r}
#| fig-height: 8
#| fig-width: 8
#| fig-cap: "Two Ego Networks with Maximum Homeworld Diversity."
#| fig-subcap:
#|   - ""
#|   - ""
#| layout-ncol: 2   
#| echo: false
   N <- neighbors(g, "BOBA FETT")
   a <- subgraph(g, c("BOBA FETT", names(N)))
   V(a)$color <- as.numeric(as.factor(V(a)$homeworld))
   plot(a, 
     vertex.size=10, vertex.frame.color="lightgray", 
     vertex.label.dist=2, 
     layout = layout_as_star(a, center = "BOBA FETT"),
     vertex.label.cex = 1.25, edge.color = "lightgray")
   N <- neighbors(g, "POGGLE")
   b <- subgraph(g, c("POGGLE", names(N)))
   V(b)$color <- as.numeric(as.factor(V(b)$homeworld))
   plot(b, 
     vertex.size=10, vertex.frame.color="lightgray", 
     vertex.label.dist=2,  
     layout = layout_as_star(b, center = "POGGLE"),
     vertex.label.cex = 1.25, edge.color = "lightgray")
```

### Ego Network Homophily

Diversity measures the extent to which ego's connect to alters who are the same or different from *one another*. We may also want to get a sense of how *homophilous* an ego network is, namely, the extent to which ego connects to alters that are the same or different from *them*.

For instance, a person can have an ego network composed of 100% alters who are different from them on a given attribute (maximum "heterophily") but those alters could be 100% homogeneous---e.g., all come from the same planet---and thus ego will have the *minimum* Blau diversity score ($H = 0$).  

To measure homophily in the ego network we use the **EI homophily index**. This is given by:

$$
EI = \frac{E-I}{E+I}
$$

Where $E$ is the number of "external" ties (alter different from ego on attribute), and $I$ is the number of "internal" ties (alter same as ego on attribute).

The $EI$ index ranges from a minimum of $EI = -1$, indicating maximum homophily, to a maximum of $EI = 1$, indicating maximum heterophily. An EI index value of zero indicates no preference for internal over external ties. 

So let's write a function that does what we want to calculate EI:

```{r}
   EI <- function(n, w, a) {
      x <- subgraph(w, neighbors(w, n))
      E <- sum(vertex_attr(w, a, n) != vertex_attr(x, a)) #n. external ties
      I <- sum(vertex_attr(w, a, n) == vertex_attr(x, a))  #n. internal ties
      res = (E - I)/(E + I) #EI Index
      return(res)
      }
```

Let's look at the attribute `sex`:

```{r}
   V(g)$sex
```

Getting rid of the `NA` values:

```{r}
   V(g)$sex[is.na(V(g)$sex)] <- "Other"
   V(g)$sex
```

And calculating the homophily index on gender for everyone:

```{r}
   EI <- sapply(V(g)$name, EI, w = g, a = "sex")
   round(EI, 2)
```

As we can see, the Emperor, Mace Windu, Obi-Wan and other such characters have a homophilous "bro" network. Padme, on the other hand, has a heterophilous network with respect to gender. 

Let's see a side-by-side comparison:

```{r}
#| fig-height: 8
#| fig-width: 8
#| fig-cap: "Two Ego Networks with Nodes Colored by Gender"
#| fig-subcap:
#|   - "H = -0.60"
#|   - "H =  0.88"
#| layout-ncol: 2   
#| echo: false
   N <- neighbors(g, "MACE WINDU")
   a <- subgraph(g, c("MACE WINDU", names(N)))
   V(a)$color <- as.numeric(as.factor(V(a)$sex))
   plot(a, 
     vertex.size=10, vertex.frame.color="lightgray", 
     vertex.label.dist=2, 
     layout = layout_as_star(a, center = "MACE WINDU"),
     vertex.label.cex = 1.25, edge.color = "lightgray")
   N <- neighbors(g, "PADME")
   b <- subgraph(g, c("PADME", names(N)))
   V(b)$color <- as.numeric(as.factor(V(b)$sex))
   plot(b, 
     vertex.size=10, vertex.frame.color="lightgray", 
     vertex.label.dist=2,  
     layout = layout_as_star(b, center = "PADME"),
     vertex.label.cex = 1.25, edge.color = "lightgray")
```

As we can see, Mace Windu is mostly surrounded by other men (like him) but Padme's network includes only one other woman, and the rest are composed of people with a different gender presentation than her (or have no discernible gender like the droids).

Like the clustering coefficient, we can compute a graph level index of homophily on a given attribute. This is given by the average EI index of nodes in the graph for that attribute.

In the case of gender in *Attack of the Clones*:

```{r}
   EI.gender = mean(EI)
   round(EI.gender, 2)
```

Which shows a slight preference for same-gender ties in the network. 


### Normalized EI

Sometimes we may want to take into account that the group sizes of different categories of people is unequal in the network. For instance, Star Wars is full characters gendered as men, which means that any homophily index will penalize men as being more homophilous simply because there are more men around to form ties with.

@everett_borgatti12 [p.564-565] propose approach to normalizing the EI index to account for unequal group sizes, yielding the $NEI$. So instead of computing EI they suggest calculating:

$$
E^* = \frac{E}{N-Ns}
$$

$$
I^* = \frac{I}{Ns}
$$

$$
NEI = \frac{E^*-I^*}{E^*+I^*}
$$

With $N_s$ being the number of "similar" nodes to ego in the whole graph (or external population) and $N$ being the total number of nodes (or persons in the population). As you can see, the $NEI$ weights both the number of external and $E$ the number of internal ties $I$ by their maximum possible values in the network. 

Here's a function that does that:

```{r}
   NEI <- function(n, w, a) {
      N <- vcount(w) 
      Ns <- sum(vertex_attr(w, a) == vertex_attr(w, a, n))
      x <- subgraph(w, neighbors(w, n))
      E <- sum(vertex_attr(w, a, n) != vertex_attr(x, a)) 
      I <- sum(vertex_attr(w, a, n) == vertex_attr(x, a)) 
      E <- E/(N - Ns) #normalized E
      I <- I/Ns #normalized I
      res = (E - I)/(E + I)
      return(res)
   }
```

Let's re-check Mace Windu's and Padme's EI index using the normalized version:

```{r}
   round(NEI("MACE WINDU", g, "sex"), 2)
   round(NEI("PADME", g, "sex"), 2)
```

As we can see the NEI scores are less extreme than the unnormalized ones, once we take into account that the majority of characters in the film are men.

Here are the NEI scores with respect to gender for everyone:

```{r}
   NEI <- sapply(V(g)$name, NEI, w = g, a = "sex")
   round(NEI, 2)
```

Interestingly, while most people's scores are attenuated towards zero in the normalized scale, R2-D2's becomes more extreme going from weakly positive (demonstrating "gender" heterophily) to extreme negative (showing same "gender" preference). 

Let's see what's going on:

```{r}
#| fig-height: 5
#| fig-width: 5
#| fig-cap: "R2-D2's Ego Network with Nodes Colored by Gender"
#| echo: false
   N <- neighbors(g, "R2-D2")
   r2 <- subgraph(g, c("R2-D2", names(N)))
   V(r2)$color <- as.numeric(as.factor(V(r2)$sex))
   plot(r2, 
     vertex.size=10, vertex.frame.color="lightgray", 
     vertex.label.dist=2, 
     layout = layout_as_star(r2, center = "R2-D2"),
     vertex.label.cex = 1, edge.color = "lightgray")
```

Here we can see that the reason why R2-D2 ends up being high in homophily in the NEI despite containing a network with just three nodes and only a single "same-gender" (i.e., none) tie, is that he is connected to C3PO who is the only other character (a droid) whose gender is also assigned to "none."

And here's the graph's overall NEI:

```{r}
   NEI.gender = mean(NEI)
   round(NEI.gender, 2)
```

Which shows that our previous unnormalized average under-estimated homophily in this network. Instead, there is a moderately strong tendency for characters to co-appear with others of the same gender classification once the imbalance favoring men is accounted for. 

### Other Ways of Accounting for Imbalanced Group Sizes in Homophily Metrics

As may already be evident, when constructing a homophily measure that takes into account the population (or local network) proportions of various types of alters, there are four pieces of information that we have to take into account:

a) Number of alters linked to ego of the same category as ego.
b) Number of alters linked to ego of a different category from ego.
c) Number of alters not linked to ego of the same category as ego.
d) Number of alters non-linked to ego of a different category from ego.

Which yields a classic 2 by 2 table. 

Here's a function that produces such a table for each ego for a given attribute:

```{r}
   abcd <- function(n, w, a) {
      x <- subgraph(w, neighbors(w, n))
      same <- vertex_attr(w, a, n) == vertex_attr(w, a)
      same <- same[!(same %in% n)] #deleting ego node from vector
      tied <- as.vector(V(w)$name) %in% names(neighbors(w, n))
      tied <- tied[!(tied %in% n)] #deleting ego node from vector
      tab <- table(tied, same)
      tab <- tab[2:1, 2:1] #reversing row and column order of table
      return(tab)
   }
```

So for Count Dooku with respect to gender, this 2 X 2 table looks like:

```{r}
   abcd("COUNT DOOKU", g, "sex")
```

So here we can see that Dooku is linked to eight others of the same gender, but there are nine other men he's not linked to. In the same way, he has two different-gender ties, but there are nine others of a different gender he's not tied to. 

As @everett_borgatti12 note, we can label the cells of the 2 X 2 EI table with the letters from the above list to highlight each piece of information in each cell: 

```{r}
#| echo: false
   t <- abcd("COUNT DOOKU", g, "sex")
   t[1,1] <- "a"
   t[1,2] <- "b"
   t[2,1] <- "c"
   t[2,2] <- "d"
   t
```

The EI index only uses information only from the first row (alters tied to ego), and is thus a rescaling of $a/(a + b)$; it is sensitive to group size imbalances because it ignores the other pieces of information. 

The NEI, on the other hand, uses information from all four cells and is therefore a rescaling of $(a/(a + c)) - (b/(b + d))$; therefore, it is insensitive to group size imbalances.

Other measures of homophily could thus be constructed from the information in the 2 X 2 table, that, like the NEI, are not sensitive to group sizes. One measure @everett_borgatti12 [p. 565] recommend is the **point biserial correlation coefficient** ($r^{pb}$), which is given, using the cell labels in the table above, by:

$$
r^{pb} = \frac{ad-bc}{\sqrt{(a+c)(b+d)(a+b(c+d))}}
$$

A function that computes this from the output of `abcd` above is:

```{r}
   pb.corr <- function(x) {
      a <- x[1,1]
      b <- x[1,2]
      c <- x[2,1]
      d <- x[2,2]
   num <- (a*d - b*c)
   den <- sqrt((a+c)*(b+d)*(a+b)*(c+d))
   return(num/den)
   }
```

For Dooku, $r^{pb}$ is:

```{r}
   round(pb.corr(abcd("COUNT DOOKU", g, "sex")), 2)
```

Which shows a positive tendency for same gender ties, net of the imbalance between men and other-gendered characters in the film. 

To calculate $r^{pb}$ for the whole network, first we need to create a list containing the corresponding 2 X 2 EI tables for each node for the gender attribute:

```{r}
   abcd.gender <- lapply(V(g)$name, abcd, w = g, a = "sex")
   names(abcd.gender) <- V(g)$name
   head(abcd.gender)
```

And then `sapply` the function `pb.corr` to each element of this list:

```{r}
   PBC <- sapply(abcd.gender, pb.corr)
   round(PBC, 2)
```

Which shows that, after accounting for group sizes, most characters display slight to moderate preferences for same-gender ties, with the exception of Anakin, Padme, Taun We, Owen, Clegg, and Sun Rit. 

If we wanted to see what proportion of nodes have a same-gender preference we just type:

```{r}
   round(sum(PBC > 0)/length(PBC), 2)
```

Which suggest that about 70% of the characters display a tendency to appear with same gender others (accounting for differences in the sizes of different gender groups).


And at the network level, the point-biserial correlation homophily measure for gender is:

```{r}
   round(mean(PBC), 4)
```

Which also suggests a slight preference for same gender ties in this network.

### Combining Diversity and Homophily

Sometimes, you may not care about the difference between diversity and homophily. Instead you just want to see whether nodes connect to nodes that are the same as them *or* nodes of a single type, or whether nodes connect to all nodes that are different from them, or nodes of a different type.

In this case, Yule's $Q$ is a good option [@borgatti_etal24, p. 159]. It is given by:

$$
Q = \frac{ad-bc}{ad+bc}
$$

$Q$ works like a correlation coefficient, and it is 1.0 when ego's network is either completely homophilous or completely homogeneous, and it is -1.0 when ego's network is either completely heterophilous or completely heterogeneous. 

A function to calculate $Q$ from the `abcd` function output is as follows:

```{r}
   y.Q <- function(x) {
      a <- x[1,1]
      b <- x[1,2]
      c <- x[2,1]
      d <- x[2,2]
   num <- a*d - b*c
   den <- a*d + b*c
   return(num/den)    
   }
```

And here are the values for the *Attack of the Clones* network:

```{r}
   Q <- sapply(abcd.gender, y.Q)
   round(Q, 2)
```

Let's compare two egos with extreme oppossite values on $Q$:

```{r}
#| fig-height: 8
#| fig-width: 8
#| fig-cap: "Two Ego Networks with Maximum and Minimum Q Values"
#| fig-subcap:
#|   - "Q = 1"
#|   - "Q = -1"
#| layout-ncol: 2   
#| echo: false
   N <- neighbors(g, "KI-ADI-MUNDI")
   a <- subgraph(g, c("KI-ADI-MUNDI", names(N)))
   V(a)$color <- as.factor(vertex_attr(a, "sex"))
   plot(a, 
     vertex.size=10, vertex.frame.color="lightgray", 
     vertex.label.dist=2, 
     layout = layout_as_star(a, center = "KI-ADI-MUNDI"),
     vertex.label.cex = 1.25, edge.color = "lightgray")

   N <- neighbors(g, "TAUN WE")
   b <- subgraph(g, c("TAUN WE", names(N)))
   V(b)$color <- as.factor(vertex_attr(b, "sex"))
   plot(b, 
     vertex.size=10, vertex.frame.color="lightgray", 
     vertex.label.dist=2, 
     layout = layout_as_star(b, center = "TAUN WE"),
     vertex.label.cex = 1.25, edge.color = "lightgray")
```

As we can see, Ki-Adi-Mundi has an ego network that combines maximum homophily and homogeneity with respect to gender (his ego network is composed of all men)--and therefore receives the minimum Q score--and Taun We has an ego network that combines maximum heterophily with maximum homogeneity of alters with respect to the same attribute (she has an all-men ego network), thus receiving the maximum Q score. 



