{
  "hash": "a119ccf48aff70b7f88b24b54d70a5b3",
  "result": {
    "markdown": "---\ntitle: \"Status and Prestige in Two Mode Networks\"\nexecute: \n  eval: true\n  echo: true\n  output: true\n  warning: false\n  message: false\nformat: \n   html:\n      code-line-numbers: true\n---\n\n\n## Two-Mode Networks as Prisms\n\nWe can use the same \"prismatic\" mode of status distribution to rank nodes in two-mode networks that we used in the [standard one-mode case](prestige.qmd). The difference is that in the one-mode case you gain status by connecting to entities of the same \"type\" as you (e.g., other people). In the two-mode case, your status reflects the status of the \"other type\" entities that you connect to. And vice versa. \n\nFor instance, if the two entities are people and groups [@breiger74], then people gain status by connecting to high status groups and groups gain status by connecting to high-status people. In other words, people distribute status points to the groups they belong to and groups distribute status points to the people that belong to them. \n\nWhen it comes to **eigenvector**-style measures, the neat idea is that *people are central if they belong to central groups and groups and central if their members are central people* (with people centrality defined by membership in central groups) can be effectively captured by these metrics [@bonacich91].\n\nFor this reason, measures of status and prestige are particularly applicable to two-mode networks. The reason is that the *reflective* principle behind these measures interacts nicely with the *duality* principle. \n\n## Bonacich Prestige in the Southern Women Data\n\nLet's see an example using the classic Southern Women dataset. We can load it from the trusty `networkdata` package, and extract the bi-adjacency matrix from the `igraph` object:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   library(networkdata)\n   library(igraph)\n   g <- southern_women\n   A <- as.matrix(as_biadjacency_matrix(g))\n```\n:::\n\n\nBelow is a quick function that plays a two-mode version of the status distribution game that we described in the [status and prestige lesson](prestige.qmd), and which is really just a modification of the one-mode HITS algorithm:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   tm.status <- function(A1, A2) {\n      y <- matrix(1/ncol(A1), ncol(A1), 1) #initial group status column vector set to a constant\n      delta <- 1 \n      k <- 0\n      while (delta > 1e-10) {\n         o.y <- y #old group status scores\n         x <- A1 %*% o.y #new people scores a function of people matrix and old group scores \n         x <- x/norm(x, type = \"E\") #normalizing new people status scores \n         y <- A2 %*% x #new group scores a function of group matrix and new people scores\n         y <- y/norm(y, type = \"E\") #normalizing new group status scores \n         if (k > 1) {\n            delta <- abs(sum(abs(y) - abs(o.y))) #diff. between new and old group status scores\n            }\n         k <- k + 1\n         }\n   return(list(p.s = x, g.s = y, k = k))\n   }\n```\n:::\n\n\nThe function goes like this:\n\n- Line 2 initializes the original status scores for each group stored in the `y` object, which are just set to $|G|^{-1}$ where $|G|$ is the number of groups (the number of columns of the bi-adjacency matrix $\\mathbf{A}$). \n- Line 3 initializes the $\\delta$ value, which determines when the `while` loop stops. Then, inside the `while` loop starting on line 5, we assign status scores to the people equal to the sum of the status scores of the groups they belong to in line 6, which is just $\\mathbf{A}$ post-multiplied by the group status vector $\\mathbf{y}$, then we normalize the people status score vector in line 8 using the Euclidean norm. \n- In line 9 we calculate the new group status vector, which, for each group, is given by the sum of the status scores of the people that belong them that we computed in line 7. \n- Finally, we normalize the new  group status scores in line 13 and compute the difference between these new group scores and the old one to calculate $\\delta$. When $\\delta$ is small ($\\delta \\leq 10^{-10}$) the `while` loop stops as the old and new scores have achieved convergence.\n\nWe can now use the `tm.status` function to estimate the status scores for people and groups:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   tm.hits <- tm.status(A, t(A))\n```\n:::\n\n\nHere are the scores for the people:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   round(tm.hits$p.s/max(tm.hits$p.s), 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           [,1]\nEVELYN    0.903\nLAURA     0.834\nTHERESA   1.000\nBRENDA    0.845\nCHARLOTTE 0.454\nFRANCES   0.564\nELEANOR   0.616\nPEARL     0.486\nRUTH      0.637\nVERNE     0.589\nMYRNA     0.504\nKATHERINE 0.594\nSYLVIA    0.748\nNORA      0.712\nHELEN     0.542\nDOROTHY   0.355\nOLIVIA    0.188\nFLORA     0.188\n```\n:::\n:::\n\n\nAnd for the groups:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   round(tm.hits$g.s/max(tm.hits$g.s), 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       [,1]\n6/27  0.280\n3/2   0.297\n4/12  0.499\n9/26  0.347\n2/25  0.635\n5/19  0.647\n3/15  0.757\n9/16  1.000\n4/8   0.749\n6/10  0.336\n2/23  0.177\n4/7   0.400\n11/21 0.223\n8/3   0.223\n```\n:::\n:::\n\n\nHere, we can see that Theresa is the top person (attending the most central events) closely followed by Evelyn, with Flora and Nora toward the bottom. The event held at 9/16 is the top event (attended by the most central people).\n\nWhen we use the usual affiliation matrix `A` and its transpose `t(A)` as inputs, the `tm.status` function implements the biHITS algorithm described in @liao_etal14. One thing to note in this regard is that the biHITS algorithm is just a rediscovery of the two-mode prestige scoring described much earlier by @bonacich91. \n\nInterestingly as @bonacich91 noted in that paper, the eigenvector status scores can *also* be obtained by playing the one-mode version of the status game over the Breiger-style one-mode projections of the two-mode network. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n   status1 <- function(w) {\n      x <- rep(1, nrow(w)) #initial status vector set to all ones of length equal to the number of nodes\n      d <- 1 #initial delta\n      k <- 0 #initializing counter\n      while (d > 1e-10) {\n          o.x <- x #old status scores\n          x <- w %*% o.x #new scores a function of old scores and adjacency matrix\n          x <- x/norm(x, type = \"E\") #normalizing new status scores\n          d <- abs(sum(abs(x) - abs(o.x))) #delta between new and old scores\n          k <- k + 1 #incrementing while counter\n      }\n   return(as.vector(x))\n   }\n```\n:::\n\n\nTo see this, let's play the usual status game defined by the function `status1` over the one mode projections. For people this would be:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   p.s <- status1(A %*% t(A))\n   names(p.s) <- rownames(A)\n   round(p.s/max(p.s), 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   EVELYN     LAURA   THERESA    BRENDA CHARLOTTE   FRANCES   ELEANOR     PEARL \n    0.903     0.834     1.000     0.845     0.454     0.564     0.616     0.486 \n     RUTH     VERNE     MYRNA KATHERINE    SYLVIA      NORA     HELEN   DOROTHY \n    0.637     0.589     0.504     0.594     0.748     0.712     0.542     0.355 \n   OLIVIA     FLORA \n    0.188     0.188 \n```\n:::\n:::\n\n\nAnd for groups:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   g.s <- status1(t(A) %*% A)\n   names(g.s) <- colnames(A)\n   round(g.s/max(g.s), 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n 6/27   3/2  4/12  9/26  2/25  5/19  3/15  9/16   4/8  6/10  2/23   4/7 11/21 \n0.280 0.297 0.499 0.347 0.635 0.647 0.757 1.000 0.749 0.336 0.177 0.400 0.223 \n  8/3 \n0.223 \n```\n:::\n:::\n\n\nLo and behold, these are the same status scores we obtained via the biHITS approach. \n\nAlso like eigenvector style measures for two-mode networks, the iterative status game scores can be obtained as a solution to an linear algebra eigenvector problem involving the relevant matrices over which the game is played.\n\nIn the case of the two-mode eigenvector scores, as @bonacich91 also noted, it turns out they can be computed by figuring out the leading eigenvector (what our status game does for any matrix) of the Breiger projection matrices:\n\n$$\n\\lambda x = (\\mathbf{A}\\mathbf{A}^T)x\n$$\n\n$$\n\\lambda y = (\\mathbf{A}^T\\mathbf{A})y\n$$\n\nIn `R` we can do this using the `eigen` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   eig.p <- eigen(A %*% t(A))\n   eig.g <- eigen(t(A) %*% A)\n   p.s <- eig.p$vector[, 1] * -1\n   g.s <- eig.g$vector[, 1] * -1\n   names(p.s) <- rownames(A)\n   names(g.s) <- colnames(A)\n```\n:::\n\n\nAnd for the big reveal:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   round(p.s/max(p.s), 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   EVELYN     LAURA   THERESA    BRENDA CHARLOTTE   FRANCES   ELEANOR     PEARL \n    0.903     0.834     1.000     0.845     0.454     0.564     0.616     0.486 \n     RUTH     VERNE     MYRNA KATHERINE    SYLVIA      NORA     HELEN   DOROTHY \n    0.637     0.589     0.504     0.594     0.748     0.712     0.542     0.355 \n   OLIVIA     FLORA \n    0.188     0.188 \n```\n:::\n\n```{.r .cell-code}\n   round(g.s/max(g.s), 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n 6/27   3/2  4/12  9/26  2/25  5/19  3/15  9/16   4/8  6/10  2/23   4/7 11/21 \n0.280 0.297 0.499 0.347 0.635 0.647 0.757 1.000 0.749 0.336 0.177 0.400 0.223 \n  8/3 \n0.223 \n```\n:::\n:::\n\n\nNeat! These are the same scores we obtained by playing our status game on the affiliation matrix (biHITS) using `tm.status` or in the one-mode projection (Bonacich) using the `status1` function. \n\nThe scores are also readily interpretable: The most central people belong to the most central (largest membership) groups and the most central groups are the ones that attract the most central (highest activity) members. \n\n### Duality and Two-Mode Bonacich Prestige\n\nAnother way of thinking of the eigenvector status score of each node in this context is as a weighted sum of the eigenvector centralities on the nodes in the other mode they are connected to [@faust97, p. 170].^[Where the weight (for obscure technical reasons) is the inverse of the square root of the first eigenvalue obtained from the `eigen` analysis.] \n\nFor instance the unnormalized eigenvector status scores for persons and groups are:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   p.s\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   EVELYN     LAURA   THERESA    BRENDA CHARLOTTE   FRANCES   ELEANOR     PEARL \n0.3347340 0.3092247 0.3705636 0.3130088 0.1682137 0.2089673 0.2283461 0.1800298 \n     RUTH     VERNE     MYRNA KATHERINE    SYLVIA      NORA     HELEN   DOROTHY \n0.2360402 0.2183986 0.1867900 0.2202912 0.2771746 0.2639043 0.2006669 0.1314354 \n   OLIVIA     FLORA \n0.0695706 0.0695706 \n```\n:::\n\n```{.r .cell-code}\n   g.s\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      6/27        3/2       4/12       9/26       2/25       5/19       3/15 \n0.14194312 0.15047999 0.25285306 0.17599173 0.32173361 0.32761921 0.38350293 \n      9/16        4/8       6/10       2/23        4/7      11/21        8/3 \n0.50663271 0.37949240 0.17040087 0.08954622 0.20279505 0.11293095 0.11293095 \n```\n:::\n:::\n\n\nSo for any person, let's say {EVELYN}, their eigenvector centrality is equal to:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   sum(A[\"EVELYN\", ] * g.s) * 1/sqrt(eig.p$values[1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.334734\n```\n:::\n:::\n\n\nWhich is indeed Evelyn's Eigenvector score. \n\nThe same goes for the eigenvector score of groups, which are just a weighted sum of the Eigenvector centralities of the people who belong to them:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   sum(A[, \"6/27\"] * p.s) * 1/sqrt(eig.p$values[1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.1419431\n```\n:::\n:::\n\n\nWhich is indeed the eigenvector score for the event held on 6/27. \n\nDuality at work!\n\n## Two-Mode PageRank\n\nLike in the case of the usual eigenvector approach to calculating status, the distribution game in the function `tm.status` assumes that persons and groups distribute the same amount of status regardless of their own degree (which you recall for people is the number of memberships and for groups is the number of members). \n\nBut just like with regular PageRank for one-mode networks, we can change this assumption in the two-mode case by presuming that people get more status points to distribute when they belong to exclusive (smaller) groups, and groups get more status to distribute when their members are more selective in their affiliation behavior (they have a smaller number of memberships).\n\nTo do that, we create new versions of the affiliation matrix $\\mathbf{A}$ and its transpose $\\mathbf{A}^T$ normalized by the group and persons degrees (respectively). \n\nTo do this, imagine that $\\mathbf{D}_p$ is a matrix containing the *inverse* of the degrees of each person (number of memberships) along the diagonals. This matrix can be created in `R` as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   D.p <- diag(1/rowSums(A))\n   round(D.p, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13]\n [1,] 0.12 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0.00  0.00  0.00  0.00\n [2,] 0.00 0.14 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0.00  0.00  0.00  0.00\n [3,] 0.00 0.00 0.12 0.00 0.00 0.00 0.00 0.00 0.00  0.00  0.00  0.00  0.00\n [4,] 0.00 0.00 0.00 0.14 0.00 0.00 0.00 0.00 0.00  0.00  0.00  0.00  0.00\n [5,] 0.00 0.00 0.00 0.00 0.25 0.00 0.00 0.00 0.00  0.00  0.00  0.00  0.00\n [6,] 0.00 0.00 0.00 0.00 0.00 0.25 0.00 0.00 0.00  0.00  0.00  0.00  0.00\n [7,] 0.00 0.00 0.00 0.00 0.00 0.00 0.25 0.00 0.00  0.00  0.00  0.00  0.00\n [8,] 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.33 0.00  0.00  0.00  0.00  0.00\n [9,] 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.25  0.00  0.00  0.00  0.00\n[10,] 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0.25  0.00  0.00  0.00\n[11,] 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0.00  0.25  0.00  0.00\n[12,] 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0.00  0.00  0.17  0.00\n[13,] 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0.00  0.00  0.00  0.14\n[14,] 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0.00  0.00  0.00  0.00\n[15,] 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0.00  0.00  0.00  0.00\n[16,] 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0.00  0.00  0.00  0.00\n[17,] 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0.00  0.00  0.00  0.00\n[18,] 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0.00  0.00  0.00  0.00\n      [,14] [,15] [,16] [,17] [,18]\n [1,]  0.00   0.0   0.0   0.0   0.0\n [2,]  0.00   0.0   0.0   0.0   0.0\n [3,]  0.00   0.0   0.0   0.0   0.0\n [4,]  0.00   0.0   0.0   0.0   0.0\n [5,]  0.00   0.0   0.0   0.0   0.0\n [6,]  0.00   0.0   0.0   0.0   0.0\n [7,]  0.00   0.0   0.0   0.0   0.0\n [8,]  0.00   0.0   0.0   0.0   0.0\n [9,]  0.00   0.0   0.0   0.0   0.0\n[10,]  0.00   0.0   0.0   0.0   0.0\n[11,]  0.00   0.0   0.0   0.0   0.0\n[12,]  0.00   0.0   0.0   0.0   0.0\n[13,]  0.00   0.0   0.0   0.0   0.0\n[14,]  0.12   0.0   0.0   0.0   0.0\n[15,]  0.00   0.2   0.0   0.0   0.0\n[16,]  0.00   0.0   0.5   0.0   0.0\n[17,]  0.00   0.0   0.0   0.5   0.0\n[18,]  0.00   0.0   0.0   0.0   0.5\n```\n:::\n:::\n\n\nRecalling that the row sums of $\\mathbf{A}$ give us the person degrees.\n\nAnd then we do the same for groups by creating a matrix $\\mathbf{D}_g$ containing the *inverse* of the degrees of each group (number of members) along the diagonals.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   D.g <- diag(1/colSums(A))\n   round(D.g, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13]\n [1,] 0.33 0.00 0.00 0.00 0.00 0.00  0.0 0.00 0.00   0.0  0.00  0.00  0.00\n [2,] 0.00 0.33 0.00 0.00 0.00 0.00  0.0 0.00 0.00   0.0  0.00  0.00  0.00\n [3,] 0.00 0.00 0.17 0.00 0.00 0.00  0.0 0.00 0.00   0.0  0.00  0.00  0.00\n [4,] 0.00 0.00 0.00 0.25 0.00 0.00  0.0 0.00 0.00   0.0  0.00  0.00  0.00\n [5,] 0.00 0.00 0.00 0.00 0.12 0.00  0.0 0.00 0.00   0.0  0.00  0.00  0.00\n [6,] 0.00 0.00 0.00 0.00 0.00 0.12  0.0 0.00 0.00   0.0  0.00  0.00  0.00\n [7,] 0.00 0.00 0.00 0.00 0.00 0.00  0.1 0.00 0.00   0.0  0.00  0.00  0.00\n [8,] 0.00 0.00 0.00 0.00 0.00 0.00  0.0 0.07 0.00   0.0  0.00  0.00  0.00\n [9,] 0.00 0.00 0.00 0.00 0.00 0.00  0.0 0.00 0.08   0.0  0.00  0.00  0.00\n[10,] 0.00 0.00 0.00 0.00 0.00 0.00  0.0 0.00 0.00   0.2  0.00  0.00  0.00\n[11,] 0.00 0.00 0.00 0.00 0.00 0.00  0.0 0.00 0.00   0.0  0.25  0.00  0.00\n[12,] 0.00 0.00 0.00 0.00 0.00 0.00  0.0 0.00 0.00   0.0  0.00  0.17  0.00\n[13,] 0.00 0.00 0.00 0.00 0.00 0.00  0.0 0.00 0.00   0.0  0.00  0.00  0.33\n[14,] 0.00 0.00 0.00 0.00 0.00 0.00  0.0 0.00 0.00   0.0  0.00  0.00  0.00\n      [,14]\n [1,]  0.00\n [2,]  0.00\n [3,]  0.00\n [4,]  0.00\n [5,]  0.00\n [6,]  0.00\n [7,]  0.00\n [8,]  0.00\n [9,]  0.00\n[10,]  0.00\n[11,]  0.00\n[12,]  0.00\n[13,]  0.00\n[14,]  0.33\n```\n:::\n:::\n\n\nRecalling that the column sums of $\\mathbf{A}$ give us the group degrees.\n\nNow we can construct degree-normalized versions of the original bi-adjacency matrix and its transpose like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   P.n <- A %*% D.g \n   colnames(P.n) <- colnames(A)\n   G.n <- t(A) %*% D.p\n   colnames(G.n) <- rownames(A)\n```\n:::\n\n\nLet's see what's in the matrix `P.n`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   round(P.n, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          6/27  3/2 4/12 9/26 2/25 5/19 3/15 9/16  4/8 6/10 2/23  4/7 11/21\nEVELYN    0.33 0.33 0.17 0.25 0.12 0.12  0.0 0.07 0.08  0.0 0.00 0.00  0.00\nLAURA     0.33 0.33 0.17 0.00 0.12 0.12  0.1 0.07 0.00  0.0 0.00 0.00  0.00\nTHERESA   0.00 0.33 0.17 0.25 0.12 0.12  0.1 0.07 0.08  0.0 0.00 0.00  0.00\nBRENDA    0.33 0.00 0.17 0.25 0.12 0.12  0.1 0.07 0.00  0.0 0.00 0.00  0.00\nCHARLOTTE 0.00 0.00 0.17 0.25 0.12 0.00  0.1 0.00 0.00  0.0 0.00 0.00  0.00\nFRANCES   0.00 0.00 0.17 0.00 0.12 0.12  0.0 0.07 0.00  0.0 0.00 0.00  0.00\nELEANOR   0.00 0.00 0.00 0.00 0.12 0.12  0.1 0.07 0.00  0.0 0.00 0.00  0.00\nPEARL     0.00 0.00 0.00 0.00 0.00 0.12  0.0 0.07 0.08  0.0 0.00 0.00  0.00\nRUTH      0.00 0.00 0.00 0.00 0.12 0.00  0.1 0.07 0.08  0.0 0.00 0.00  0.00\nVERNE     0.00 0.00 0.00 0.00 0.00 0.00  0.1 0.07 0.08  0.0 0.00 0.17  0.00\nMYRNA     0.00 0.00 0.00 0.00 0.00 0.00  0.0 0.07 0.08  0.2 0.00 0.17  0.00\nKATHERINE 0.00 0.00 0.00 0.00 0.00 0.00  0.0 0.07 0.08  0.2 0.00 0.17  0.33\nSYLVIA    0.00 0.00 0.00 0.00 0.00 0.00  0.1 0.07 0.08  0.2 0.00 0.17  0.33\nNORA      0.00 0.00 0.00 0.00 0.00 0.12  0.1 0.00 0.08  0.2 0.25 0.17  0.33\nHELEN     0.00 0.00 0.00 0.00 0.00 0.00  0.1 0.07 0.00  0.2 0.25 0.17  0.00\nDOROTHY   0.00 0.00 0.00 0.00 0.00 0.00  0.0 0.07 0.08  0.0 0.00 0.00  0.00\nOLIVIA    0.00 0.00 0.00 0.00 0.00 0.00  0.0 0.00 0.08  0.0 0.25 0.00  0.00\nFLORA     0.00 0.00 0.00 0.00 0.00 0.00  0.0 0.00 0.08  0.0 0.25 0.00  0.00\n           8/3\nEVELYN    0.00\nLAURA     0.00\nTHERESA   0.00\nBRENDA    0.00\nCHARLOTTE 0.00\nFRANCES   0.00\nELEANOR   0.00\nPEARL     0.00\nRUTH      0.00\nVERNE     0.00\nMYRNA     0.00\nKATHERINE 0.33\nSYLVIA    0.33\nNORA      0.33\nHELEN     0.00\nDOROTHY   0.00\nOLIVIA    0.00\nFLORA     0.00\n```\n:::\n:::\n\n\nThe `P.n` matrix is of the same dimensions as the original affiliation matrix `A`. However, the ${ij}^{th}$ cell is now equal to $1/k_j$ where $k_j$ is the number of members of group $j$. That means that if group $j$ has a lot of members then the ${ij}^{th}$ cell will contain a small number (as in column in the non-zero entries in the column corresponding to event `9-16`) but when the group is small, the ${ij}^{th}$ cell will contain a bigger number (as in the non-zero entries in the column corresponding to event `11-21`). This means the people who belong to smaller groups will have more centrality points to distribute. \n\nThe same goes for groups, as we can see by checking out the `G.n` matrix:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   round(G.n, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      EVELYN LAURA THERESA BRENDA CHARLOTTE FRANCES ELEANOR PEARL RUTH VERNE\n6/27    0.12  0.14    0.00   0.14      0.00    0.00    0.00  0.00 0.00  0.00\n3/2     0.12  0.14    0.12   0.00      0.00    0.00    0.00  0.00 0.00  0.00\n4/12    0.12  0.14    0.12   0.14      0.25    0.25    0.00  0.00 0.00  0.00\n9/26    0.12  0.00    0.12   0.14      0.25    0.00    0.00  0.00 0.00  0.00\n2/25    0.12  0.14    0.12   0.14      0.25    0.25    0.25  0.00 0.25  0.00\n5/19    0.12  0.14    0.12   0.14      0.00    0.25    0.25  0.33 0.00  0.00\n3/15    0.00  0.14    0.12   0.14      0.25    0.00    0.25  0.00 0.25  0.25\n9/16    0.12  0.14    0.12   0.14      0.00    0.25    0.25  0.33 0.25  0.25\n4/8     0.12  0.00    0.12   0.00      0.00    0.00    0.00  0.33 0.25  0.25\n6/10    0.00  0.00    0.00   0.00      0.00    0.00    0.00  0.00 0.00  0.00\n2/23    0.00  0.00    0.00   0.00      0.00    0.00    0.00  0.00 0.00  0.00\n4/7     0.00  0.00    0.00   0.00      0.00    0.00    0.00  0.00 0.00  0.25\n11/21   0.00  0.00    0.00   0.00      0.00    0.00    0.00  0.00 0.00  0.00\n8/3     0.00  0.00    0.00   0.00      0.00    0.00    0.00  0.00 0.00  0.00\n      MYRNA KATHERINE SYLVIA NORA HELEN DOROTHY OLIVIA FLORA\n6/27   0.00      0.00   0.00 0.00   0.0     0.0    0.0   0.0\n3/2    0.00      0.00   0.00 0.00   0.0     0.0    0.0   0.0\n4/12   0.00      0.00   0.00 0.00   0.0     0.0    0.0   0.0\n9/26   0.00      0.00   0.00 0.00   0.0     0.0    0.0   0.0\n2/25   0.00      0.00   0.00 0.00   0.0     0.0    0.0   0.0\n5/19   0.00      0.00   0.00 0.12   0.0     0.0    0.0   0.0\n3/15   0.00      0.00   0.14 0.12   0.2     0.0    0.0   0.0\n9/16   0.25      0.17   0.14 0.00   0.2     0.5    0.0   0.0\n4/8    0.25      0.17   0.14 0.12   0.0     0.5    0.5   0.5\n6/10   0.25      0.17   0.14 0.12   0.2     0.0    0.0   0.0\n2/23   0.00      0.00   0.00 0.12   0.2     0.0    0.5   0.5\n4/7    0.25      0.17   0.14 0.12   0.2     0.0    0.0   0.0\n11/21  0.00      0.17   0.14 0.12   0.0     0.0    0.0   0.0\n8/3    0.00      0.17   0.14 0.12   0.0     0.0    0.0   0.0\n```\n:::\n:::\n\n\nNote that both matrices `P.n` and `G.n` are **column stochastic** which means that its columns sum to one. We can check for this property as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   colSums(P.n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n 6/27   3/2  4/12  9/26  2/25  5/19  3/15  9/16   4/8  6/10  2/23   4/7 11/21 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  8/3 \n    1 \n```\n:::\n\n```{.r .cell-code}\n   colSums(G.n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   EVELYN     LAURA   THERESA    BRENDA CHARLOTTE   FRANCES   ELEANOR     PEARL \n        1         1         1         1         1         1         1         1 \n     RUTH     VERNE     MYRNA KATHERINE    SYLVIA      NORA     HELEN   DOROTHY \n        1         1         1         1         1         1         1         1 \n   OLIVIA     FLORA \n        1         1 \n```\n:::\n:::\n\n\nSo now, to calculate the two-mode PageRank status score, we just play our two-mode status game on these matrices: \n\n\n::: {.cell}\n\n```{.r .cell-code}\n   tm.pr <- tm.status(P.n, G.n)\n```\n:::\n\n\nNote that because the bi-adjacency matrices that go into the `tm.status` function are already normalized, we can set the `norm` argument of the function to `FALSE`.\n\nHere are the resulting scores for the people:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   round(tm.pr$p.s/max(tm.pr$p.s), 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           [,1]\nEVELYN    1.000\nLAURA     0.875\nTHERESA   1.000\nBRENDA    0.875\nCHARLOTTE 0.500\nFRANCES   0.500\nELEANOR   0.500\nPEARL     0.375\nRUTH      0.500\nVERNE     0.500\nMYRNA     0.500\nKATHERINE 0.750\nSYLVIA    0.875\nNORA      1.000\nHELEN     0.625\nDOROTHY   0.250\nOLIVIA    0.250\nFLORA     0.250\n```\n:::\n:::\n\n\nAnd for the groups:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   round(tm.pr$g.s/max(tm.pr$g.s), 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       [,1]\n6/27  0.214\n3/2   0.214\n4/12  0.429\n9/26  0.286\n2/25  0.571\n5/19  0.571\n3/15  0.714\n9/16  1.000\n4/8   0.857\n6/10  0.357\n2/23  0.286\n4/7   0.429\n11/21 0.214\n8/3   0.214\n```\n:::\n:::\n\n\nThe resulting scores are the same ones returned by the \"co-HITS\" algorithm of @deng_etal09. \n\nOn this ranking, the top persons are Theresa and Nora (who wasn't as highly ranked according to the Bonacich prestige) and Dorothy, Olivia, and Flora are the least prestigious. The top ranked event is the one that took place on 9/16. \n\n## Double Normalized Two-Mode PageRank\n\nRecall that the main reason for using the PageRank normalization in the two-mode case (and preferring the PageRank scoring over the eigenvector scoring) is to give more status points to discerning people, so that people who belong to more exclusive clubs distribute more centrality in the system. So to do that we divided each person's centrality points according to the size of the group they belong to, so that evenly gets 0.33 centrality points for attending event 6/27 because that event was attended by only three people, which is more than she gets for attending event 4/8 which was attended by twelve people (and the same for events).\n\nHowever, the PageRank centrality rankings can still be affected by the sheer *number* of events attended by a person (or the sheer number of members of a group) even if that person is not particularly selective. Thus, a person who attends a whole bunch of not-very selective (well-attended) events still contributes as much centrality to the system as a person who attends fewer but more selective events. \n\nTo do that, it would be useful to come up with versions of `P.n` and `G.n` that normalize (for persons) by the exclusivity of the groups they attend *and* by the number of events they go to, so as not to give an advantage to those who attend a lot of events. In the same way, it would be also be useful normalize (for groups) by the discernment of the people who are its members *and* by their number of members they go to, so as not to give an advantage to well-attended events.\n\nIn the case of `P.n` we can do that by pre-multiplying this matrix, which already adjusts for group size by `D.p` which is the diagonal matrix containing each person's number of memberships:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   P.n2 <- D.p %*% P.n\n   rownames(P.n2) <- rownames(A)\n```\n:::\n\n\nLet's see what's inside the new `P.n2` matrix:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   round(P.n2, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          6/27  3/2 4/12 9/26 2/25 5/19 3/15 9/16  4/8 6/10 2/23  4/7 11/21\nEVELYN    0.04 0.04 0.02 0.03 0.02 0.02 0.00 0.01 0.01 0.00 0.00 0.00  0.00\nLAURA     0.05 0.05 0.02 0.00 0.02 0.02 0.01 0.01 0.00 0.00 0.00 0.00  0.00\nTHERESA   0.00 0.04 0.02 0.03 0.02 0.02 0.01 0.01 0.01 0.00 0.00 0.00  0.00\nBRENDA    0.05 0.00 0.02 0.04 0.02 0.02 0.01 0.01 0.00 0.00 0.00 0.00  0.00\nCHARLOTTE 0.00 0.00 0.04 0.06 0.03 0.00 0.03 0.00 0.00 0.00 0.00 0.00  0.00\nFRANCES   0.00 0.00 0.04 0.00 0.03 0.03 0.00 0.02 0.00 0.00 0.00 0.00  0.00\nELEANOR   0.00 0.00 0.00 0.00 0.03 0.03 0.03 0.02 0.00 0.00 0.00 0.00  0.00\nPEARL     0.00 0.00 0.00 0.00 0.00 0.04 0.00 0.02 0.03 0.00 0.00 0.00  0.00\nRUTH      0.00 0.00 0.00 0.00 0.03 0.00 0.03 0.02 0.02 0.00 0.00 0.00  0.00\nVERNE     0.00 0.00 0.00 0.00 0.00 0.00 0.03 0.02 0.02 0.00 0.00 0.04  0.00\nMYRNA     0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.02 0.02 0.05 0.00 0.04  0.00\nKATHERINE 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.01 0.01 0.03 0.00 0.03  0.06\nSYLVIA    0.00 0.00 0.00 0.00 0.00 0.00 0.01 0.01 0.01 0.03 0.00 0.02  0.05\nNORA      0.00 0.00 0.00 0.00 0.00 0.02 0.01 0.00 0.01 0.03 0.03 0.02  0.04\nHELEN     0.00 0.00 0.00 0.00 0.00 0.00 0.02 0.01 0.00 0.04 0.05 0.03  0.00\nDOROTHY   0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.04 0.04 0.00 0.00 0.00  0.00\nOLIVIA    0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.04 0.00 0.12 0.00  0.00\nFLORA     0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.04 0.00 0.12 0.00  0.00\n           8/3\nEVELYN    0.00\nLAURA     0.00\nTHERESA   0.00\nBRENDA    0.00\nCHARLOTTE 0.00\nFRANCES   0.00\nELEANOR   0.00\nPEARL     0.00\nRUTH      0.00\nVERNE     0.00\nMYRNA     0.00\nKATHERINE 0.06\nSYLVIA    0.05\nNORA      0.04\nHELEN     0.00\nDOROTHY   0.00\nOLIVIA    0.00\nFLORA     0.00\n```\n:::\n:::\n\n\nWe can see that now, people with lots of memberships (like Evelyn) get their centrality points reduced relative to people with not that many memberships like Charlotte. \n\nThis is easy to see if we compare the row sums of the two matrices, which give us the total amount of centrality points each person has to distribute:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   rowSums(P.n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   EVELYN     LAURA   THERESA    BRENDA CHARLOTTE   FRANCES   ELEANOR     PEARL \n1.4880952 1.2547619 1.2547619 1.1714286 0.6416667 0.4880952 0.4214286 0.2797619 \n     RUTH     VERNE     MYRNA KATHERINE    SYLVIA      NORA     HELEN   DOROTHY \n0.3797619 0.4214286 0.5214286 1.1880952 1.2880952 1.5916667 0.7880952 0.1547619 \n   OLIVIA     FLORA \n0.3333333 0.3333333 \n```\n:::\n\n```{.r .cell-code}\n   rowSums(P.n2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    EVELYN      LAURA    THERESA     BRENDA  CHARLOTTE    FRANCES    ELEANOR \n0.18601190 0.17925170 0.15684524 0.16734694 0.16041667 0.12202381 0.10535714 \n     PEARL       RUTH      VERNE      MYRNA  KATHERINE     SYLVIA       NORA \n0.09325397 0.09494048 0.10535714 0.13035714 0.19801587 0.18401361 0.19895833 \n     HELEN    DOROTHY     OLIVIA      FLORA \n0.15761905 0.07738095 0.16666667 0.16666667 \n```\n:::\n:::\n\n\nNote that while in the original `P.n` matrix Evelyn has way more centrality points to distribute than Charlotte (a ratio of 2.32), this discrepancy is much smaller in the new `P.n2` double-normalized matrix (a ratio of 1.16). \n\nNow to compute our double-normalized PageRank status scores, we just play the status game on this new matrix and its transpose:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   tm.bgrm <- tm.status(P.n2, t(P.n2))\n```\n:::\n\nWhich implements the \"BGRM\" algorithm of @rui_etal07 [589, eq. 8].^[The acronym stands for \"Bipartite Graph Reinforcement Model.\"] \n\nHere are the resulting scores for the people:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   round(tm.bgrm$p.s/max(tm.bgrm$p.s), 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           [,1]\nEVELYN    0.081\nLAURA     0.061\nTHERESA   0.081\nBRENDA    0.059\nCHARLOTTE 0.055\nFRANCES   0.050\nELEANOR   0.057\nPEARL     0.116\nRUTH      0.100\nVERNE     0.141\nMYRNA     0.188\nKATHERINE 0.235\nSYLVIA    0.212\nNORA      0.407\nHELEN     0.471\nDOROTHY   0.145\nOLIVIA    1.000\nFLORA     1.000\n```\n:::\n:::\n\n\nAnd for the groups:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   round(tm.bgrm$g.s/max(tm.bgrm$g.s), 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       [,1]\n6/27  0.032\n3/2   0.034\n4/12  0.037\n9/26  0.037\n2/25  0.045\n5/19  0.067\n3/15  0.102\n9/16  0.111\n4/8   0.396\n6/10  0.183\n2/23  1.000\n4/7   0.173\n11/21 0.140\n8/3   0.140\n```\n:::\n:::\n\n\nWe can see that the most highly ranked women are now Olivia and Flora (in contrast to Evelyn, Theresa, and Nora in the standard PageRank scores), who used to be toward the bottom when using the traditional Bonacich prestige or PageRank scoring. In the same way, the top event is now the one held on 2/23, which wasn't particularly distinguished using the other ranking algorithms. \n\nA summary of the three ranking models goes as follows:\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-hover table-condensed table-responsive\" style=\"margin-left: auto; margin-right: auto;\">\n<caption>Person Prestige Scores Ordered by Degree</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\">   </th>\n   <th style=\"text-align:center;\"> hits </th>\n   <th style=\"text-align:center;\"> pr </th>\n   <th style=\"text-align:center;\"> bgrm </th>\n   <th style=\"text-align:center;\"> k </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> EVELYN </td>\n   <td style=\"text-align:center;\"> 0.903 </td>\n   <td style=\"text-align:center;\"> 1.000 </td>\n   <td style=\"text-align:center;\"> 0.081 </td>\n   <td style=\"text-align:center;\"> 8 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> THERESA </td>\n   <td style=\"text-align:center;\"> 1.000 </td>\n   <td style=\"text-align:center;\"> 1.000 </td>\n   <td style=\"text-align:center;\"> 0.081 </td>\n   <td style=\"text-align:center;\"> 8 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> NORA </td>\n   <td style=\"text-align:center;\"> 0.712 </td>\n   <td style=\"text-align:center;\"> 1.000 </td>\n   <td style=\"text-align:center;\"> 0.407 </td>\n   <td style=\"text-align:center;\"> 8 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> LAURA </td>\n   <td style=\"text-align:center;\"> 0.834 </td>\n   <td style=\"text-align:center;\"> 0.875 </td>\n   <td style=\"text-align:center;\"> 0.061 </td>\n   <td style=\"text-align:center;\"> 7 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> BRENDA </td>\n   <td style=\"text-align:center;\"> 0.845 </td>\n   <td style=\"text-align:center;\"> 0.875 </td>\n   <td style=\"text-align:center;\"> 0.059 </td>\n   <td style=\"text-align:center;\"> 7 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> SYLVIA </td>\n   <td style=\"text-align:center;\"> 0.748 </td>\n   <td style=\"text-align:center;\"> 0.875 </td>\n   <td style=\"text-align:center;\"> 0.212 </td>\n   <td style=\"text-align:center;\"> 7 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> KATHERINE </td>\n   <td style=\"text-align:center;\"> 0.594 </td>\n   <td style=\"text-align:center;\"> 0.750 </td>\n   <td style=\"text-align:center;\"> 0.235 </td>\n   <td style=\"text-align:center;\"> 6 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> HELEN </td>\n   <td style=\"text-align:center;\"> 0.542 </td>\n   <td style=\"text-align:center;\"> 0.625 </td>\n   <td style=\"text-align:center;\"> 0.471 </td>\n   <td style=\"text-align:center;\"> 5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> CHARLOTTE </td>\n   <td style=\"text-align:center;\"> 0.454 </td>\n   <td style=\"text-align:center;\"> 0.500 </td>\n   <td style=\"text-align:center;\"> 0.055 </td>\n   <td style=\"text-align:center;\"> 4 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> FRANCES </td>\n   <td style=\"text-align:center;\"> 0.564 </td>\n   <td style=\"text-align:center;\"> 0.500 </td>\n   <td style=\"text-align:center;\"> 0.050 </td>\n   <td style=\"text-align:center;\"> 4 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> ELEANOR </td>\n   <td style=\"text-align:center;\"> 0.616 </td>\n   <td style=\"text-align:center;\"> 0.500 </td>\n   <td style=\"text-align:center;\"> 0.057 </td>\n   <td style=\"text-align:center;\"> 4 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> RUTH </td>\n   <td style=\"text-align:center;\"> 0.637 </td>\n   <td style=\"text-align:center;\"> 0.500 </td>\n   <td style=\"text-align:center;\"> 0.100 </td>\n   <td style=\"text-align:center;\"> 4 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> VERNE </td>\n   <td style=\"text-align:center;\"> 0.589 </td>\n   <td style=\"text-align:center;\"> 0.500 </td>\n   <td style=\"text-align:center;\"> 0.141 </td>\n   <td style=\"text-align:center;\"> 4 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> MYRNA </td>\n   <td style=\"text-align:center;\"> 0.504 </td>\n   <td style=\"text-align:center;\"> 0.500 </td>\n   <td style=\"text-align:center;\"> 0.188 </td>\n   <td style=\"text-align:center;\"> 4 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> PEARL </td>\n   <td style=\"text-align:center;\"> 0.486 </td>\n   <td style=\"text-align:center;\"> 0.375 </td>\n   <td style=\"text-align:center;\"> 0.116 </td>\n   <td style=\"text-align:center;\"> 3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> DOROTHY </td>\n   <td style=\"text-align:center;\"> 0.355 </td>\n   <td style=\"text-align:center;\"> 0.250 </td>\n   <td style=\"text-align:center;\"> 0.145 </td>\n   <td style=\"text-align:center;\"> 2 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> OLIVIA </td>\n   <td style=\"text-align:center;\"> 0.188 </td>\n   <td style=\"text-align:center;\"> 0.250 </td>\n   <td style=\"text-align:center;\"> 1.000 </td>\n   <td style=\"text-align:center;\"> 2 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> FLORA </td>\n   <td style=\"text-align:center;\"> 0.188 </td>\n   <td style=\"text-align:center;\"> 0.250 </td>\n   <td style=\"text-align:center;\"> 1.000 </td>\n   <td style=\"text-align:center;\"> 2 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-hover table-condensed table-responsive\" style=\"margin-left: auto; margin-right: auto;\">\n<caption>Group Prestige Scores Ordered by Degree</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\">   </th>\n   <th style=\"text-align:center;\"> hits </th>\n   <th style=\"text-align:center;\"> pr </th>\n   <th style=\"text-align:center;\"> bgrm </th>\n   <th style=\"text-align:center;\"> k </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> 9/16 </td>\n   <td style=\"text-align:center;\"> 1.000 </td>\n   <td style=\"text-align:center;\"> 1.000 </td>\n   <td style=\"text-align:center;\"> 0.111 </td>\n   <td style=\"text-align:center;\"> 14 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> 4/8 </td>\n   <td style=\"text-align:center;\"> 0.749 </td>\n   <td style=\"text-align:center;\"> 0.857 </td>\n   <td style=\"text-align:center;\"> 0.396 </td>\n   <td style=\"text-align:center;\"> 12 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> 3/15 </td>\n   <td style=\"text-align:center;\"> 0.757 </td>\n   <td style=\"text-align:center;\"> 0.714 </td>\n   <td style=\"text-align:center;\"> 0.102 </td>\n   <td style=\"text-align:center;\"> 10 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> 2/25 </td>\n   <td style=\"text-align:center;\"> 0.635 </td>\n   <td style=\"text-align:center;\"> 0.571 </td>\n   <td style=\"text-align:center;\"> 0.045 </td>\n   <td style=\"text-align:center;\"> 8 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> 5/19 </td>\n   <td style=\"text-align:center;\"> 0.647 </td>\n   <td style=\"text-align:center;\"> 0.571 </td>\n   <td style=\"text-align:center;\"> 0.067 </td>\n   <td style=\"text-align:center;\"> 8 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> 4/12 </td>\n   <td style=\"text-align:center;\"> 0.499 </td>\n   <td style=\"text-align:center;\"> 0.429 </td>\n   <td style=\"text-align:center;\"> 0.037 </td>\n   <td style=\"text-align:center;\"> 6 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> 4/7 </td>\n   <td style=\"text-align:center;\"> 0.400 </td>\n   <td style=\"text-align:center;\"> 0.429 </td>\n   <td style=\"text-align:center;\"> 0.173 </td>\n   <td style=\"text-align:center;\"> 6 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> 6/10 </td>\n   <td style=\"text-align:center;\"> 0.336 </td>\n   <td style=\"text-align:center;\"> 0.357 </td>\n   <td style=\"text-align:center;\"> 0.183 </td>\n   <td style=\"text-align:center;\"> 5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> 9/26 </td>\n   <td style=\"text-align:center;\"> 0.347 </td>\n   <td style=\"text-align:center;\"> 0.286 </td>\n   <td style=\"text-align:center;\"> 0.037 </td>\n   <td style=\"text-align:center;\"> 4 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> 2/23 </td>\n   <td style=\"text-align:center;\"> 0.177 </td>\n   <td style=\"text-align:center;\"> 0.286 </td>\n   <td style=\"text-align:center;\"> 1.000 </td>\n   <td style=\"text-align:center;\"> 4 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> 6/27 </td>\n   <td style=\"text-align:center;\"> 0.280 </td>\n   <td style=\"text-align:center;\"> 0.214 </td>\n   <td style=\"text-align:center;\"> 0.032 </td>\n   <td style=\"text-align:center;\"> 3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> 3/2 </td>\n   <td style=\"text-align:center;\"> 0.297 </td>\n   <td style=\"text-align:center;\"> 0.214 </td>\n   <td style=\"text-align:center;\"> 0.034 </td>\n   <td style=\"text-align:center;\"> 3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> 11/21 </td>\n   <td style=\"text-align:center;\"> 0.223 </td>\n   <td style=\"text-align:center;\"> 0.214 </td>\n   <td style=\"text-align:center;\"> 0.140 </td>\n   <td style=\"text-align:center;\"> 3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> 8/3 </td>\n   <td style=\"text-align:center;\"> 0.223 </td>\n   <td style=\"text-align:center;\"> 0.214 </td>\n   <td style=\"text-align:center;\"> 0.140 </td>\n   <td style=\"text-align:center;\"> 3 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n",
    "supporting": [
      "prestige-two-mode_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\r\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}