---
title: "Role Similarity Across Graphs"
execute: 
  eval: true
  echo: true
  output: true
  warning: false
  message: false
format: 
   html:
      code-line-numbers: true
---

Sometimes we may want to figure out how similar a given node's position in one social network is to that of another node in a *different* network. This calls for a method that could allow us to compare how similar a node in one graph is to *other nodes* in *another graph*. 

A particularly interesting version of this problem arises when we have information on the same set of nodes across different set of relations. In that case, we may be interested in answering the question as to whether nodes occupy similar or dissimilar positions across the networks defined by the different relations. 

@blondel_etal04 describe an approach that can help us make headway on this problem. They use a similar iterative procedure that we saw can be used to compute status scores from directed graphs (like PageRank and HITS) but this time to *compute similarity* scores between *pairs* of nodes *across* graphs. 

The idea, just like with the status scores, is that the two set of nodes in each graph start with the same set of similarity scores, and then we update them as we traverse the connectivity structure of the two graphs. 

So let's say the adjacency matrix of the first graph is $\mathbf{A}$ and that of the second graph is $\mathbf{B}$. The first graph has $n_A$ number of nodes and the corresponding quantity in the second graph is $n_B$ our target similarity matrix $\mathbf{Z}$, comparing the node sets in the two graphs, will therefore be of dimensions $n_B \times n_A$. 

We initialize $z_{ij}(0) = 1$ for all $i$ and $j$; that is, $\mathbf{Z}(0)$ is a matrix full of ones. At each time step subsequent to that, we fill up the $\mathbf{Z}$ matrix with new values according to:

$$ 
   \mathbf{Z}(t + 1) = \mathbf{B}\mathbf{Z(t)}\mathbf{A}^T + \mathbf{B}^T\mathbf{Z(t)}\mathbf{A}
$$

To ensure convergence, we then normalize the $\mathbf{Z}$ matrix after every update using our trusty Euclidean norm:

$$
\mathbf{Z}(t > 0) = \frac{\mathbf{Z}}{||\mathbf{Z}||_2}
$$

## Computing Node Similarities Across Different Graphs 

Let us see how this would work with real data. We will compare two subgraphs of the larger `law_advice` network [@lazega01] from the `networkdata` package. This is a directed *advice-seeking* network so a node goes *from* advisee to adviser. 

We create two subgraphs. One composed of older male partners (aged fifty or older) and the other composed of the women in the firm (both parterns and associates). They look lik this:

```{r}
#| echo: false
#| fig-width: 8
#| fig-height: 8
#| layout-ncol: 1
#| fig-subcap:
#|   - "Older Men Partners"
#|   - "Women Lawyers"
   library(networkdata)
   library(igraph)
   library(ggraph)
   set.seed(123)
   g <- subgraph(law_advice, which(V(law_advice)$status == 1))
   g1 <- subgraph(g, which(V(g)$gender == 1 & V(g)$age > 50))
   g2 <- subgraph(law_advice, which(V(law_advice)$gender == 2))
   set.seed(123)
   plot(g1, 
        edge.arrow.size=.5, 
        vertex.color="tan2", 
        vertex.size=6, vertex.frame.color="lightgray", 
        vertex.label.color="black", vertex.label.cex=1.25, 
        vertex.label.dist=1, edge.curved=0.2)
   
   plot(g2, 
        edge.arrow.size=.5, 
        vertex.color="tan2", 
        vertex.size=6, vertex.frame.color="lightgray", 
        vertex.label.color="black", vertex.label.cex=1.25, 
        vertex.label.dist=1, edge.curved=0.2)
```

A function to compute the **Blondel similarity** as described earlier can be written as:

```{r}
   blondel.sim <- function(A, B) {
      K <- matrix(1, nrow(B), nrow(A))
      if (is.null(rownames(A)) == TRUE) {
         rownames(A) <- 1:nrow(A)
         colnames(A) <- 1:nrow(A)
         }
      if (is.null(rownames(B)) == TRUE) {
         rownames(B) <- 1:nrow(B)
         colnames(B) <- 1:nrow(B)
         }
      k <- 1
      diff <- 1
      old.diff <- 2
      while (diff != old.diff | k %% 2 == 0) {
         old.diff <- diff
         K.old <- K
         K <- (B %*% K.old %*% t(A)) + (t(B) %*% K.old %*% A)
         K <- K/norm(K, type = "F")
         diff <- abs(sum(abs(K)) - sum(abs(K.old)))
         k <- k + 1
      }
   for (j in 1:ncol(K)) {
      K[, j] <- K[, j]/max(K[, j])
      }
   rownames(K) <- rownames(B)
   colnames(K) <- rownames(A)
   return(list(K = K, k = k, diff = diff))
   }
```

Which is modeled after our status game function but instead of computing a vector of scores we are populating a whole matrix!

The basic task is to figure out which nodes from the first matrix are most similar to which nodes from the second. That is, given these two networks can be identify actors who play similar roles in each?

And here are the results presented in tabular form:

```{r}
   library(kableExtra)
   A <- as.matrix(as_adjacency_matrix(g1))
   B <- as.matrix(as_adjacency_matrix(g2))
   K <- round(blondel.sim(A, B)[[1]], 2)
   kbl(K, align = "c", format = "html", row.names = TRUE) %>% 
      column_spec(1, bold = TRUE) %>% 
      kable_styling(full_width = TRUE,
                     bootstrap_options = c("hover", "condensed", "responsive"))
```

In the table each column is normalized by its maximum, so a 1.0 in that column tells us that that node (from the first network) is maximally similar to the corresponding row node (from the second network). 

For instance, node 5 in the women's lawyers graph (a highly central node in terms of being an adviser) is most similar to node 1 in the older men partner's graph (also a highly central node in terms of being an adviser). 

Node 9 in the women lawyer's graph, who's mostly an advise-seeker, is most similar to node 5 in the older men partner graph who's also an advise-seeker. So it looks like it works!

## Equivalence to HITS

One neat thing that @blondel_etal04 show is that we can also take a network and compare it to ideal-typical small graphs and get scores for how much each node in the observed network resembles each of the nodes in the hypothetical ideal-typical structure. 

More specifically, they show that if we can run their algorithm to compare any network to the following two-node graph:

```{r}
   g <- make_empty_graph(2)
   g <- add_edges(g, c(1,2))
   V(g)$name <- c("Hub", "Authority")
   plot(g, 
        edge.arrow.size=1, 
        vertex.color="tan2", 
        vertex.size=12, vertex.frame.color="lightgray", 
        vertex.label.color="black", vertex.label.cex=1.5, 
        vertex.label.dist=-3)
```

In which case, the result "similarity" scores, will be equivalent to the Hub and Authority scores! 

We can check that this is the case for the women's lawyers advice graph:

```{r}
   A <- as.matrix(as_adjacency_matrix(g))
   B <- as.matrix(as_adjacency_matrix(g2))
   K <- round(blondel.sim(A, B)[[1]], 4)
   tab <- cbind(K, Hub.Score = round(hits_scores(g2)$hub, 4), 
         Auth.Score = round(hits_scores(g2)$authority, 4))
   kbl(tab, align = "c", format = "html", row.names = TRUE) %>% 
      column_spec(1, bold = TRUE) %>% 
      kable_styling(full_width = TRUE,
                     bootstrap_options = c("hover", "condensed", "responsive"))
```

The first two columns are the scores using the function to compute the Blondel et al. similarity to each of the two nodes in the Hub/Authority micro-graph and the third and fourth columns are the scores we get from the `igraph` function `hits scores`, which as we can see, are identical. 

## Computing a Brokerage Score

Of course in a directed graph, there are more than two ideal typical "roles." In addition to "sender" (Hub) or "receiver" (Authority) we may also have "intermediaries" or "pass along" nodes. We can thus get an "intermediary" score for each node by comparing any network to the following three-node graph:

```{r}
   g <- make_empty_graph(3)
   g <- add_edges(g, c(1,2, 2,3))
   V(g)$name <- c("Hub", "Broker", "Authority")
   plot(g, 
        edge.arrow.size=1, 
        vertex.color="tan2", 
        vertex.size=12, vertex.frame.color="lightgray", 
        vertex.label.color="black", vertex.label.cex=1.5, 
        vertex.label.dist=2)
```

Here are the results for the women lawyers graph:

```{r}
   A <- as.matrix(as_adjacency_matrix(g))
   B <- as.matrix(as_adjacency_matrix(g2))
   K <- round(blondel.sim(A, B)[[1]], 4)
   kbl(K, align = "c", format = "html", row.names = TRUE) %>% 
      column_spec(1, bold = TRUE) %>% 
      kable_styling(full_width = TRUE,
                     bootstrap_options = c("hover", "condensed", "responsive"))
```

Columns one and three gives us versions of the Hub and Authority scores (respectively), but column two now gives us a "score" for how much the row node resembles and intermediary (or broker) in the network. We can see that the "purest" broker in the women's advice network is node 11. 

