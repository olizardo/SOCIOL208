---
title: "Two-Mode Networks"
execute: 
  eval: true
  echo: true
  output: true
  warning: false
  message: false
format: 
   html:
      code-line-numbers: true
---

## Two-Mode Networks

This handout deals with the network analysis of two-mode networks. Note that in the literature there is some terminological slippage. Two-mode networks are a type of social network. By definition two-mode networks can be represented using rectangular adjacency matrices (sometimes called **affiliation matrices** in sociology). 

In this case, two-mode networks fall under the general category of "two-mode data." Any data set that has information on two types of objects (e.g., people and variables) is two-mode data so two-mode networks are just a special case of two-mode data.

In this sense, a useful distinction, due to Borgatti & Everett, is useful. This is that between the "modes" and the "ways" of a data matrix. So most data matrices are two-ways, in that they have at least two dimensions (e.g., the row and column dimensions). 

But some data matrices (like the usual adjacency matrix in regular network data) only collect information on a single type of entity, so they are "one mode, two ways." But sometimes we have network data on two sets of objects, in which case, we use a data matrix that has "two-modes" (sets of nodes) *and* "two ways" (rows and columns).

So what makes a network a "two-mode network"? Well, a two-mode network is different from a regular network, because it has two sets of nodes not just one. So instead of $V$ now we have $V_1$ and $V_2$. Moreover, the edges in a two-mode network only go from nodes in one set to nodes in the other set; there are no within-node-set edges. 

## Bipartite Graphs

This restriction makes the graph that represents a two-mode network a special kind of graph called a **bipartite graph**. A graph is bipartite if the set of nodes in the graph can be divided into two groups, such that relations go from nodes in one set to nodes in the other set. 

Note that bipartite graphs can be be used to represent both two-mode and regular one mode networks, as long as the above condition holds. For instance, a dating network with 100% heterosexual people in it will yield a bipartite graph based on the dating relation, with men in one set and women on the other node set, even though it's a one-mode network. 

So whether or not a graph is bipartite is something you can check for. 

Let's see how that works. Let us load the most famous two-mode network data set (kind of the Drosophila of two-mode network analysis; one of the most repeatedly analyzed social structures in history: For a classic sampling of such analyses see [here](https://www.csc2.ncsu.edu/faculty/mpsingh/local/Social/f16/wrap/readings/Freeman-social-groups.pdf)) a network composed of eighteen women from the social elite of a tiny town in the south in the 1930s who attended fourteen social events [@breiger74]:

```{r}
   library(igraph)
   library(networkdata)
   g <- southern_women
```

Now we already know this is a bipartite graph. However, let's say you are new and you've never heard of these data. You can check whether the graph you loaded up is bipartite or not by using the `igraph` function `is_bipartite`:

```{r}
   is_bipartite(g)
```

Which returns `TRUE` as an answer. Had we loaded up any old non-bipartite graph, the answer would have been:

```{r}
   g.whatever <- movie_45
   is_bipartite(g.whatever)
```

Which makes sense because that's just a regular old graph. 

Note that if we check the bipartite graph object, it looks like any other `igraph` object:

```{r}
   g
```

But we can tell that the graph is a two-mode network because we have links starting with people with old lady names from the 1930s (which are also the names of a bunch of kids in middle school in 2024) and ending with events that have dates in them. So the (undirected) edge is $person-event$. 

The graph is undirected because the "membership" or "attendance" relation between a person and an organization/event doesn't have a natural directionality. 

Another way of checking the "bipartiteness" of a graph in `igraph` is by using the `bipartite_mapping` function. 

Let's see what it does:

```{r}
   bipartite_mapping(g)
```

This function takes the candidate bipartite graph as input and returns to objects: `res` is just a check to see if the graph is actually bipartite (`TRUE` in this case), `type` is a logical vector of dimensions $M + N$ (where $M$ is the number of nodes in the person set and $N$ is the number of nodes in the event set) dividing the nodes into two groups. Here people get `FALSE` and events get `TRUE`, but this designations are arbitrary (a kind of dummy coding; `FALSE` = 0 and `TRUE` = 1). 

We can add this as a node attribute to our graph so that way we know which node is in which set:

```{r}
   V(g)$type <- bipartite_mapping(g)$type
```

## The Bi-Adjacency (Affiliation) Matrix

Once you have your bipartite graph loaded up, you may want (if the graph is small enough) to check out the graph's affiliation matrix $A$. 

This works just like before, except that now we use the `as_biadjacency_matrix` function:

```{r}
   A <- as.matrix(as_biadjacency_matrix(g))
   A
```

In this matrix we list one set of nodes in the rows and the other set is in the columns. Each cell $a_{ij} = 1$ if row node $i$ is affiliated with column node $j$, otherwise $a_{ij} = 0$.

Note that if we were to use the regular `as_adjacency_matrix` function on a bipartite graph, we get a curious version of the adjacency matrix:

```{r}
   B <- as.matrix(as_adjacency_matrix(g))
   B
```

This matrix is of dimensions $(M + N) \times (M + N)$, which is $(18 + 14) \times (18 + 14) = 32 \times 32$ in the Southern Women data. 

The adjacency matrix of a bipartite graph necessarily has to big "blocks" of zeroes in it corresponding to where the links between nodes in the same set would be (but aren't because this is a two-mode network). 

So the regular adjacency matrix of a bipartite graph $\mathbf{B}$ has the following form [@fouss_etal16, p. 12]:

$$
\mathbf{B} = \left[
\begin{matrix}
\mathbf{O}_{M \times M} & \mathbf{A}_{M \times N} \\
\mathbf{A}^T_{N \times M} & \mathbf{O}_{N \times N}
\end{matrix}
\right]
$$

Where $\mathbf{O}$ is just the all zeros matrix of the relevant dimensions, and $\mathbf{A}$ is the bi-adjacency (affiliation) matrix as defined earlier. 

## Basic two-mode Network Statistics

We can calculate some basic network statistics from the affiliation (bi-adjacency) matrix. We have two number of nodes to calculate, but only one quantity for the number of edges.

The number of nodes on the people side $N$ is just the number of rows of $A$:

```{r}
   nrow(A)
```

And the number of events/groups $M$ is just the number of columns:

```{r}
   ncol(A)
```

Finally, the number of edges $E$ is just the sum of all the entries of $A$:

```{r}
   sum(A)
```

Note that if you were to use the `igraph` function `vcount` on the original graph object, you get the wrong answer:

```{r}
   vcount(g)
```

That's because `vcount` is working with the $32 \times 32$ regular adjacency matrix, not the bi-adjacency matrix. Here, `vcount` is returning the *total* number of nodes in the graph summing across the two sets, which is $M + N$. 

If you wanted to get the right answer for each set of edges from the regular `igraph` graph object, you could use the `type` node attribute we defined earlier along with the `subgraph` function:

```{r}
   vcount(subgraph(g, V(g)$type == FALSE))
```

Which gives us the number of women. For the events we do the same thing:

```{r}
   vcount(subgraph(g, V(g)$type == TRUE))
```

However, because there's only one set of edges, `ecount` still gives us the right answer:

```{r}
   ecount(g)
```

Which is the same as:

```{r}
   sum(A)
```

### Degree Statistics

Because we have two sets of degrees, all the basic degree statistics in the network double up. So we have two mean degrees, two maximum degrees, and two minimum degree to take care of:

```{r}
   mean.d.p <- mean(rowSums(A))
   mean.d.g <- mean(colSums(A))
   max.d.p <- max(rowSums(A))
   max.d.g <- max(colSums(A))
   min.d.p <- min(rowSums(A))
   min.d.g <- min(colSums(A))
```

So we have:

```{r}
   round(mean.d.p, 1)
   round(mean.d.g, 1)
   max.d.p
   max.d.g
   min.d.p
   min.d.g
```

However, note that because there's only one set of undirected edges, the total number of edges incident to each node in each of the two sets is always going to be the same.

That means that there's only one sum of degrees. So the sum of degrees for people:

```{r}
   sum(rowSums(A))
```

Is the same as the sum of degrees of events:

```{r}
   sum(colSums(A))
```

Note that in a bipartite graph, therefore, the sum of degrees of nodes in each node set is equal to the $|E|$, the number of edges in the graph!

### Density
As we saw in the case of one-mode networks, one of the most basic network statistics that can be derived from the above quantities is the **density** (observed number of edges divided by maximum possible number of edges in the graph). 

In a two-mode network, density is given by:

$$
d = \frac{|E|}{N \times M}
$$

Where $|E|$ is the number of edges in the network. In our case we can compute the density as follows:

```{r}
   d <- sum(A)/(nrow(A) * ncol(A))
   d
```

## Degree Centrality
In a two-mode network, there are two degree sets, each corresponding to one set of nodes. For the people, in this case, their degree (centrality) is just the number of events they attend, and for the groups, it's just the number of people that attend each event. 

As we have already seen, we can get each from the affiliation matrix. The degree of the people are just the row sums:

```{r}
   rowSums(A)
```

And the degree of the events are just the column sums:

```{r}
   colSums(A)
```

The `igraph` function `degree` will also give us the right answer, but in the form of a single vector including both people and events:

```{r}
   degree(g)
```

As @borgatti_everett97 note, if we want *normalized* degree centrality measures, we need to divide by either $M$ (for people) or $N$ (for events). That is, for people we use the number of events as the norm (as this is the theoretical maximum) and for events the number of people.

So for people, normalized degree is:

```{r}
   round(rowSums(A)/ncol(A), 3)
```

And for events:

```{r}
   round(colSums(A)/nrow(A), 3)
```

Or with `igraph`:

```{r}
   round(degree(g)/c(rep(14, 18), rep(18, 14)), 3)
```


## Geodesic Distances

Geodesic distances work a bit different in two-mode networks because of the only between-node-sets edges restriction. 

For instance, the minimum geodesic distance $g_{ii'}$ between two people is two (a person cannot be adjacent to another person), but it is one between a person and a group (if the person is a member of the group). 

In the same way, a group $g$ cannot be at geodesic distance less than three from a person $p*$ who is not a member, because the shortest path is $g-p-g^*-p^*$. 

That is, there has to be some other group $g^*$ shared between a member $p$ of the focal group $g$ and another person $p^*$ for the shortest path between $g$ and the non-member $p^*$ to exist, and that involves three links at minimum: $g-p$, $p-g^*$, and $g^*-p^*$. This means that the links in paths in two-mode networks always alternate between persons and group nodes.

Beyond that geodesic distances work the same way. In `igraph` when we use the `distances` function on a bipartite graph, we get:

```{r}
   distances(g)
```

Which is a square matrix of dimensions $(M + N) \times (M + N)$; that's $(18 + 14) \times (18 + 14) = 32 \times 32$ in our case. 

We can check in `R`:

```{r}
   dim(distances(g))
```

As we can see in the distance matrix, distances between nodes in the same set are even $g_{ii'|jj'} = \{2, 4, \ldots\}$ but distances in nodes in different sets are odd $g_{ij|ji} = \{1, 3, \ldots\}$. Beyond this hiccup, distances can be interpreted in the same way as one-mode networks.

## Closeness Centrality in two-mode Networks

This means that (unnormalized) closeness centrality works the same way as it does in regular networks:

```{r}
   round(closeness(g), 3)
```

Which is just the inverse of the sums of the distances matrix for people and groups counting their geodesic distances to nodes of both sets. 

However, as @borgatti_everett97 note, if we want *normalized* closeness centralities, we can't use the off-the-shelf normalization for one-mode networks in `igraph` ($n-1$) as it will give us non-sense results because now we have two sets of nodes.

Instead, we need to normalize the closeness score for each node set by its theoretical maximum for each node set. 

For people, this is:

$$
N + 2(M - 1)
$$

And for groups/events this same quantity is:

$$
M + 2(N - 1)
$$

The basic idea is that nodes can be at minimum geodesic distance $g = 1$ from nodes of the other set (for people, groups; for groups, people) and at minimum distance $g = 2$ from nodes of their own set, with their own presence eliminated by subtraction [@borgatti_everett97]. 

In our case, we create a normalization vector with these quantities of length $M + N$:

```{r}
   M <- nrow(A)
   N <- ncol(A)
   n.p <- N + 2 * (M - 1)
   n.e <- M + 2 * (N - 1)
   norm.vec <- c(rep(n.p, M), rep(n.e, N))
```

And normalized closeness is:

```{r}
   round(norm.vec/rowSums(distances(g)), 3)
```

Which are the same numbers in @borgatti_everett97 [table 1, column 6].

## Betweenness Centrality in two-mode Networks

As @borgatti_everett97 also note, the normalizations for betweenness centrality in the two-mode case are a bit more involved. This is because they depend on which node set is larger than the other. 

For the larger node set, which in our case is the people, the normalization is:

$$
2(M-1)(N-1)
$$

For the smaller node set, which in our case is the groups/events, the normalization is:

$$
\frac{1}{2}(N)(N-1)+\frac{1}{2}(M-1)(M-2)+(M-1)(N-1)
$$

Remember that you have to switch this around if you are analyzing a network with more groups than people. 

Creating the relevant vectors:

```{r}
   n.p <- 2*(M-1)*(N-1)
   n.e <- (1/2)*(N*(N-1))+(1/2)*(M-1)*(M-2)+(M-1)*(N-1)
   norm.vec <- c(rep(n.p, M), rep(n.e, N))
```

And normalized betweenness is:

```{r}
   round(betweenness(g)/norm.vec, 4)*100
```

Which are (with some slight differences and rounding errors) the same numbers in @borgatti_everett97 [table 2, column 3].

## The Duality of Persons and Groups

Remember that in the one-mode case, multiplying the adjacency matrix times its transpose yields the **common neighbors matrix** $\mathbf{M}$:

$$
\mathbf{M} = \mathbf{A}\mathbf{A}^T
$$

As famously noted by @breiger74, doing the same for the affiliation matrix of a two-mode network also returns the common-neighbors matrix, but because objects in one mode can only connect to objects in another mode, this also reveals the **duality of persons and groups**: The connections between people are made up of the groups they share, and the connections between groups are revealed by the groups they share.

Thus, computing the common neighbors matrix for both persons and groups (also called the **projection** of the two-mode network into each of its modes) produces a one-mode similarity matrix between people and groups, where the similarities are defined by the number of objects in the other mode that they share. 

So for the people the relevant projection is:

$$
\mathbf{P} = \mathbf{A}\mathbf{A}^T
$$

And for the groups:

$$
\mathbf{G} = \mathbf{A}^T\mathbf{A}
$$

Which in our case yields:

```{r}
   P <- A %*% t(A)
   P
   G <- t(A) %*% A
   G
```

The off-diagonal entries of these square person by person (group by group) matrices is the number of groups (people) shared by each person (group) and the diagonals are the number of memberships of each person (the size of each group/event).

In `igraph` the  relevant function is called `bipartite_projection`. It takes a graph as an input and returns a list containing `igraph` graph objects of both projections by default:

```{r}
   Proj <-  bipartite_projection(g)
   G.p <- Proj[[1]]
   G.g <- Proj[[2]]
```

```{r}
   plot(G.p)
```

```{r}
   plot(G.g)
```

Which is a binarized undirected graph of each projection. The actual shared memberships and shared members are stored as *attributes* of each edge:

```{r}
   edge_attr(G.p)
   edge_attr(G.g)
```

So to get the weighted projection matrix, we need to type:

```{r}
   as.matrix(as_adjacency_matrix(G.p, attr = "weight"))
```


```{r}
   as.matrix(as_adjacency_matrix(G.g, attr = "weight"))
```

## Normalized Vertex Similarity Metrics

Note that the one-mode projections are unnormalized similarity matrices just like in the case of regular networks. That means that if we have the degrees of nodes in each mode, we can transform this matrix into any of the **normalized vertex similarity** metrics we discussed before, including Jaccard, Cosine, Dice, LHN, and so on. 

Thus repackaging our vertex similarity function for the two-mode case, we have:

```{r}
   vertex.sim <- function(x) {
      A <- as.matrix(as_biadjacency_matrix(x))
      M <- nrow(A) #number of persons
      N <- ncol(A) #number of groups
      p.d <- rowSums(A) #person degrees
      g.d <- colSums(A) #group degrees
      P <- A %*% t(A) #person projection
      G <- t(A) %*% A #group projection
      J.p <- diag(1, M, M)
      J.g <- diag(1, N, N)
      C.p <- diag(1, M, M)
      C.g <- diag(1, N, N)
      D.p <- diag(1, M, M)
      D.g <- diag(1, N, N)
      L.p <- diag(1, M, M)
      L.g <- diag(1, N, N)
      for (i in 1:M) {
         for (j in 1:M) {
            if (i < j) {
               J.p[i,j] <- P[i,j]/(P[i,j] + p.d[i] + p.d[j])
               J.p[j,i] <- P[i,j]/(P[i,j] + p.d[i] + p.d[j])
               C.p[i,j] <- P[i,j]/(sqrt(p.d[i] * p.d[j]))
               C.p[j,i] <- P[i,j]/(sqrt(p.d[i] * p.d[j]))
               D.p[i,j] <- (2*P[i,j])/(2*P[i,j] + p.d[i] + p.d[j])
               D.p[j,i] <- (2*P[i,j])/(2*P[i,j] + p.d[i] + p.d[j])
               L.p[i,j] <- P[i,j]/(p.d[i] * p.d[j])
               L.p[j,i] <- P[i,j]/(p.d[i] * p.d[j])
               }
            }
         }
      for (i in 1:N) {
         for (j in 1:N) {
            if (i < j) {
               J.g[i,j] <- G[i,j]/(G[i,j] + g.d[i] + g.d[j])
               J.g[j,i] <- G[i,j]/(G[i,j] + g.d[i] + g.d[j])
               C.g[i,j] <- G[i,j]/(sqrt(g.d[i] * g.d[j]))
               C.g[j,i] <- G[i,j]/(sqrt(g.d[i] * g.d[j]))
               D.g[i,j] <- (2*G[i,j])/(2*G[i,j] + g.d[i] + g.d[j])
               D.g[j,i] <- (2*G[i,j])/(2*G[i,j] + g.d[i] + g.d[j])
               L.g[i,j] <- G[i,j]/(g.d[i] * g.d[j])
               L.g[j,i] <- G[i,j]/(g.d[i] * g.d[j])
               }
            }
         }
      return(list(J.p = J.p, C.p = C.p, D.p = D.p, L.p = L.p,
                  J.g = J.g, C.g = C.g, D.g = D.g, L.g = L.g))
      }
```

Using this function to compute the Jaccard similarity between people yields:

```{r}
   J.p <- vertex.sim(g)$J.p
   rownames(J.p) <- rownames(A)
   colnames(J.p) <- rownames(A)
   round(J.p, 2)
```

## Structural Equivalence

And, of course, once we have a similarity we can cluster nodes based on approximate structural equivalence by transforming proximities to distances:

```{r}
   D <- as.dist(1- J.p)
   hc.p <- hclust(D, method = "ward.D2")
   plot(hc.p)
```

And for events:

```{r}
   J.g <- vertex.sim(g)$J.g
   rownames(J.g) <- colnames(A)
   colnames(J.g) <- colnames(A)
   D <- as.dist(1- J.g)
   hc.g <- hclust(D, method = "ward.D2")
   plot(hc.g)
```

We can then derive cluster memberships for people and groups from the `hclust` object:

```{r}
   library(dendextend)
   clus.p <- sort(cutree(hc.p, 4)) #selecting four clusters for people
   clus.p
   clus.g <- sort(cutree(hc.g, 3)) #selecting three clusters for groups
   clus.g
```

And finally we can block the original affiliation matrix, as recommended by @everett_borgatti13 [p. 210, table 5]:

```{r}
   library(ggcorrplot)
   p <- ggcorrplot(t(A[names(clus.p), names(clus.g)]), 
                   colors = c("white", "white", "red")) 
   p <- p + theme(legend.position = "none", 
                  axis.text.y = element_text(size = 8),
                  axis.text.x = element_text(size = 8, angle = 0),
                  )
   p <- p + scale_x_discrete(position = "top") 
   p <- p + geom_hline(yintercept = 7.5, linewidth = 2, color = "blue")
   p <- p + geom_hline(yintercept = 11.5, linewidth = 2, color = "blue")
   p <- p + geom_hline(yintercept = 16.5, linewidth = 2, color = "blue")
   p <- p + geom_vline(xintercept = 6.5, linewidth = 2, color = "blue")
   p <- p + geom_vline(xintercept = 9.5, linewidth = 2, color = "blue")
   p
```

Which reveals a number of almost complete (one-blocks) and almost null (zero-blocks) in the social structure, with a reduced image matrix that looks like:

```{r}
   library(kableExtra)
   IM <- matrix(0, 4, 3)
   IM[1, ] <- c(0, 1, 0)
   IM[2, ] <- c(0, 1, 1)
   IM[3, ] <- c(0, 1, 0)
   IM[4, ] <- c(1, 1, 0)
   rownames(IM) <- c("P.Block1", "P.Block2", "P.Block3", "P.Block4")
   colnames(IM) <- c("E.Block1", "E.Block2", "E.Block3")
   kbl(IM, format = "html", , align = "c") %>% 
      column_spec(1, bold = TRUE) %>% 
      kable_styling(full_width = TRUE,
                     bootstrap_options = c("hover", "condensed", "responsive"))

```

## Generalized Vertex Similarity

Recall that vertex similarity works using the principle of *structural equivalence*: Two people are similar if the choose the same objects (groups), and two objects (groups) are similar if they are chosen by the same people. 

We can, like we did in the one mode case, be after a more general version of similarity, which says that: Two people are similar if they choose *similar* objects, and two objects are similar if they are chosen by *similar* people.

This leads to the same problem setup that inspired the **SimRank** approach [@jeh_widom02]. 

A function to compute the SimRank similarity between nodes in a two mode network goes as follows:

```{r}
   TM.SimRank <- function(A, C = 0.8, iter = 10) {
        nr <- nrow(A)
        nc <- ncol(A)
        dr <- rowSums(A)
        dc <- colSums(A)
        Sr <- diag(1, nr, nr) #baseline similarity: every node maximally similar to themselves
        Sc <- diag(1, nc, nc) #baseline similarity: every node maximally similar to themselves
        rn <- rownames(A)
        cn <- colnames(A)
        rownames(Sr) <- rn
        colnames(Sr) <- rn
        rownames(Sc) <- cn
        colnames(Sc) <- cn
        m <- 1
        while(m < iter) {
             Sr.pre <- Sr
             Sc.pre <- Sc
             for(i in 1:nr) {
                  for(j in 1:nr) {
                       if (i != j) {
                            a <- names(which(A[i, ] == 1)) #objects chosen by i
                            b <- names(which(A[j, ] == 1)) #objects chosen by j
                            Scij <- 0
                            for (k in a) {
                                 for (l in b) {
                                      Scij <- Scij + Sc[k, l] #i's similarity to j
                                 }
                            }
                            Sr[i, j] <- C/(dr[i] * dr[j]) * Scij
                       }
                  }
             }
             for(i in 1:nc) {
                  for(j in 1:nc) {
                       if (i != j) {
                            a <- names(which(A[, i] == 1)) #people who chose object i
                            b <- names(which(A[, j] == 1)) #people who chose object j
                            Srij <- 0
                            for (k in a) {
                                 for (l in b) {
                                      Srij <- Srij + Sr[k, l] #i's similarity to j
                                 }
                            }
                            Sc[i, j] <- C/(dc[i] * dc[j]) * Srij
                       }
                  }
             }
             m <- m + 1
        }
        return(list(Sr = Sr, Sc = Sc))
   }
```

This function takes the bi-adjacency matrix $\mathbf{A}$ as input and returns two similarity matrices: One for the people (row objects) and the other one for the groups (column objects).

Here's how that would work in the Southern Women data. First we compute the SimRank scores:

```{r}
   sim.res <- TM.SimRank(A)
```

Then we peek inside the people similarity matrix:

```{r}
   round(sim.res$Sr[1:10, 1:10], 3)
```

And the group similarity matrix:

```{r}
   round(sim.res$Sc[1:10, 1:10], 3)
```

Like before we can use these results to define two sets of distances:

```{r}
   D.p <- as.dist(1 - sim.res$Sr)
   D.g <- as.dist(1 - sim.res$Sc)
```

Subject to hierarchical clustering:

```{r}
   hc.p <- hclust(D.p, method = "ward.D2")
   hc.g <- hclust(D.g, method = "ward.D2")
```

And plot:

```{r}
   plot(hc.p)
   plot(hc.g)
```

Get cluster memberships for people and groups from the `hclust` object:

```{r}
   clus.p <- sort(cutree(hc.p, 4)) #selecting four clusters for people
   clus.p
   clus.g <- sort(cutree(hc.g, 3)) #selecting three clusters for groups
   clus.g
```

And block the bi-adjacency matrix:

```{r}
   p <- ggcorrplot(t(A[names(clus.p), names(clus.g)]), 
                   colors = c("white", "white", "red")) 
   p <- p + theme(legend.position = "none", 
                  axis.text.y = element_text(size = 8),
                  axis.text.x = element_text(size = 8, angle = 0),
                  )
   p <- p + scale_x_discrete(position = "top") 
   p <- p + geom_hline(yintercept = 7.5, linewidth = 2, color = "blue")
   p <- p + geom_hline(yintercept = 11.5, linewidth = 2, color = "blue")
   p <- p + geom_hline(yintercept = 16.5, linewidth = 2, color = "blue")
   p <- p + geom_vline(xintercept = 8.5, linewidth = 2, color = "blue")
   p
```

Which produces a familiar block partition of persons and events. 

## Eigenvector Status

Measures of status and prestige are particularly applicable to two-mode networks. The reason is that the *reflective* principle behind these measures interacts nicely with the *duality* principle. 

For instance, when it comes to **eigenvector**-style measures, the neat idea that *people are central if they belong to central groups and groups and central if their members are central people* (with people centrality defined by membership in central groups) can be effectively captured by these metrics [@bonacich91].

Thus if $x$ are the status scores for people, and $y$ are the status scores for groups, then the $x$ scores should be given by the sum of the $y$ scores of the groups each person belongs, and the $y$ scores should be given by the sum of the $x$ scores of their members. 

In mathese:

$$
x = \mathbf{A}^Ty
$$

$$
y = \mathbf{A}x
$$

Once again, producing another instance of a cat chasing its own tail (we need to know the values of $y$ to figure out the values of $x$ and we need to know the values of $x$ to figure out the values of $y$). 

How do we proceed? Well, let's bring back our trusty status distribution game:

```{r}
   status1 <- function(A) {
      n <- nrow(A) #number of actors
      x <- rep(1, n) #initial status vector set to all ones
      w <- 1 
      k <- 0 #initializing counter
      while (w > 0.0001) {
          o.x <- x #old status scores
          x <- A %*% x #new scores a function of old scores and adjacency matrix
          x <- x/norm(x, type = "E") #normalizing new status scores
          w <- abs(sum(abs(x) - abs(o.x))) #diff. between new and old scores
          k <- k + 1 #incrementing while counter
      }
   return(as.vector(x))
   }
```

Then the main question is over what matrix will the status game be played for *both* people and groups?

As @bonacich91 noted, the projection matrices of @breiger74 are natural candidates for this task. Let's try it out.

For people this would be:

```{r}
   p.s <- status1(P)
   names(p.s) <- rownames(P)
   round(p.s, 3)
```

And for groups:

```{r}
   g.s <- status1(G)
   names(g.s) <- colnames(A)
   round(g.s, 3)
```

Lo and behold, these are the status scores we seek. It turns out they can be computed by figuring out the leading eigenvector (what our status game does for any matrix) of the Breiger projection matrices [@bonacich91]:

$$
\lambda x = (\mathbf{A}\mathbf{A}^T)x
$$

$$
\lambda y = (\mathbf{A}^T\mathbf{A})y
$$

Neat! The scores are also readily interpretable: The most central people belong to the most central (largest membership) groups and the most central groups are the ones with the most central (highest activity) members. 

In the Southern Women data the dual centralities are:

```{r}
   library(kableExtra)
   p.dat <- data.frame(People = rownames(A), Eig.Cent = round(p.s, 3))
   p.dat <- p.dat[order(p.dat$Eig.Cent, decreasing = TRUE), ]
   kbl(p.dat, format = "html", , align = c("l", "c"), row.names = FALSE) %>% 
      column_spec(1, bold = TRUE) %>% 
      kable_styling(full_width = TRUE,
                     bootstrap_options = c("hover", "condensed", "responsive"))
```

```{r}
   g.dat <- data.frame(Groups = colnames(A), Eig.Cent = round(g.s, 3))
   g.dat <- g.dat[order(g.dat$Eig.Cent, decreasing = TRUE), ]
   kbl(g.dat, format = "html", align = c("l", "c"), row.names = FALSE) %>% 
      column_spec(1, bold = TRUE) %>% 
      kable_styling(full_width = TRUE,
                     bootstrap_options = c("hover", "condensed", "responsive"))
```

## Core and Periphery

As noted by @borgatti_everett00, the Bonacich Eigenvector scores are also a model of a core-periphery partition in the two-mode network. This is already evident in the *definition* of the dual centralities: Popular actors (who participate in many events) make the events they participate in more central, and central events (that have many actors) become central when they attract the popular kids. 

So the Eigenvector scores can be used to partition any two-mode network into a core (popular kids, popular events) and a periphery (less popular kids, less popular events). All we need to do to see the partition is to re-order the rows and columns of the affiliation matrix according to the value of the magnitude of the Eigenvector scores for people and events:

```{r}
   p <- ggcorrplot(t(A[order(p.s), order(g.s)]), 
                   colors = c("white", "white", "red")) 
   p <- p + theme(legend.position = "none", 
                  axis.text.y = element_text(size = 8),
                  axis.text.x = element_text(size = 8, angle = 0),
                  )
   p <- p + scale_x_discrete(position = "top") 
   p <- p + geom_hline(yintercept = 10.5, linewidth = 2, color = "blue")
   p <- p + geom_vline(xintercept = 8.5, linewidth = 2, color = "blue")
   p
```

Here the upper-right block reveals the core actors and events in the network; namely, the events almost universally attended by the most active participants [@everett_borgatti13, table 2].


## PageRank Status 
We can, of course, also play our status game with degree-normalized versions of the affiliation matrix (a.k.a. PageRank).

First we need to create **row stochastic** versions of $\mathbf{A}$ and $\mathbf{A}^T$. Recall that a matrix is row stochastic if their rows sum to one. 

For the people, we can do this by taking the original affiliation matrix, and pre-multiplying it by a **diagonal square matrix** $\mathbf{D}_P^{-1}$ of dimensions $M \times M$ containing the *inverse* of the degrees of each person in the affiliation network along the diagonals and zeros everywhere else, yielding the row-stochastic matrix $\mathbf{P}_P$ of dimensions $M \times N$:

$$
\mathbf{P}_P = \mathbf{D}_P^{-1}\mathbf{A}
$$

And we can do the same with the groups, except that we pre-multiply the *transpose* of the original affiliation matrix by $\mathbf{D}_G^{-1}$ which is an $N \times N$ matrix containing the inverse of the size of each group along the diagonals and zero everywhere else, this yields the matrix $\mathbf{P}_G$ of dimensions $N \times M$:

$$
\mathbf{P}_G = \mathbf{D}_G^{-1}\mathbf{A}^T
$$

In `R` can compute $\mathbf{P}_P$ and $\mathbf{P}_G$ as follows:

```{r}
   D.p <- diag(1/rowSums(A))
   P.p <- D.p %*% A
   D.g <- diag(1/colSums(A))
   P.g <- D.g %*% t(A)
```

And we can check that both `P.p` (for people) and `P.g` (groups) are row stochastic:

```{r}
   rowSums(P.p)
   rowSums(P.g)
```

And that they are of the predicted dimensions:

```{r}
   dim(P.p)
   dim(P.g)
```

Great! Now, we can obtain the *degree-normalized projections* for people by multiplying $\mathbf{P}_P$ times $\mathbf{P}_G$:

$$
\mathbf{P}_{PP} = \mathbf{P}_P\mathbf{P}_G
$$

Which produces the matrix $\mathbf{P}_{PP}$ a square $M \times M$ matrix containing the *degree-normalized similarities* between each pair of people.

We then do the same for groups:

$$
\mathbf{P}_{GG} = \mathbf{P}_G\mathbf{P}_P
$$

Which produces the matrix $\mathbf{P}_{GG}$ a square $N \times N$ matrix containing the *degree-normalized similarities* between each pair of groups.

In `R` we obtain these matrices as follows:

```{r}
   P.pp <- P.p %*% P.g
   P.gg <- P.g %*% P.p
   rownames(P.pp) <- colnames(P.pp)
   rownames(P.gg) <- colnames(P.gg)
```

Which are still row stochastic--but now square--matrices:

```{r}
   rowSums(P.pp)
   rowSums(P.gg)
   dim(P.pp)
   dim(P.gg)
```

Let's peek inside one of these matrices:


```{r}
   round(P.pp[1:10, 1:10], 2)
```

What are these numbers? Well, they can be interpreted as *probabilities* that a random walker starting at the row node and, following any sequence of $person-group-person'-group'$ hops, will reach the column person. Thus, higher values indicate an *affinity* or *proximity* between the people (and the groups in the corresponding matrix).

We can now play the PageRank status game on the transpose of $\mathbf{P}_{PP}$ and $\mathbf{P}_{GG}$, just like we did in the one-mode case, to get the scores we want:

```{r}
   pr.p <- status1(t(P.pp))
   pr.g <- status1(t(P.gg))
```

Which leads to the following PageRank centrality rankings for persons and groups:

```{r}
   p.dat <- data.frame(People = rownames(A), PageRank.Cent = round(pr.p, 3))
   p.dat <- p.dat[order(p.dat$PageRank.Cent, decreasing = TRUE), ]
   kbl(p.dat, format = "html", , align = c("l", "c"), row.names = FALSE) %>% 
      column_spec(1, bold = TRUE) %>% 
      kable_styling(full_width = TRUE,
                     bootstrap_options = c("hover", "condensed", "responsive"))
```

```{r}
   g.dat <- data.frame(Groups = colnames(A), PageRank.Cent = round(pr.g, 3))
   g.dat <- g.dat[order(g.dat$PageRank.Cent, decreasing = TRUE), ]
   kbl(g.dat, format = "html", align = c("l", "c"), row.names = FALSE) %>% 
      column_spec(1, bold = TRUE) %>% 
      kable_styling(full_width = TRUE,
                     bootstrap_options = c("hover", "condensed", "responsive"))
```

The PageRank two-mode scores lead to a different ranking of the nodes, because now people are central if they belong to *selective* (not just large) groups and groups are central if their members are *discerning* (not just very active) people. 

Just like before we can use the PageRank scores to reveal a pattern in the affiliation matrix:

```{r}
   p <- ggcorrplot(t(A[order(pr.p), order(-pr.g)]), 
                   colors = c("white", "white", "red")) 
   p <- p + theme(legend.position = "none", 
                  axis.text.y = element_text(size = 8),
                  axis.text.x = element_text(size = 8, angle = 0),
                  )
   p <- p + scale_x_discrete(position = "top") 
   p <- p + geom_abline(intercept = 0, slope = 1.26, linewidth = 2, color = "blue")
   p
```

In the PageRank status score setup, events are ordered (from left to right) by popularity (most popular events on the left) and actors are ordered by activity (from top to bottom; active actors on top), creating a purely triangular pattern. Core actors and core events are in the upper-right block.

## Correspondence Analysis

**Correspondence Analysis** (CA) a relatively simple way to analyze and visualize two-mode data. In fact, we have already computed most of what we need to perform a CA of the two-mode network when figuring out the PageRank Status scores. However, there are a few additional computational details to discuss. 

First, let us review the idea of an **eigendecomposition** of a square matrix. Let's say we have the following matrix $\mathbf{B}$ of dimensions $3 \times 3$:

```{r}
   set.seed(567)
   B <- matrix(round(runif(9), 2), nrow = 3, ncol = 3)
   B
```

Most matrices like this can be decomposed into two other matrices $\mathbf{U}$ and $\mathbf{\lambda}$, such that the following matrix multiplication equation is true:

$$
\mathbf{B} = \mathbf{U}\mathbf{\lambda}\mathbf{U}^{-1}
$$

Both $\mathbf{U}$ and $\mathbf{\lambda}$ are of the same dimensions as the original, with $\mathbf{U}$ having numbers in each cell and $\mathbf{\lambda}$ being a matrix with values along the diagonals and zeros everywhere else. 

The column values of $\mathbf{U}$ are called the **eigenvectors** of $\mathbf{B}$ and the diagonal values of $\mathbf{\lambda}$ are called the **eigenvalues** of $\mathbf{B}$.

In `R` you can find the values that yield the eigendecomposition of any square matrix (if one exists) using the function `eigen`. 

So in our case this would be:

```{r}
   eig.res <- eigen(B)
   eig.res
```

The function `eigen` returns a list with two components, one called `values` are the diagonal values of $\mathbf{\lambda}$, and the other one called `vectors` is the eigenvector matrix $\mathbf{U}$.

We can check that these two elements can help us reconstruct the original matrix as follows:

```{r}
   lambda <- diag(eig.res$values)
   U <- eig.res$vectors
   B.rec <- U %*% lambda %*% solve(U)
   B.rec
```

Which are indeed the original values of $\mathbf{B}$!

Now, the idea is that we can perform this eigendecomposition with any matrix, including a network adjacency matrix or a proximity matrix derived from it like the ones we used to calculate the PageRank Status scores earlier. 

In fact, we have already done that in part many times before, because the status scores compute the first column (leading eigenvector) of the $\mathbf{U}$ matrix for any proximity or adjacency matrix you feed into it.

The key point is that once you have the eigendecomposition of the matrix, and the full set of eigenvectors stored in $\mathbf{U}$, you can always choose the first few columns of $\mathbf{U}$, which gives us the best *low dimensional approximation* of the original matrix. 

CA is based on this principle, and it works with the eigendecomposition of the square matrices $\mathbf{P_{PP}}$ and $\mathbf{P_{GG}}$ as we defined them earlier:

```{r}
   CA.p <- eigen(P.pp)
   CA.g <- eigen(P.gg)
```

Let's see what we have here:

```{r}
   round(CA.p$values, 2)
   round(CA.g$values, 2)
```

So the two matrices have identical eigenvalues, and the first one is 1.0. Let's check out the first three eigenvectors:

```{r}
   rownames(CA.p$vectors) <- rownames(A)
   rownames(CA.g$vectors) <- colnames(A)
   round(CA.p$vectors[, 1:3], 2)
   round(CA.g$vectors[, 1:3], 2)
```

So this is interesting. The first eigenvector of the decomposition of both $\mathbf{P_{PP}}$ and $\mathbf{P_{GG}}$ is just the same number for each person and group. Note that this is the eigenvector that is associated with the first eigenvalue which happens to be $\lambda_1 = 1.0$.

So it looks like the first eigenvector is a pretty useless quantity (a constant) so we can discard it, keeping all the other ones. Now the old second eigenvector is the first, the old third is the second, and so on:

```{r}
   eig.vec.p <- CA.p$vectors[, 2:ncol(CA.p$vectors)]
   eig.vec.g <- CA.g$vectors[, 2:ncol(CA.g$vectors)]
```

Note that the rest of the eigenvalues (discarding the 1.0 one) are arranged in descending order:

```{r}
   round(CA.p$values[2:10], 2)
```

The magnitude of the eigenvalue tells us how important is the related eigenvector in containing information about the original matrix. So it looks like here, the first two eigenvectors contain a good chunk of the info:

```{r}
   round(sum(CA.p$values[2:3])/sum(CA.p$values[2:length(CA.p$values)]), 2)
```

Because the magnitude of the eigenvectors don't have a natural scale, it is common to normalize to have a variance of 1.0. 

We can do this as follows:

```{r}
   N <- sum(A)
   d.p <- diag(rowSums(A))
   d.g <- diag(colSums(A))
   eig.vec.g[, 2] <- eig.vec.g[, 2] * -1
   for (i in 1:nrow(A)-1) {
      norm <- as.numeric(t(eig.vec.p[, i]) %*% d.p %*% eig.vec.p[, i])
      eig.vec.p[, i] <- eig.vec.p[, i] * sqrt(N/norm)
   }
   for (j in 1:ncol(A)-1) {
      norm <- as.numeric(t(eig.vec.g[, j]) %*% d.g %*% eig.vec.g[, j])
      eig.vec.g[, j] <- eig.vec.g[, j] * sqrt(N/norm)
      }
```

And we can use the first two normalized eigenvectors to plot the persons and groups in a common space:

```{r}
   plot.dat <- data.frame(rbind(eig.vec.p[, 1:2], eig.vec.g[, 1:2])) %>% 
      cbind(type = as.factor(c(rep(1, 18), rep(2, 14))))
   library(ggplot2)
   # install.packages("ggrepel")
   library(ggrepel)
   p <- ggplot(data = plot.dat, aes(X1, y = X2, color = type))
   p <- p + geom_hline(aes(yintercept = 0), color = "gray")
   p <- p + geom_vline(aes(xintercept = 0), color = "gray")
   p <- p + geom_text_repel(aes(label = rownames(plot.dat)), 
                            max.overlaps = 20, size = 2.75)
   p <- p + theme_minimal()
   p <- p + theme(legend.position = "none",
                  axis.title = element_text(size = 14),
                  axis.text = element_text(size = 12))
   p <- p + scale_color_manual(values = c("red", "blue"))
   p <- p + labs(x = "First Dimension", y = "Second Dimension")
   p
```

In this space, people with the most similar patterns of memberships to the most similar groups are placed close to one another. In the same way, groups with the most similar members are placed closed to one another. 

Also like before, we can use the scores obtained from the CA analysis to re-arrange the rows and columns of the original matrix to reveal blocks of maximally similar persons and events:

```{r}
   p <- ggcorrplot(t(A[order(eig.vec.p[,1]), order(eig.vec.g[,1])]), 
                   colors = c("white", "white", "red")) 
   p <- p + theme(legend.position = "none", 
                  axis.text.y = element_text(size = 8),
                  axis.text.x = element_text(size = 8, angle = 0),
                  )
   p <- p + scale_x_discrete(position = "top") 
   p <- p + geom_hline(yintercept = 6.5, linewidth = 2, color = "blue")
   p <- p + geom_hline(yintercept = 10.5, linewidth = 2, color = "blue")
   p <- p + geom_vline(xintercept = 9.5, linewidth = 2, color = "blue")
   p <- p + geom_vline(xintercept = 6.5, linewidth = 2, color = "blue")
   p
```

Here CA seems to have detected two separate clusters of actors who preferentially attend two distinct clusters of events! 

The three events in the middle $\{3/15, 9/16, 4/8\}$ don't seem to differentiate between participants in each cluster (everyone attends)--they thus appear near the origin in the CA diagram, indicating a weak association with either dimension. 

However, the events to the left (with clusters of participants in the lower-left) and to the right of the x-axis (with clusters of participants in the upper-right) are attended preferentially by distinct groups of participants; they thus appear at the extreme left and right positions of the first dimension of the CA diagram. 

In the same way, the four people in the middle $\{Ruth, Dorothy, Pearl, Verne\}$ only attend the undifferentiated, popular events, so that means that they are not strongly associated with either cluster of actors (and thus appear near the origin in the CA diagram). The top and bottom participants, by contrast, appear to the extreme right and left in the CA diagram, indicating a strong association with the underlying dimensions.

Note the similarity between this blocking and that obtained from the structural equivalence analysis.










