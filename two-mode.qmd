---
title: "Analyzing Two-Mode Networks"
execute: 
  eval: true
  echo: true
  output: true
  warning: false
  message: false
format: 
   html:
      code-line-numbers: true
---

This lecture deals with the network analysis of two-mode networks. Note that in the literature there is some terminological slippage. Two-mode networks are a type of social network. By definition two-mode networks can be represented using rectangular adjacency matrices (sometimes called **affiliation matrices** in sociology). 

In this case, two-mode networks fall under the general category of "two-mode data." Any data set that has information on two types of objects (e.g., people and variables) is two-mode data so two-mode networks are just a special case of two-mode data.

In this sense, there is a useful a distinction, due to @borgatti_everett97. This is that between the "modes" and the "ways" of a data matrix. So most data matrices are two-ways, in that they have at least two dimensions (e.g., the row and column dimensions). 

But some data matrices (like the usual adjacency matrix in regular network data) only collect information on a single type of entity, so they are "one mode, two ways." But sometimes we have network data on two sets of objects, in which case, we use a data matrix that has "two-modes" (sets of nodes) *and* "two ways" (rows and columns).

So what makes a network a "two-mode network"? Well, a two-mode network is different from a regular network, because it has two sets of nodes not just one. So instead of $V$ now we have $V_1$ and $V_2$. Moreover, the edges in a two-mode network only go from nodes in one set to nodes in the other set; there are no within-node-set edges. 

## Bipartite Graphs

This restriction makes the graph that represents a two-mode network a special kind of graph called a **bipartite graph**. A graph is bipartite if the set of nodes in the graph can be divided into two groups, such that relations go from nodes in one set to nodes in the other set. 

Note that bipartite graphs can be be used to represent both two-mode and regular one mode networks, as long as the above condition holds. For instance, a dating network with 100% heterosexual people will yield a bipartite graph based on the dating relation, with men in one set and women on the other node set, even though it's a one-mode network. 

So whether or not a graph is bipartite is something you can check for. 

Let's see how that works. Let us load the most famous two-mode network data set (kind of the Drosophila of two-mode network analysis; one of the most repeatedly analyzed social structures in history: For a classic sampling of such analyses see [here](https://www.csc2.ncsu.edu/faculty/mpsingh/local/Social/f16/wrap/readings/Freeman-social-groups.pdf)) a network composed of eighteen women from the social elite of a tiny town in the south in the 1930s who attended fourteen social events [@breiger74], otherwise know as the Southern Women (SW) data:

```{r}
   library(igraph)
   library(networkdata)
   g <- southern_women
```

Now we already know this is a bipartite graph. However, let's say you are new and you've never heard of these data. You can check whether the graph you loaded up is bipartite or not by using the `igraph` function `is_bipartite`:

```{r}
   is_bipartite(g)
```

Which returns `TRUE` as an answer. Had we loaded up any old non-bipartite graph, the answer would have been:

```{r}
   g.whatever <- movie_45
   is_bipartite(g.whatever)
```

Which makes sense because that's just a regular old graph. 

Note that if we check the bipartite graph object, it looks like any other `igraph` object:

```{r}
   g
```

But we can tell that the graph is a two-mode network because we have links starting with people with old southern lady names from the 1930s (which are also the names of a bunch of young girls in middle school today) and ending with events that have dates in them. So the (undirected) edge is $person-event$. 

The graph is undirected because the "membership" or "attendance" relation between a person and an organization/event doesn't have a natural directionality:

```{r}
   is_directed(g)
```

Another way of checking the "bipartiteness" of a graph in `igraph` is by using the `bipartite_mapping` function. 

Let's see what it does:

```{r}
   bipartite_mapping(g)
```

This function takes the candidate bipartite graph as input and returns two objects: `res` is just a check to see if the graph is actually bipartite (`TRUE` in this case), `type` is a logical vector of dimensions $M + N$ (where $M$ is the number of nodes in the person set and $N$ is the number of nodes in the event set) dividing the nodes into two groups. Here people get `FALSE` and events get `TRUE`, but this designations are arbitrary (a kind of dummy coding; `FALSE` = 0 and `TRUE` = 1). 

We can add this as a node attribute to our graph so that way we know which node is in which set:

```{r}
   V(g)$type <- bipartite_mapping(g)$type
```

## The Biadjacency (Affiliation) Matrix

Once you have your bipartite graph loaded up, you may want (if the graph is small enough) to check out the graph's affiliation matrix $A$. 

This works just like before, except that now we use the `as_biadjacency_matrix` function:

```{r}
   A <- as.matrix(as_biadjacency_matrix(g))
   A
```

In this matrix we list one set of nodes in the rows and the other set is in the columns. Each cell $a_{ij} = 1$ if row node $i$ is affiliated with column node $j$, otherwise $a_{ij} = 0$.

## The Bipartite Adjacency Matrix

Note that if we were to use the regular `as_adjacency_matrix` function on a bipartite graph, we get a curious version of the adjacency matrix:

```{r}
   B <- as.matrix(as_adjacency_matrix(g))
   B
```

This bipartite adjacency matrix $\mathbf{B}$ is of dimensions $(M + N) \times (M + N)$, which is $(18 + 14) \times (18 + 14) = 32 \times 32$ in the SW data; it has the following block structure [@fouss_etal16, p. 12]:

$$
\mathbf{B} = \left[
\begin{matrix}
\mathbf{O}_{M \times M} & \mathbf{A}_{M \times N} \\
\mathbf{A}^T_{N \times M} & \mathbf{O}_{N \times N}
\end{matrix}
\right]
$$

Where $\mathbf{O}$ is just the all zeros matrix of the relevant dimensions, and $\mathbf{A}$ is the biadjacency (affiliation) matrix as defined earlier. Thus, the bipartite adjacency matrix necessarily has two big diagonal "zero blocks" in it (upper-left and lower-right) corresponding to where the links between nodes in the same set would be (but necessarily aren't because this is a two-mode network). The non-zero blocks are just the affiliation matrix (upper-right) and its transpose(lower-left).

## Bipartiteness as "Anti-Community"

Recall from the [community structure lecture notes](community.qmd), that community structure is defined by clusters of nodes that have more connections among themselves than they do with outsiders. If you think about it, a bipartite graph has the *opposite* of this going on. Nodes of the same type have *zero* connections among themselves, and they have *all* their connections with nodes of the other group!

So that means that *bipartite structure* is the mirror image of *community structure* (in the two group case). This also means that if we were to compute the modularity of a bipartite graph, using the node type as the grouping variable we should get the theoretical minimum of this measure (which you may recall is $Q = -\frac{1}{2}$).

Let's try it out, by computing the modularity from the bipartite adjacency matrix of the SW data, using node type as the grouping variable:

```{r}
   V(g)$comm <- as.numeric(bipartite_mapping(g)$type) + 1
   modularity(g, V(g)$comm)
```

And indeed, we recover the theoretical minimum value of the modularity [@brandes07, p. 173]! This also means that this method can be used to test whether a graph is bipartite, or whether any network *approximates* bipartiteness [@newman06b, p. 13]. Values that are close to $-0.5$ would indicate that the network in question has bipartite structure. 

## Basic Two-Mode Network Statistics

We can calculate some basic network statistics from the affiliation (biadjacency) matrix. We have two number of nodes to calculate, but only one quantity for the number of edges.

### Number of Nodes and Edges

The number of nodes on the people side $N$ is just the number of rows of $A$:

```{r}
   nrow(A)
```

And the number of events/groups $M$ is just the number of columns:

```{r}
   ncol(A)
```

Finally, the number of edges $E$ is just the sum of all the entries of $A$:

```{r}
   sum(A)
```

Note that if you were to use the `igraph` function `vcount` on the original graph object, you get the wrong answer:

```{r}
   vcount(g)
```

That's because `vcount` is working with the $32 \times 32$ regular adjacency matrix, not the biadjacency matrix. Here, `vcount` is returning the *total* number of nodes in the graph summing across the two sets, which is $M + N$. 

If you wanted to get the right answer for each set of edges from the regular `igraph` graph object, you could use the `type` node attribute we defined earlier along with the `subgraph` function:

```{r}
   vcount(subgraph(g, V(g)$type == FALSE))
```

Which gives us the number of women. For the events we do the same thing:

```{r}
   vcount(subgraph(g, V(g)$type == TRUE))
```

However, because there's only one set of edges, `ecount` still gives us the right answer:

```{r}
   ecount(g)
```

Which is the same as:

```{r}
   sum(A)
```

### Density
As we saw in the case of one-mode networks, one of the most basic network statistics that can be derived from the above quantities is the **density** (observed number of edges divided by maximum possible number of edges in the graph). 

In a two-mode network, density is given by:

$$
d = \frac{|E|}{N \times M}
$$

Where $|E|$ is the number of edges in the network. In our case we can compute the density as follows:

```{r}
   d <- sum(A)/(nrow(A) * ncol(A))
   d
```

## Degree-Based Statistics

Because we have two sets of degrees, all the basic degree statistics in the network double up. So we have two mean degrees, two maximum degrees, and two minimum degree to take care of:

```{r}
   mean.d.p <- mean(rowSums(A))
   mean.d.g <- mean(colSums(A))
   max.d.p <- max(rowSums(A))
   max.d.g <- max(colSums(A))
   min.d.p <- min(rowSums(A))
   min.d.g <- min(colSums(A))
```

So we have:

```{r}
   round(mean.d.p, 1)
   round(mean.d.g, 1)
   max.d.p
   max.d.g
   min.d.p
   min.d.g
```

However, note that because there's only one set of undirected edges, the total number of edges incident to each node in each of the two sets is always going to be the same.

That means that there's only one sum of degrees. So the sum of degrees for people:

```{r}
   sum(rowSums(A))
```

Is the same as the sum of degrees of events:

```{r}
   sum(colSums(A))
```

Note that in a bipartite graph, therefore, the sum of degrees of nodes in each node set is equal to the $|E|$, the number of edges in the graph!

### Degree Centrality
In a two-mode network, there are two degree sets, each corresponding to one set of nodes. For the people, in this case, their degree (centrality) is just the number of events they attend, and for the groups, it's just the number of people that attend each event. 

As we have already seen, we can get each from the affiliation matrix. The degree of the people are just the row sums:

```{r}
   rowSums(A)
```

And the degree of the events are just the column sums:

```{r}
   colSums(A)
```

The `igraph` function `degree` will also give us the right answer, but in the form of a single vector including both people and events:

```{r}
   degree(g)
```

As @borgatti_everett97 note, if we want *normalized* degree centrality measures, we need to divide by either $M$ (for people) or $N$ (for events). That is, for people we use the number of events as the norm (as this is the theoretical maximum) and for events the number of people.

So for people, normalized degree is:

```{r}
   round(rowSums(A)/ncol(A), 3)
```

And for events:

```{r}
   round(colSums(A)/nrow(A), 3)
```

Or with `igraph`:

```{r}
   round(degree(g)/c(rep(14, 18), rep(18, 14)), 3)
```

### Average Nearest Neighbor Degree

For each person (group) we may also be interested in whether they connect to more or less central groups (persons). As such, we can compute the **average nearest neighbor degree** for persons and groups. 

For people this is equivalent to multiplying the vector of group degrees by the entries of the affiliation matrix, and then dividing by the degrees of each person:

```{r}
   knn.p <- A * colSums(A)
   knn.p
   knn.p <- rowSums(knn.p)/rowSums(A)
   round(knn.p, 2)
```

We can see that for Flora, the average number of members of the groups she connects to is very high, while the opposite is the case for Myrna. 

We can do the same for groups:

```{r}
   knn.g <- t(A) * rowSums(A)
   knn.g
   knn.g <- rowSums(knn.g)/colSums(A)
   round(knn.g, 2)
```

### Degree Correlation

Finally, we can also compute the degree correlation between the nodes in each mode. This tell us whether people with more memberships connect to larger (positive correlation) or smaller (negative correlation) groups. 

Here's a function to compute the degree correlation in a two mode network from the bipartite matrix:

```{r}
   tm.deg.corr <- function(x) {
      d <- data.frame(e = as.vector(x), 
                      rd = rep(rowSums(x), ncol(x)), 
                      cd = rep(colSums(x), each = nrow(x)),
                      rn = rep(rownames(x), ncol(x)),
                      cn = rep(colnames(x), each = nrow(x))
                      )
      r <- cor(d[d$e == 1, ]$rd, d[d$e == 1, ]$cd)
      return(list(r = r, d = d))
   }
```

The `tm.deg.corr` function creates a data frame set with as many rows as there are entries in the bipartite matrix, and three columns: `e` recording whether there is a one or a zero for that particular combination of nodes (line 2), `rd` recording the degree of that node (line 3), and `cd` recording other node (line 4); lines 5 and 6 record the node labels for that dyad. Then in line 8 the function computes the Pearson correlations between the degrees of persons and groups that are connected in the data frame (e.g., `e = 1`).

We can now apply our function to the SW data:

```{r}
   tm.deg.corr(B)$r
```

Which tells us that there is degree **anti-correlation** in this network: People with more memberships tend to belong to smaller groups, and people with less memberships connect to bigger groups.






