---
title: "Correspondence Analysis (CA) of Two-Mode Networks"
execute: 
  eval: true
  echo: true
  output: true
  warning: false
  message: false
format: 
   html:
      code-line-numbers: true
---

**Correspondence Analysis** (CA) a relatively simple way to analyze and visualize two-mode data. However, there are a few additional computational details to discuss. 

## The Eigendecomposition of a Square Matrix

First, let us review the idea of an **eigendecomposition** of a square matrix. Let's say we have the following matrix $\mathbf{B}$ of dimensions $3 \times 3$:

```{r}
   set.seed(567)
   B <- matrix(round(runif(9), 2), nrow = 3, ncol = 3)
   B
```

Most matrices like this can be decomposed into two other matrices $\mathbf{U}$ and $\mathbf{\lambda}$, such that the following matrix multiplication equation is true:

$$
\mathbf{B} = \mathbf{U}\mathbf{\lambda}\mathbf{U}^{-1}
$$

Both $\mathbf{U}$ and $\mathbf{\lambda}$ are of the same dimensions as the original, with $\mathbf{U}$ having numbers in each cell and $\mathbf{\lambda}$ being a matrix with values along the diagonals and zeros everywhere else. 

The column values of $\mathbf{U}$ are called the **eigenvectors** of $\mathbf{B}$ and the diagonal values of $\mathbf{\lambda}$ are called the **eigenvalues** of $\mathbf{B}$.

In `R` you can find the values that yield the eigendecomposition of any square matrix (if one exists) using the function `eigen`. 

So in our case this would be:

```{r}
   eig.res <- eigen(B)
   eig.res
```

The function `eigen` returns a list with two components, one called `values` are the diagonal values of $\mathbf{\lambda}$, and the other one called `vectors` is the eigenvector matrix $\mathbf{U}$.

We can check that these two elements can help us reconstruct the original matrix as follows:

```{r}
   lambda <- diag(eig.res$values)
   U <- eig.res$vectors
   B.rec <- U %*% lambda %*% solve(U)
   B.rec
```

Which are indeed the original values of $\mathbf{B}$!

Now, the idea is that we can perform this eigendecomposition with any matrix, including a network adjacency matrix or a proximity matrix derived from it. In fact, we have already done that in part many times before, because the reflective status game is a way to compute the first column (leading eigenvector) of the $\mathbf{U}$ matrix for any proximity or adjacency matrix you feed into it.

The more important thing is that, once you have the eigendecomposition of a matrix, and the full set of eigenvectors stored in $\mathbf{U}$, the first few columns of $\mathbf{U}$, gives us the best *low dimensional approximation* of the original matrix. 

## The CA Matrix

CA boils down to the eigendecomposition of a suitable matrix, derived from the original affiliation (bi-adjacency) matrix of a two-mode network. 

So which matrix should be use for CA? Let's find out:

First we need to create **row stochastic** versions of the affiliation matrix and its transpose $\mathbf{A}$ and $\mathbf{A}^T$. Recall that a matrix is row stochastic if their rows sum to one. 

For the people, we can do this by taking the original affiliation matrix, and pre-multiplying it by a **diagonal square matrix** $\mathbf{D}_P^{-1}$ of dimensions $M \times M$ containing the *inverse* of the degrees of each person in the affiliation network along the diagonals and zeros everywhere else, yielding the row-stochastic matrix $\mathbf{P}_P$ of dimensions $M \times N$:

$$
\mathbf{P}_P = \mathbf{D}_P^{-1}\mathbf{A}
$$

And we can do the same with the groups, except that we pre-multiply the *transpose* of the original affiliation matrix by $\mathbf{D}_G^{-1}$ which is an $N \times N$ matrix containing the inverse of the size of each group along the diagonals and zero everywhere else, this yields the matrix $\mathbf{P}_G$ of dimensions $N \times M$:

$$
\mathbf{P}_G = \mathbf{D}_G^{-1}\mathbf{A}^T
$$

In `R` can compute $\mathbf{P}_P$ and $\mathbf{P}_G$ as follows:

```{r}
   library(igraph)
   library(networkdata)
   g <- southern_women
   A <- as.matrix(as_biadjacency_matrix(g))
   D.p <- diag(1/rowSums(A))
   P.p <- D.p %*% A
   rownames(P.p) <- rownames(A)
   D.g <- diag(1/colSums(A))
   P.g <- D.g %*% t(A)
   rownames(P.g) <- colnames(A)
```

And we can check that both `P.p` (for people) and `P.g` (groups) are row stochastic:

```{r}
   rowSums(P.p)
   rowSums(P.g)
```

And that they are of the predicted dimensions:

```{r}
   dim(P.p)
   dim(P.g)
```

Great! Now, we can obtain the *degree-normalized projections* for people by multiplying $\mathbf{P}_P$ times $\mathbf{P}_G$:

$$
\mathbf{P}_{PP} = \mathbf{P}_P\mathbf{P}_G
$$

Which produces the matrix $\mathbf{P}_{PP}$ a square $M \times M$ matrix containing the *degree-normalized similarities* between each pair of people.

We then do the same for groups:

$$
\mathbf{P}_{GG} = \mathbf{P}_G\mathbf{P}_P
$$

Which produces the matrix $\mathbf{P}_{GG}$ a square $N \times N$ matrix containing the *degree-normalized similarities* between each pair of groups.

In `R` we obtain these matrices as follows:

```{r}
   P.pp <- P.p %*% P.g
   P.gg <- P.g %*% P.p
```

Which are still row stochastic--but now square--matrices:

```{r}
   rowSums(P.pp)
   rowSums(P.gg)
   dim(P.pp)
   dim(P.gg)
```

Let's peek inside one of these matrices:

```{r}
   round(P.pp[1:10, 1:10], 2)
```

What are these numbers? Well, they can be interpreted as *probabilities* that a random walker starting at the row node and, following any sequence of $person-group-person'-group'$ hops, will reach the column person. Thus, higher values indicate an *affinity* or *proximity* between the people (and the groups in the corresponding matrix).

## The Duality of CA Scores Between Persons and Groups
We went through all these steps because CA is equivalent to the eigendecomposition of the two last square matrices we obtained, namely, $\mathbf{P_{PP}}$ and $\mathbf{P_{GG}}$:

```{r}
   CA.p <- eigen(P.pp)
   CA.g <- eigen(P.gg)
```

Let's see what we have here:

```{r}
   round(CA.p$values, 2)
   round(CA.g$values, 2)
```

So the two matrices have identical eigenvalues, and the first one is 1.0. Let's check out the first three eigenvectors:

```{r}
   rownames(CA.p$vectors) <- rownames(A)
   rownames(CA.g$vectors) <- colnames(A)
   round(CA.p$vectors[, 1:3], 2)
   round(CA.g$vectors[, 1:3], 2)
```

So this is interesting. The first eigenvector of the decomposition of both $\mathbf{P_{PP}}$ and $\mathbf{P_{GG}}$ is just the same number for each person and group. Note that this is the eigenvector that is associated with the first eigenvalue which happens to be $\lambda_1 = 1.0$.

So it looks like the first eigenvector is a pretty useless quantity (a constant) so we can discard it, keeping all the other ones. Now the old second eigenvector is the first, the old third is the second, and so on:

```{r}
   eig.vec.p <- CA.p$vectors[, 2:ncol(CA.p$vectors)]
   eig.vec.g <- CA.g$vectors[, 2:ncol(CA.g$vectors)]
```

Note that the rest of the eigenvalues (discarding the 1.0 one) are arranged in descending order:

```{r}
   eig.vals <- CA.p$values[2:length(CA.p$values)]
   round(eig.vals, 3)
```

The magnitude of the eigenvalue tells us how important is the related eigenvector in containing information about the original matrix. So it looks like here, the first two eigenvectors contain a good chunk of the info:

```{r}
   round(sum(eig.vals[1:2])/sum(eig.vals), 2)
```

Which says that the first two eigenvectors account for about 57% of the action (or more precisely we could reconstruct the original matrix with 57% accuracy using just these two eigenvectors and associated eigenvalues). 

Because the magnitude of the CA eigenvectors don't have a natural scale, it is common to normalize them to have a variance of 1.0 [@fouss_etal16, p. 399]. 

We can do this as follows:

```{r}
   N <- sum(A)
   d.p <- diag(rowSums(A))
   d.g <- diag(colSums(A))
   eig.vec.g[, 2] <- eig.vec.g[, 2] * -1
   for (i in 1:nrow(A)-1) {
      norm <- as.numeric(t(eig.vec.p[, i]) %*% d.p %*% eig.vec.p[, i])
      eig.vec.p[, i] <- eig.vec.p[, i] * sqrt(N/norm)
   }
   for (j in 1:ncol(A)-1) {
      norm <- as.numeric(t(eig.vec.g[, j]) %*% d.g %*% eig.vec.g[, j])
      eig.vec.g[, j] <- eig.vec.g[, j] * sqrt(N/norm)
      }
```

Just like with the eigenvector centrality there is a *duality* between the CA scores assigned to the person and the groups on each dimension, such that the scores for each person are a weighted sum of the sum of the scores assigned to each group on that dimension and vice versa [@faust97, 171]. 

The main difference is that this time we sum scores across the $\mathbf{P_P}$ and $\mathbf{P_G}$ matrices rather than the original affiliation matrix and its transpose, resulting in *degree-weighted* sums of scores for both persons and groups.

So for any given person, on any given dimension, let's say $EVELYN$, her CA score is given by the sum of the CA scores of the groups she belongs to weighted by her degree (done by multiplying each CA score by the relevant cell in Evelyn's row of the $\mathbf{P_P}$ matrix):

```{r}
   sum(P.p["EVELYN", ] * eig.vec.g[, 1])
```

Which is the same as the score we obtained via CA for $EVELYN$ multiplied by the (square root of the) relevant eigenvalue:

```{r}
   eig.vec.p["EVELYN", 1] * sqrt(eig.vals[1]) 
```

A similar story applies to groups. Each group score is the group-size-weighted sum of the CA scores of the people who join it:

```{r}
   sum(P.g["6/27", ] * eig.vec.p[, 1])
```

Which is the same as the score we obtained via CA for this group multiplied by the (square root of the) relevant eigenvalue:

```{r}
    eig.vec.g["6/27", 1] * sqrt(eig.vals[1]) 
```

Neat!

## Visualizing Two-Mode Networks Using CA

And, finally, we can use the first two normalized eigenvectors to plot the persons and groups in a common two-dimensional space:

```{r}
   plot.dat <- data.frame(rbind(eig.vec.p[, 1:2], eig.vec.g[, 1:2])) %>% 
      cbind(type = as.factor(c(rep(1, 18), rep(2, 14))))
   library(ggplot2)
   # install.packages("ggrepel")
   library(ggrepel)
   p <- ggplot(data = plot.dat, aes(x = X1, y = X2, color = type))
   p <- p + geom_hline(aes(yintercept = 0), color = "gray")
   p <- p + geom_vline(aes(xintercept = 0), color = "gray")
   p <- p + geom_text_repel(aes(label = rownames(plot.dat)), 
                            max.overlaps = 20, size = 2.75)
   p <- p + theme_minimal()
   p <- p + theme(legend.position = "none",
                  axis.title = element_text(size = 14),
                  axis.text = element_text(size = 12))
   p <- p + scale_color_manual(values = c("red", "blue"))
   p <- p + labs(x = "First Dimension", y = "Second Dimension") + ylim(-4, 4) + xlim(-2, 2)
   p
```

In this space, people with the most similar patterns of memberships to the most similar groups are placed close to one another. In the same way, groups with the most similar members are placed closed to one another. 

Also like before, we can use the scores obtained from the CA analysis to re-arrange the rows and columns of the original matrix to reveal blocks of maximally similar persons and events:

```{r}
   library(ggcorrplot)
   p <- ggcorrplot(t(A[order(eig.vec.p[,1]), order(eig.vec.g[,1])]), 
                   colors = c("white", "white", "red")) 
   p <- p + theme(legend.position = "none", 
                  axis.text.y = element_text(size = 8),
                  axis.text.x = element_text(size = 8, angle = 0),
                  )
   p <- p + scale_x_discrete(position = "top") 
   p <- p + geom_hline(yintercept = 6.5, linewidth = 2, color = "blue")
   p <- p + geom_hline(yintercept = 10.5, linewidth = 2, color = "blue")
   p <- p + geom_vline(xintercept = 9.5, linewidth = 2, color = "blue")
   p <- p + geom_vline(xintercept = 6.5, linewidth = 2, color = "blue")
   p
```

Here CA seems to have detected two separate clusters of actors who preferentially attend two distinct clusters of events! 

The three events in the middle $\{3/15, 9/16, 4/8\}$ don't seem to differentiate between participants in each cluster (everyone attends)--they thus appear near the origin in the CA diagram, indicating a weak association with either dimension. 

However, the events to the left (with clusters of participants in the lower-left) and to the right of the x-axis (with clusters of participants in the upper-right) are attended preferentially by distinct groups of participants; they thus appear at the extreme left and right positions of the first dimension of the CA diagram. 

In the same way, the four people in the middle $\{Ruth, Dorothy, Pearl, Verne\}$ only attend the undifferentiated, popular events, so that means that they are not strongly associated with either cluster of actors (and thus appear near the origin in the CA diagram). The top and bottom participants, by contrast, appear to the extreme right and left in the CA diagram, indicating a strong association with the underlying dimensions.

Note the similarity between this blocking and that obtained from the structural equivalence analysis in the previous handout.