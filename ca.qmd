---
title: "Correspondence Analysis (CA) of Two-Mode Networks"
execute: 
  eval: true
  echo: true
  output: true
  warning: false
  message: false
format: 
   html:
      code-line-numbers: true
---

**Correspondence Analysis** (CA) a relatively simple way to analyze and visualize two-mode data. However, there are a few additional computational details to discuss. 

## The Eigendecomposition of a Square Matrix

First, let us review the idea of an **eigendecomposition** of a square matrix. Let's say we have the following matrix $\mathbf{B}$ of dimensions $3 \times 3$:

```{r}
   set.seed(567)
   B <- matrix(round(runif(9), 2), nrow = 3, ncol = 3)
   B
```

Most matrices like this can be decomposed into two other matrices $\mathbf{U}$ and $\mathbf{\lambda}$, such that the following matrix multiplication equation is true:

$$
\mathbf{B} = \mathbf{U}\mathbf{\lambda}\mathbf{U}^{-1}
$$

Both $\mathbf{U}$ and $\mathbf{\lambda}$ are of the same dimensions as the original, with $\mathbf{U}$ having numbers in each cell and $\mathbf{\lambda}$ being a matrix with values along the diagonals and zeros everywhere else. 

The column values of $\mathbf{U}$ are called the **eigenvectors** of $\mathbf{B}$ and the diagonal values of $\mathbf{\lambda}$ are called the **eigenvalues** of $\mathbf{B}$.

In `R` you can find the values that yield the eigendecomposition of any square matrix (if one exists) using the function `eigen`. 

So in our case this would be:

```{r}
   eig.res <- eigen(B)
   eig.res
```

The function `eigen` returns a list with two components, one called `values` are the diagonal values of $\mathbf{\lambda}$, and the other one called `vectors` is the eigenvector matrix $\mathbf{U}$.

We can check that these two elements can help us reconstruct the original matrix as follows:

```{r}
   lambda <- diag(eig.res$values)
   U <- eig.res$vectors
   B.rec <- U %*% lambda %*% solve(U)
   B.rec
```

Which are indeed the original values of $\mathbf{B}$!

Now imagine that the matrix $\mathbf{B}$ is *symmetrical*:

```{r}
   B[upper.tri(B)] <- B[lower.tri(B)]
   B
```

And let's do the eigendecomposition of this matrix:

```{r}
   eig.res <- eigen(B)
   eig.res
```

The interesting thing here is that now the reconstruction equation boils down to:

$$
\mathbf{B} = \mathbf{U}\mathbf{\lambda}\mathbf{U}^T
$$

Note that now we just need to post-multiply $\mathbf{U}\mathbf{\lambda}$ by the *transpose* of $\mathbf{U}$ rather than the inverse, which is a much simpler matrix operation.

We can check that this is true as follows:

```{r}
   lambda <- diag(eig.res$values)
   U <- eig.res$vectors
   B.rec <- U %*% lambda %*% t(U)
   B.rec
```

Which are indeed the original values of the symmetric version of $\mathbf{B}$!

Now, the idea is that we can perform the asymmetric or symmetric eigendecomposition with any matrix, including a network adjacency matrix or a proximity matrix derived from it. 

In fact, we have already done a partial version of the matrix eigendecomposition many times before, because the reflective status game is a way to compute the first column (leading eigenvector) of the $\mathbf{U}$ matrix for any proximity or adjacency matrix you feed into it.

The more important thing is that, once you have the eigendecomposition of a matrix, and the full set of eigenvectors stored in $\mathbf{U}$, the first few columns of $\mathbf{U}$, gives us the best *low dimensional approximation* of the original matrix. 

For instance, in the above case, the one-dimensional (also called "rank one") approximation of the original matrix is given by:

$$
\mathbf{B}_{1-dim} = u_1\lambda_1u_1^T
$$

Where $u$ is just the first column (eigenvector) of $\mathbf{U}$, and $\lambda_1$ is just the first eigenvalue. 

In `R` we can do this approximation as follows:

```{r}
   u.1 <- as.matrix(U[, 1]) #column vector
   B.1dim <- u.1 %*% lambda[1, 1] %*% t(u.1)
   round(B.1dim, 2)
```

Which are not quite the same as the original values of $\mathbf{B}$, but they are not wildly far off either. 

If we wanted to be more accurate, however, we would use a *two-dimensional* approximation (rank two) and thus use more of the information:

$$
\mathbf{B}_{2-dim} = u_1\lambda_1u_1^T + u_2\lambda_2u_2^T
$$

In `R`:

```{r}
   u.2 <- as.matrix(U[, 2])
   B.2dim <- u.1 %*% lambda[1, 1] %*% t(u.1) + u.2 %*% lambda[2, 2] %*% t(u.2)
   round(B.2dim, 2)
```

Which are not the same as the original, but are now a bit closer!

Of course, if we wanted to reconstruct the original matrix, all we have to do is add the product of the eigenvector, eigenvalue, and transpose of the eigenvector across all three dimensions of the matrix:

```{r}
   u.3 <- as.matrix(U[, 3])
   B.3dim <- 
      u.1 %*% lambda[1, 1] %*% t(u.1) + 
      u.2 %*% lambda[2, 2] %*% t(u.2) + 
      u.3 %*% lambda[3, 3] %*% t(u.3)
   round(B.3dim, 2)
```

Which reconstructs the original values. 

So in general, if you have a symmetric square matrix $\mathbf{B}$ of dimensions $k \times k$, and you obtain an eigenvalue decomposition of $\mathbf{B}$ with eigenvectors stored in the columns of $\mathbf{U}$ and eigenvalues in $\lambda$, then the rank-$p$ approximation of the original matrix is given by:
 
$$
\mathbf{B}_{rank-p} = \sum_{m = 1}^p u_{m}\lambda_mu_m^T
$$

When $p = k$, the equation above gives you the original matrix back. When $p<k$ you get the best guess as to what the original was, given $p$ dimensions.

## Obtaining the Matrices We Need for CA

As you might have already guessed, two-mode CA boils down to the eigendecomposition of a suitable matrix, derived from the original affiliation (bi-adjacency) matrix of a two-mode network. 

The goal is to come up with a low-rank (usually two-dimensional) approximation of the original affiliation network using the eigenvectors and eigenvalues obtained from the decomposition, as we did above with our toy example.

So which matrix should be use for CA? 

Let's find out:

First we need to create **row stochastic** versions of the affiliation matrix and its transpose $\mathbf{A}$ and $\mathbf{A}^T$. Recall that a matrix is row stochastic if their rows sum to one. 

For the people, we can do this by taking the original affiliation matrix, and pre-multiplying it by a **diagonal square matrix** $\mathbf{D}_P^{-1}$ of dimensions $M \times M$ containing the *inverse* of the degrees of each person in the affiliation network along the diagonals and zeros everywhere else, yielding the row-stochastic matrix $\mathbf{P}_{PG}$ of dimensions $M \times N$:

$$
\mathbf{P}_{PG} = \mathbf{D}_P^{-1}\mathbf{A}
$$

And we can do the same with the groups, except that we pre-multiply the *transpose* of the original affiliation matrix by $\mathbf{D}_G^{-1}$ which is an $N \times N$ matrix containing the inverse of the size of each group along the diagonals and zero everywhere else, this yields the matrix $\mathbf{P}_{GP}$ of dimensions $N \times M$:

$$
\mathbf{P}_{GP} = \mathbf{D}_G^{-1}\mathbf{A}^T
$$

In `R` can compute $\mathbf{P}_{PG}$ and $\mathbf{P}_{GP}$, using the classic Southern Women two-mode data, as follows:

```{r}
   library(igraph)
   library(networkdata)
   g <- southern_women #southern women data
   A <- as.matrix(as_biadjacency_matrix(g)) #bi-adjacency matrix
   D.p <- diag(1/rowSums(A)) #inverse of degree matrix of persons
   P.pg <- D.p %*% A
   rownames(P.pg) <- rownames(A) 
   D.g <- diag(1/colSums(A)) #inverse of degree matrix of groups
   P.gp <- D.g %*% t(A)
   rownames(P.gp) <- colnames(A)
```

And we can check that both $\mathbf{P}_{PG}$ and $\mathbf{P}_{GP}$ are indeed row stochastic:

```{r}
   rowSums(P.pg)
   rowSums(P.gp)
```

And that they are of the predicted dimensions:

```{r}
   dim(P.pg)
   dim(P.pg)
```

Great! Now, we can obtain the *degree-normalized projections* for people by multiplying $\mathbf{P}_{PG}$ times $\mathbf{P}_{GP}$:

$$
\mathbf{P}_{PP} = \mathbf{P}_{PG}\mathbf{P}_{GP}
$$

Which produces the matrix $\mathbf{P}_{PP}$ a square $M \times M$ matrix containing the *degree-normalized similarities* between each pair of people.

We then do the same for groups:

$$
\mathbf{P}_{GG} = \mathbf{P}_{GP}\mathbf{P}_{PG}
$$

Which produces the matrix $\mathbf{P}_{GG}$ a square $N \times N$ matrix containing the *degree-normalized similarities* between each pair of groups.

In `R` we obtain these matrices as follows:

```{r}
   P.pp <- P.pg %*% P.gp
   P.gg <- P.gp %*% P.pg
```

Which are still row stochastic--but now square--matrices:

```{r}
   rowSums(P.pp)
   rowSums(P.gg)
   dim(P.pp)
   dim(P.gg)
```

Let's peek inside one of these matrices:

```{r}
   round(head(P.pp), 3)
```

What are these numbers? Well, they can be interpreted as *probabilities* that a random walker starting at the row node and, following any sequence of $person-group-person'-group'$ hops, will reach the column person. Thus, higher values indicate an *affinity* or *proximity* between the people (and the groups in the corresponding matrix).

## Performing CA

We went through all these steps because CA is equivalent to the eigendecomposition of the last two square matrices we obtained, namely, $\mathbf{P_{PP}}$ and $\mathbf{P_{GG}}$:

```{r}
   CA.p <- eigen(P.pp)
   CA.g <- eigen(P.gg)
```

Let's see what we have here:

```{r}
   round(CA.p$values, 2)
   round(CA.g$values, 2)
```

So the two matrices have identical eigenvalues, and the first one is 1.0. 

Let's check out the first three eigenvectors:

```{r}
   rownames(CA.p$vectors) <- rownames(A)
   rownames(CA.g$vectors) <- colnames(A)
   round(CA.p$vectors[, 1:3], 2)
   round(CA.g$vectors[, 1:3], 2)
```

So this is interesting. The first eigenvector of the decomposition of both $\mathbf{P_{PP}}$ and $\mathbf{P_{GG}}$ is just the same number for each person and group. Note that this is the eigenvector that is associated with the first eigenvalue which happens to be $\lambda_1 = 1.0$.

So it looks like the first eigenvector is a pretty useless quantity (a constant) so we can discard it, keeping all the other ones. Now the old second eigenvector is the first, the old third is the second, and so on:

```{r}
   eig.vec.p <- CA.p$vectors[, 2:ncol(CA.p$vectors)]
   eig.vec.g <- CA.g$vectors[, 2:ncol(CA.g$vectors)]
```

Note that the rest of the eigenvalues (discarding the 1.0 one) are arranged in descending order:

```{r}
   eig.vals <- CA.p$values[2:length(CA.p$values)]
   round(eig.vals, 3)
```

The magnitude of the eigenvalue tells us how important is the related eigenvector in containing information about the original matrix. It looks like here, the first two eigenvectors contain a good chunk of the info. 

We can check how much exactly by computing the ratio between the sum of the first two eigenvalues over the sum of all the eigenvalues:

```{r}
   round(sum(eig.vals[1:2])/sum(eig.vals), 2)
```

Which tells us that the first two eigenvectors account for about 57% of the action (or more precisely we could reconstruct the original matrix with 57% accuracy using just these two eigenvectors and associated eigenvalues). 

Because the magnitude of the CA eigenvectors don't have a natural scale, it is common to normalize them to have a variance of 1.0 [@fouss_etal16, p. 399], and the multiplying them by the square root of the eigenvalue corresponding to that dimension, so that the new variance is scaled to the importance of that dimension. 

We can perform the normalization of the raw CA scores using the following function, which performs CA on the affiliation matrix:

```{r}
   norm.CA.vec <- function(x, s = 0.000001) {
      D.p <- diag(rowSums(x)) #degree matrix for persons
      D.g <- diag(colSums(x)) #degree matrix for groups
      i.Dp <- solve(D.p) #inverse of degree matrix for persons
      i.Dg <- solve(D.g) #inverse of degree matrix for groups
      CA.p <- eigen(i.Dp %*% x %*% i.Dg %*% t(x)) #person CA
      CA.g <- eigen(i.Dg %*% t(x) %*% i.Dp %*% x) #group CA
      ev <- CA.p$values[2:length(CA.p$values)]
      ev <- ev[which(ev > s)]
      m <- length(ev)
      CA.p <- CA.p$vectors[, 2:ncol(CA.p$vectors)]
      CA.g <- CA.g$vectors[, 2:ncol(CA.g$vectors)]
      rownames(CA.p) <- rownames(A)
      rownames(CA.g) <- colnames(A)
      Z.u.p <- matrix(0, nrow(x), m)
      Z.u.g <- matrix(0, ncol(x), m)
      Z.v.p <- matrix(0, nrow(x), m)
      Z.v.g <- matrix(0, ncol(x), m)
      rownames(Z.u.p) <- rownames(x)
      rownames(Z.u.g) <- colnames(x)
      rownames(Z.v.p) <- rownames(x)
      rownames(Z.v.g) <- colnames(x)
      for (i in 1:m) {
         ev.p <- as.matrix(CA.p[, i])
         ev.g <- as.matrix(CA.g[, i])
         norm.p <- as.numeric(t(ev.p) %*% D.p %*% ev.p) #person norm
         Z.u.p[, i] <- ev.p * sqrt(sum(A)/norm.p) #normalizing to unit variance
         Z.v.p[, i] <- Z.u.p[, i] * sqrt(ev[i]) #normalizing to square root of eigenvalue
         norm.g <- as.numeric(t(ev.g) %*% D.g %*% ev.g) #group norm
         Z.u.g[, i] <- ev.g * sqrt(sum(A)/norm.g) #normalizing to unit variance
         Z.v.g[, i] <- Z.u.g[, i] * sqrt(ev[i]) #normalizing to square root of eigenvalue
      }
   return(list(Z.u.p = Z.u.p, Z.u.g = Z.u.g,
               Z.v.p = Z.v.p, Z.v.g = Z.v.g))
   }
```

This function takes the bi-adjacency matrix as input and returns two new set of normalized CA scores for both persons and groups as output. The normalized CA scores are stored in four separate matrices: $\mathbf{Z_P^U}, \mathbf{Z_G^U}, \mathbf{Z_P^V}, \mathbf{Z_G^V}$. 

One person-group set of scores is normalized to unit variance (`Z.u.p` and `Z.u.g`) and the other person-group set of scores is normalized to the scale of the eigenvalue corresponding to each CA dimension for both persons and groups (`Z.v.p` and `Z.v.g`).

Let's see the normalization function at work, extracting the first two dimensions for persons and groups (the first two columns of each $\mathbf{Z}$ matrix):

```{r}
   CA.res <- norm.CA.vec(A)
   uni.p <- CA.res$Z.u.p[, 1:2]
   uni.g <- CA.res$Z.u.g[, 1:2]
   val.p <- CA.res$Z.v.p[, 1:2]
   val.g <- CA.res$Z.v.g[, 1:2]
   round(uni.p, 2)
   round(uni.g, 2)
   round(val.p, 2)
   round(val.g, 2)
```

Great! Now we have two sets (unit variance versus eigenvalue variance) of normalized CA scores for persons and groups on the first two dimensions. 

## The Duality of CA Scores Between Persons and Groups

Just like as we saw with the eigenvector centrality in the last handout, there is a *duality* between the CA scores assigned to the person and the groups on each dimension, such that the scores for each person are a weighted sum of the scores assigned to each group on that dimension and vice versa [@faust97, 171]. 

The main difference is that this time we sum scores across the $\mathbf{P_P}$ and $\mathbf{P_G}$ matrices rather than the original affiliation matrix and its transpose, resulting in *degree-weighted* sums of scores for both persons and groups.

So for any given person, on any given dimension, let's say $EVELYN$, her CA score is given by the sum of the (unit variance normalized) CA scores of the groups she belongs to weighted by her degree (done by multiplying each CA score by the relevant cell in Evelyn's row of the $\mathbf{P}_{PG}$ matrix):

```{r}
   sum(P.pg["EVELYN", ] * uni.g[, 1]) 
```

Which is the same as the (eigenvalue variance) normalized score we obtained via CA for $EVELYN$:

```{r}
   val.p["EVELYN", 1]
```

A similar story applies to groups. Each group score is the group-size-weighted sum of the (unit variance normalized) CA scores of the people who join it:

```{r}
   sum(P.gp["6/27", ] * uni.p[, 1])
```

Which is the same as the (eigenvalue variance normalized) score we obtained via CA:

```{r}
    val.g["6/27", 1]  
```

Neat! Duality at work.

## Visualizing Two-Mode Networks Using CA

And, finally, we can use the first two (eigenvalue variance) normalized CA scores to plot the persons and groups in a common two-dimensional space:

```{r}
   val.g[, 2] <- val.g[, 2]*-1 #flippling sign of group scores on second dimension for plotting purposes
   plot.dat <- data.frame(rbind(uni.p, val.g)) %>% 
      cbind(type = as.factor(c(rep(1, 18), rep(2, 14))))
   library(ggplot2)
   # install.packages("ggrepel")
   library(ggrepel)
   p <- ggplot(data = plot.dat, aes(x = X1, y = X2, color = type))
   p <- p + geom_hline(aes(yintercept = 0), color = "gray")
   p <- p + geom_vline(aes(xintercept = 0), color = "gray")
   p <- p + geom_text_repel(aes(label = rownames(plot.dat)), 
                            max.overlaps = 20, size = 2.75)
   p <- p + theme_minimal()
   p <- p + theme(legend.position = "none",
                  axis.title = element_text(size = 14),
                  axis.text = element_text(size = 12))
   p <- p + scale_color_manual(values = c("red", "blue"))
   p <- p + labs(x = "First Dimension", y = "Second Dimension") 
   p <- p + xlim(-2, 2) + ylim(-2, 4)
   p
```

In this space, people with the most similar patterns of memberships to the most similar groups are placed close to one another. In the same way, groups with the most similar members are placed closed to one another. 

Also like before, we can use the scores obtained from the CA analysis to re-arrange the rows and columns of the original matrix to reveal blocks of maximally similar persons and events:

```{r}
   library(ggcorrplot)
   p <- ggcorrplot(t(A[order(val.p[,1]), order(val.g[,1])]), 
                   colors = c("white", "white", "red")) 
   p <- p + theme(legend.position = "none", 
                  axis.text.y = element_text(size = 8),
                  axis.text.x = element_text(size = 8, angle = 0),
                  )
   p <- p + scale_x_discrete(position = "top") 
   p <- p + geom_hline(yintercept = 6.5, linewidth = 2, color = "blue")
   p <- p + geom_hline(yintercept = 11.5, linewidth = 2, color = "blue")
   p <- p + geom_hline(yintercept = 16.5, linewidth = 2, color = "blue")
   p <- p + geom_vline(xintercept = 9.5, linewidth = 2, color = "blue")
   p <- p + geom_vline(xintercept = 6.5, linewidth = 2, color = "blue")
   p
```

Here CA seems to have detected two separate clusters of actors who preferentially attend two distinct clusters of events! 

The three events in the middle $\{3/15, 9/16, 4/8\}$ don't seem to differentiate between participants in each cluster (everyone attends)--they thus appear near the origin in the CA diagram, indicating a weak association with either dimension. 

However, the events to the left (with clusters of participants in the lower-left) and to the right of the x-axis (with clusters of participants in the upper-right) are attended preferentially by distinct groups of participants; they thus appear at the extreme left and right positions of the first dimension of the CA diagram. 

In the same way, the four people in the middle $\{Ruth, Dorothy, Pearl, Verne\}$ only attend the undifferentiated, popular events, so that means that they are not strongly associated with either cluster of actors (and thus appear near the origin in the CA diagram). The top and bottom participants, by contrast, appear to the extreme right and left in the CA diagram, indicating a strong association with the underlying dimensions.

Note the similarity between this blocking and that obtained from the structural equivalence analysis in the previous handout.

## Community Detection in Bipartite Networks

You may have noticed that the CA analysis of two-mode networks looks a lot like the identification of communities in one-mode networks. The main difference is that in a two-mode network, good communities are composed of clusters of persons and groups well-separated from other clusters of persons and groups. 

As @barber07 noted, we can extend Newman's modularity approach to ascertain whether a given partition identifies a good "community" in the bipartite case. For that, we need a bi-adjacency analog of the modularity matrix $\mathbf{B}$. This is given by:

$$
\mathbf{B} = \mathbf{A}_{(ij)} - \frac{k^p_ik^g_j}{|E|}
$$

Where $k^p_i$ is the number of memberships of the $i^{th}$ person, $k^g_i$ is the number of members of the $j^{th}$ group, and $|E|$ is the number of edges in the bipartite graph.

So in our case, this would be:

```{r}
   d.p <- rowSums(A)
   d.g <- colSums(A)
   B <- A - matrix(d.p * d.g, nrow = nrow(A), ncol = ncol(A), byrow = TRUE)/sum(A)
   round(B, 2)
```

Neat! Like before the numbers in this matrix represent the expected probability of observing a tie in a world in which people keep their number of memberships and groups keep their observed sizes, but otherwise, people and groups connect at random. 

We can also create a bipartite matrix version of the bi-adjacency modularity, as follows:

```{r}
   n <- vcount(g)
   Np <- nrow(A)
   names <- c(rownames(A), colnames(A))
   B2 <- matrix(0, n, n) #all zeros matrix of dimensions (p + g) X (p + g)
   B2[1:Np, (Np + 1):n] <- B #putting B in the top right block
   B2[(Np + 1):n, 1:Np] <- t(B) #putting B transpose in the lower-left block
   rownames(B2) <- names
   colnames(B2) <- names
   round(B2, 2)
```

Which is a bipartite version of modularity matrix ($\mathbf{\hat{B}}$) with the same block structure as the bipartite adjacency matrix:

$$
\mathbf{\hat{B}} = \left[
\begin{matrix}
\mathbf{O}_{M \times M} & \mathbf{B}_{M \times N} \\
\mathbf{B}^T_{N \times M} & \mathbf{O}_{N \times N}
\end{matrix}
\right]
$$

Note that in $\mathbf{\hat{B}}$ the modularity (expected number of edges) is set to zero for nodes of the same set (people and people; groups and groups), and to non-zero values for nodes of different sets (persons and groups).

Now, we can use the same approach we used in the unipartite case to check the modularity of some hypothetical partition of the nodes in the graph. 

Take for instance, the CA scores in the first dimension that we obtained earlier. They do seem to divide the persons and groups into distinct communities. So let's transform them into membership vectors (using dummy coding):


```{r}
   u1 <- rep(0, n)
   u2 <- rep(0, n)
   d <- c(eig.vec.p[, 1], eig.vec.g[, 1]) #original CA scores
   u1[which(d > 0)] <- 1
   u2[which(d <= 0)] <- 1
   U <- cbind(u1, u2)
   rownames(U) <- rownames(B2)
   U
```

Recall that we can check the modularity of a partition coded in a dummy matrix like `U` using the formula:

$$
\frac{tr(U^TBU)}{\sum_i\sum_ja_{ij}}
$$

Where $tr$ is the trace matrix operation (sum of the diagonals).

Let's check it out:

```{r}
   A2 <- as.matrix(as_adjacency_matrix(g))
   round(sum(diag(t(U) %*% B2 %*% U))/sum(A2), 3)
```

Which looks pretty good!

Here's a plot of the bipartite graph with nodes colored by the CA induced community bipartition:

```{r}
#| fig-height: 12
#| fig-width: 12
#| fig-cap: Southern Women's bipartite graph by the best two-community partition according to CA. 
   V(g)$type <- bipartite_mapping(g)$type
   V(g)$shape <- ifelse(V(g)$type, "square", "circle")
   V(g)$color <- (U[, 1] - U[, 2]) + 2
   set.seed(123)
   plot(g, 
     vertex.size=7, vertex.frame.color="lightgray", 
     vertex.label.dist = 1.5, edge.curved=0.2, 
     vertex.label.cex = 1.35)
```


