---
title: "Handling Graph Objects in Lists"
execute: 
  eval: true
  echo: true
  output: true
  warning: false
  message: false
format: 
   html:
      code-line-numbers: true
---

Sometimes network data comes pre-stored as an `R` **list**. This is typical if you have a network with multiple kinds of ties recorded on the same set of actors (and thus multiple networks), or longitudinal network data, where we collect multiple "snapshots" of the same system (containing the same or more typically a different set of actors per time slice). 

The `networkdata` package contains one such data set called `atp`. It's a network of Tennis players who played in grand slam or official matches of the Association of Tennis Professionals (hence ATP) covering the years 1968-2021 [@radicchi2011best]. 

In the directed graph representing each network, a tie goes **from** the *loser* **to** the *winner* of each match. Accordingly, it can be interpreted as a directed "deference" network (it would be a dominance network if it was the other way around), where actor *i* "defers" to actor *j* by getting their ass kicked by them. 

Let's see how this list of networks works:

```{r}
   library(networkdata)
   library(igraph)
   g <- atp
   head(g)
```

We create a graph object and then examine its contents, which we can see is a set of graph objects. In unnamed `R` lists each of the objects inside is indexed by a number in double brackets. So [[6]] just means the sixth network in the list object (corresponding to the year 1973).

Now let's say we wanted to compute a network statistic like density. One way to proceed would be:

```{r}
#| message: true
#| error: true
   edge_density(g)
```

Which gives us a weird error about the wrong object type. The reason is that `edge_density` expects an `igraph` graph object as input, but g is not a graph object it is a *list* of such objects. For it to work you have to reference a particular *element inside the list* not the whole list. 

To do that, we use the double bracket notation:

```{r}
   edge_density(g[[6]])
```

Which gives us the density for the 1973 network. 

### Looping Through Lists

But what if we wanted a table of network statistics for all the years or some subset of years? Of course, we could just type a million versions of the `edge_density` command or whatever, but that would be tedious. We could also write a `for` loop or something like that (less tedious). Even less tedious is to use the many `apply` functions in `R` that are designed to work with lists, which is a subject onto itself in `R` programming.

But here we can just use the simple version. Let's say we wanted a vector of densities (or any other whole network statistic) for the whole 54 years. In that case, our friend `sapply` can do the job: 

```{r}
   sapply(g, edge_density)
```

`sapply` is kind of a "meta" function that takes two inputs: A list, and *the name* of a function (which could be native, a package, or user defined); `sapply` then "applies" that function to each element inside the list. Here we asked `R` to apply the function `edge_density` to each element of the list of networks g and it obliged, creating a vector of length 54 containing the info.

We could use any `igraph` function, like number of nodes in the graph:

```{r}
   sapply(g, vcount)
```

We could also select *subset* of elements inside the list. For instance this counts the number of nodes for the first five years:

```{r}
   sapply(g[1:5], vcount)
```

Or for years 2, 6, 8, and 12:

```{r}
   sapply(g[c(2, 6, 8, 12)], vcount)
```

Note the *single bracket* notation here to refer to subsets of elements in the list. Inside the brackets we could put any arbitrary vector, as long as the numbers in the vector do no exceed the length of the list. 

Of course, sometimes the functions we apply to elements of the list don't return single numbers but vectors or other igraph objects. In that case it would be better to use `lapply` which is just like `sapply` but returns another list with the set of answers inside it. 

For instance, let's say we wanted the top five players for each year. In this deference network, a "top" player is one who beats many others, which means they have high **indegree** (lots of losers pointing at them). 

First we create a custom function to compute the indegree and return an ordered named vector of top 5 players:

```{r}
   top5 <- function(x) {
      library(igraph)
      t <- degree(x, mode = "in")
      t <- sort(t, decreasing = TRUE)[1:5]
      return(t)
   }
```

Now, we can just feed that function to `lapply`:

```{r}
   top.list <- lapply(g, top5)
   head(top.list)
```

Which is a list of named vectors containing the number of victories of the top five players each year. 

Because the object `top.list` is just a list, we can subset it just like before. Let's say we wanted to see the top players for more recent years:

```{r}
   top.list[49:54]
```

A series of names which make sense to you if you follow Tennis. 

### Naming Lists
Finally, sometimes it useful to *name* the elements of a list. In this case, for instance, having the year number would be easier to remember what's what. For this, you can use the `names` command, which works via standard `R` assignment:

```{r}
   names(g) <- c(1968:2021)
   head(g)
```

Now instead of the useless one, two, three, etc. names, we have the actual year numbers as the names of the elements on each list. 

So if we wanted to know the top five players for 1988 we could just type:

```{r}
   top5(g[["1988"]])
```

Note the double bracket notation and the fact that the name of the list is a character not a number (hence the scare quotes).

If we don't want to remember the bracket business, we could also use the $ operator to refer to particular list elements:

```{r}
   top5(g$"1988")
```

Of course, we can also use the names to subset the list. Let's say we wanted the top five players for 1970, 1980, 1990, 2000, 2010, and 2020. 

All we have to do is type:

```{r}
   decades <- c("1970", "1980", "1990", "2000", "2010", "2020")
   lapply(g[decades], top5)
```

Note that we are back to the single bracket notation.

With a bit of practice, lists will become your friends!





