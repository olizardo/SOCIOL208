---
title: "Network Regression Using Permutation"
execute: 
  eval: true
  echo: true
  output: true
  warning: false
  message: false
format: 
   html:
      code-line-numbers: true
---

## Cross-Network Correlation Using Permutation
Consider the case where we measure two or more ties on the same set of actors. In that case, we could entertain hypotheses of the form: Is having a tie of type $A$ positively or negatively correlated with a tie of type $B$? 

We can use an approach similar to the edge-swapping strategy to answer this question, since a bivariate correlation between ties between two networks is just like the univariate statistics we computed earlier (in that case the modularity, but it could been any network level statistic like the diameter or centralization).

Let's see an example. Suppose we have a hypothesis that the relation of "friendship" should be correlated to that of "advice"; that is, *people are more likely to seek advice from friends*. 

The Krackhardt High-Tech Managers data contains network information on both the advice and friendship relations between the actors. Let's load up the advice network:

```{r}
   library(networkdata)
   library(igraph)
   g <- as_undirected(ht_friends, mode = "collapse")
   g2 <- as_undirected(ht_advice, mode = "collapse")
```

And extract the corresponding adjacency matrices:

```{r}
   A.f <- as.matrix(as_adjacency_matrix(g))
   A.d <- as.matrix(as_adjacency_matrix(g2))
```

The correlation between these two ties is then:

```{r}
   r <- cor(as.vector(A.f), as.vector(A.d))
   round(r, 2)
```

Which is obtained by "vectorizing" the matrices and computing the Pearson correlation between the dyad vector (of length $21 \times 21 = 441$) corresponding to friendship ties and the dyad vector corresponding to advice ties. 

Here, we see that there is a positive correlation between the two ($r = 0.26$) suggesting people tend to seek advice from friends (or befriend their advisors/advisees, as correlations don't imply directionality).

However, is this correlation larger than we would expect by chance? For that, we need to know the range of correlations that would be obtained between on of the networks (e.g., advice) and a suitably randomized version of the other (e.g., friendship).

The "permutation" approach [@borgatti_etal24, Chap. 14]---sometimes referred to by the less-than-wieldy name of the **Quadratic Assignment Procedure** (QAP) [@krackhardt88]---allows us to do that.

Recall from our discussion of blockmodeling that a permutation of an adjacency matrix is just a reshuffling of its rows and columns. 

For instance the original adjacency matrix of the Krackhardt Managers friendship nomination network is shown in @tbl-perm-1.

We can permute the rows and columns of the matrix by randomly sampling numbers between 1 and 21 (the number of nodes in the network) and re-ordering the rows and columns of the matrix according to this new vector:

```{r}
   s <- sample(1:nrow(A.f))
   s
   A.f.perm <- A.f[s, s]
```

The new permuted matrix is shown in @tbl-perm-2.


```{r}
#| label: tbl-perm
#| layout-ncol: 2
#| tbl-cap: "An adjacency matrix and a permuted version"
#| tbl-subcap: 
#|   - "Original."
#|   - "Permuted."
#| echo: false 

   library(kableExtra)
   kbl(A.f, format = "html")
   kbl(A.f.perm, format = "html")
```


Note that when we lose the labels on the nodes the permuted matrix contains that same information as the original, but scrambles the node labels. 

So, in contrast to the [edge swapping approach](swap.qmd), which preserves *some* graph characteristics but loses others, in the permutation approach, *every* graph-level characteristic stays the same:

```{r}
   g.perm <- graph_from_adjacency_matrix(A.f.perm, mode = "undirected")
   degree(g.perm)
   degree(g)
   #degree sequence
   sort(degree(g.perm), decreasing = TRUE)
   sort(degree(g), decreasing = TRUE)
   #diameter
   mean(distances(g.perm))
   mean(distances(g))
   #betweenness centralization
   round(centr_betw(g.perm)$centralization, 2)
   round(centr_betw(g)$centralization, 2)
```

A function that takes an undirected graph as input, permutes the corresponding adjacency matrix and returns the new graph as output looks like:


```{r}
   perm <- function(z) {
      x <- as.matrix(as_adjacency_matrix(z))
      s <- sample(1:nrow(x))
      x <- x[s, s] #permuting matrix
      w <- graph_from_adjacency_matrix(x, mode = "undirected")
      return(w)
   }
```

So to get a p-value for our cross-tie correlation all we need to do is to compute the correlation between the original advice network and a set of permuted graphs of the friendship network. 

First, we create a 1000 graph ensemble of permuted friendship networks:


```{r}
   set.seed(12345)
   G <- replicate(1000, perm(g), simplify = FALSE)
```

Then we write a function for computing the correlation between two networks:

```{r}
   cor.net <- function(x1, x2) {
   a <- as.matrix(as_adjacency_matrix(x1))
   b <- as.matrix(as_adjacency_matrix(x2))      
   r <- cor(as.vector(a), as.vector(b))
   return(r)
   }
```

And now we compute our correlation vector showing the first 100 elements:


```{r}
   corrs <- round(sapply(G, cor.net, x2 = g2), 2)
   corrs[1:100]
```

And here's a plot of where our estimated value sits on the grand scheme of things:


```{r}
   library(ggplot2)
   p <- ggplot(data = data.frame(corrs), aes(x = corrs))
   p <- p + geom_histogram(binwidth = 0.025, stat = "bin", fill = "darkblue")
   p <- p + geom_vline(xintercept = r, 
                       color = "red", linetype = 1, linewidth = 1.5)
   p <- p + geom_vline(xintercept = 0, linetype = 1, 
                       color = "purple", linewidth = 1.5)
   p <- p + theme_minimal() + labs(x = "Friendship/Advice Correlation", y = "Freq.")
   p <- p + theme(axis.text = element_text(size = 12))
   p <- p + annotate("text", x=-0.04, y=150, label= "Zero Point", color = "purple")
   p <- p + annotate("text", x=0.22, y=150, label= "Obs. Value", color = "red")
   p
```

This looks pretty good, with only a tiny proportion of the correlations exceeding the observed value.

We can check our p-value like before:

```{r}
   quantile(corrs, probs = 0.99)
   r > quantile(corrs, probs = 0.99)
   1 - ecdf(corrs)(r)
```

Which shows that the correlation between advice and friendship is significant at the $p = 0.001$ level ($p<0.01$). 

Note that the result is also statistically significant using a two-tailed test:

```{r}
   1 - ecdf(abs(corrs))(r)
```

## Cross-Network Regression Using Permutation

The permutation (QAP) approach can be extended to considering more than two network variables at the same time, which moves us into multivariable territory. The Krackhardt Managers data also contains information on *formal* links in the organization in the form of a graph of unidirectional "reports to whom" network, shown below:

```{r}
#| fig-width: 8
#| fig-height: 8
#| fig-cap: "Who reports to whom in the Krackhardt Manager's data."
   plot(ht_reports)
```

We can see that there are four middle managers (2, 14, 18, and 21) all of whom report to the top manager (7).

So let's say we wanted to predict advice ties from friendship ties while adjusting for the present of formal reporting ties. We could just run a regression like this:

```{r}
   A.r <- as.matrix(as_adjacency_matrix(
      as_undirected(ht_reports, mode = "collapse")))
   ht.dat <- data.frame(frs = as.vector(A.f), adv = as.vector(A.d), rep = as.vector(A.r))
   reg.res <- lm(adv ~ frs + rep, data = ht.dat)
   summary(reg.res)
```

Which shows that friendship has a statistically significant positive effect on being ties via an advice tie, net of the formal hierarchical link, which also has a positive effect.

Of course, if you know anything about classical inference, you know the standard errors and associated t-statistics are useless, because the "cases" in the regression above are dyads, and they are *not* independent from one another because they form...a network!

So we can use the permutation approach to get more credible p-values like we did with the correlation, turning the above into a "QAP Regression." 

The basic idea is just to run the regression many times, while permuting the outcome variable; this would produce a distribution of coefficient estimates, and we can select the p-value non-parametrically like we did earlier.

Here's a function that will run a regression and collect the coefficients:

```{r}
   run.reg <- function(x, indvars, dat) {
      w <- as.matrix(as_adjacency_matrix(x))
      dat <- data.frame(y.perm = as.vector(w), dat)
      reg.res <- lm(reformulate(indvars, "y.perm"), data = dat)
      return(as.vector(reg.res$coefficients))
   }
```

We now create a graph ensemble of 1000 permuted advice networks:

```{r}
   set.seed(12345)
   G2 <- replicate(1000, perm(g2), simplify = FALSE)
```

And now we run the regression on our 1000 strong ensemble of permuted advice network graphs:

```{r}
   reg.list <- lapply(G2, run.reg, 
                      indvars = c("frs", "rep"), dat = ht.dat)
   betas <- as.matrix(do.call(rbind, reg.list))
   colnames(betas) <- c("Int.Est", "Fr.Est", "Rep.Est")
   head(betas) 
```

And now we compute the p-values as before and gather them into a table:

```{r}
   p.vals <- c(1 - ecdf(abs(betas[, 1]))(reg.res$coefficients[1]),
               1 - ecdf(abs(betas[, 2]))(reg.res$coefficients[2]),
               1 - ecdf(abs(betas[, 3]))(reg.res$coefficients[3])
               )
   z.scores <- round(abs(qnorm(p.vals)), 3)
   z.scores[1] <- "--"
   reg.tab <- data.frame(reg.res$coefficients, z.scores, p.vals)
   rownames(reg.tab) <- c("Intercept", "Friend Tie", "Formal Tie")
   names(reg.tab) <- c("Estimate", "z-score", "p-value")
   kbl(reg.tab[c(2:3), ], rownames = TRUE, format = "html", digits = 3,
       caption = "Predictors of Advice Ties") %>% 
             column_spec(1, italic = TRUE) %>% 
      kable_styling(full_width = TRUE,
                     bootstrap_options = c("hover", 
                                           "condensed", 
                                           "responsive")) 
```

Which shows that indeed friendship and formal reporting ties are both statistically significant predictors of advice ties after accounting for network interdependencies.
