---
title: "Analyzing Ego Networks"
execute: 
  eval: true
  echo: true
  output: true
  warning: false
  message: false
format: 
   html:
      code-line-numbers: true
---

## Ego Networks and Ego Network Data

An ego-network, is just a **subgraph** of a larger network that includes a node of interest ("ego"), all of the connections between ego and their neighbors (called "alters") and usually all of the connections between each of the alters. 

**Ego network data** is social network data collected in such way (e.g., using standard social survey techniques) that you capture the ego networks of some set of people, usually a convenience sample or, more rarely, a probability sample of some population. 

Once you have ego network data you can analyze each ego graph using the standard techniques we learned so far (if you are only interested in the structural characteristics of the ego graph).

If you have attributes on each alter, you can alternatively compute measures of **diversity** to or **homophily** to get a sense of how likely ego is to connect to similar or diverse others.

## Structural Measures

### The Clustering Coefficient

Perhaps the most basic structural characteristic of an ego network is the density of the subgraph formed by all of the connections between the alters. This is called ego's **clustering coefficient**.  

Let's see how it works. First we load up the *New Hope* Star Wars social network included in the `networkdata`` package [@gabasova16]:

```{r}
   library(networkdata)
   g <- starwars[[4]]
```

As we said an ego graph is just a subgraph centered on a particular actor. So R2-D2's ego graph is just:

```{r}
   library(igraph)
   N <- neighbors(g, "R2-D2")
   r2d2 <- subgraph(g, c("R2-D2", names(N)))
```

And we can just plot it like we would any `igraph` object:

```{r}
#| fig-height: 8
#| fig-width: 8
#| fig-cap: "R2-D2's Ego Network."
   V(r2d2)$color <- c(1, rep(2, length(N)))
   plot(r2d2, 
     vertex.size=10, vertex.frame.color="lightgray", 
     vertex.label.dist=2, 
     layout = layout_(r2d2, as_star()),
     vertex.label.cex = 1.25, edge.color = "lightgray")
```

Note that we use the `as_star()` option for the layout, so that the ego is put in the center of the star graph surrounded by their alters.

R2-D2's clustering coefficient is just the density of the graph that includes only the alters:

```{r}
   r2d2.alters <- r2d2 - vertex("R2-D2")
   C <- round(edge_density(r2d2.alters), 2)
   C
```

The clustering coefficient $C_i$ for an ego $i$ ranges from zero to one. $C = 0$ means that *none* of ego's alters are connected to one another and $C = 1$ means that *all* of ego's alters are connected to one another. In this case, $C = `r C`$ means that `r C*100`% of R2-D2's alters are connected (co-appear in scenes) with one another. 

Typically we would want to compute the clustering coefficient of every node in a graph. This can be done using our trusty `lapply` and `sapply` meta-functions:

```{r}
   create.ego <- function(x, w) {
      alter.net <- subgraph(w, neighbors(w, x))
      return(alter.net)
      }
   ego.graphs <- lapply(V(g)$name, create.ego, w = g)
   head(ego.graphs)
```

First, we turn the code we used to find R2-D2's ego graph into a function, then we apply the function to each node in the network. The result is a `list` object with $|V| = `r vcount(g)`$ ego subgraphs composed of each node's alters and their connections. 

Now, to find out the clustering coefficient of each node, we just type:

```{r}
   C <- round(sapply(ego.graphs, edge_density), 2)
   names(C) <- V(g)$name
   C
```

Note we have a couple of `NaN` values in the slots corresponding to Greedo and Jabba in the clustering coefficient vector. 

Let's check out why:

```{r}
   degree(g)
```

Here we see the problem is that both Greedo and Jabba are singleton nodes (with degree equal to one), so it doesn't make sense to analyze their clustering coefficients because their ego graph is just an isolated node!

We can just drop them and re-analyze:

```{r}
   g <- subgraph(g, degree(g)> 1)
   ego.graphs <- lapply(V(g)$name, create.ego, w = g)
   C <- round(sapply(ego.graphs, edge_density), 2)
   names(C) <- V(g)$name
   C
```

Much better!

Note that in this analysis, Luke has the lowest clustering coefficient ($C = 0.34$) this usually indicates an ego whose alters are partitioned into distinct clusters (and hence they are not connected to one another), and ego is a mediator or *broker* between those clusters.

Let's see what that looks like:

```{r}
#| fig-height: 8
#| fig-width: 8
#| fig-cap: "Luke's ego network with alter nodes colored by community assingment via Newman's leading eigenvector method."
   set.seed(456)
   N <- neighbors(g, "LUKE")
   luke.alters <- subgraph(g, N)  
   V(luke.alters)$color <- cluster_leading_eigen(luke.alters)$membership
   luke <- subgraph(g, c("LUKE", names(N)))
   luke <- simplify(union(luke, luke.alters))
   V(luke)$color[which(is.na(V(luke)$color))] <- "red"
   plot(luke, 
     vertex.size=6, vertex.frame.color="lightgray", 
     vertex.label.dist=1.25,  
     vertex.label.cex = 0.75, edge.color = "lightgray")
```

Here we can see that Luke mediates between the Rebel Pilot community on the left and the Obi-Wan, Leia, Chewbacca, Han Solo and Droid communities on the right. 

Note that in the ego graph that includes ego, each connected alter is a **triangle** in the ego graph. So the clustering coefficient is simply a count of the *number of undirected triangles that are centered on ego*, or the number of *cycles of length three centered on ego*. 

So that means that the diagonals of the cube of the adjacency matrix also contain the information needed to compute the clustering coefficient:

```{r}
   A <- as.matrix(as_adjacency_matrix(g))
   A3 <- A %*% A %*% A
   diag(A3)
```

So all we need to do is divide these numbers by the maximum possible number of undirected triangles that could be centered on a node, which is $k_i(k_i - 1)$ where $k_i$ is ego's degree:

```{r}
   k <- degree(g)
   C <- diag(A3)/(k*(k - 1))
   round(C, 2)
```

Which gives us the answer as before!

Finally, from each ego's clustering coefficient (sometimes called the **local clustering coefficient** of each node) we can compute the graph's **global clustering coefficient** which is just the average this quantity across each node in the graph:

$$
C(G) = \frac{1}{N}\sum_iC_i
$$

In `R`:

```{r}
   C.glob <- mean(C)
   round(C.glob, 2)
```

Which indicates a fairly clustered graph. 

In `igraph` we can use the function `transitivity` to compute the local and global clustering coefficients, which can be specified using the argument `type`. For the local version, the function also expects a list of vertices:

```{r}
   round(transitivity(g, V(g)$name, type = "local"), 2)
```

And the graph's global clustering coefficient is:

```{r}
   round(transitivity(g, type = "average"), 2)
```

### Ego-Network Betweenness

An alternative structural measure of ego's position in the ego network, closely related to the clustering coefficient, is **ego network betweenness**. 

As @everett_borgatti05 note, in an ego network betweenness is determined by the number of paths of length two that involve ego, that is, by the number of disconnected alters. 

Therefore, if $\mathbf{A}$ is the adjacency matrix recording the links between the alters, then $\mathbf{A}^2$ will contain the number of paths of length two between each pair of alters. Because we are only interested in the number of paths of length two between each pair of *disconnected* alters, we multiply (element-wise) this matrix by the adjacency matrix corresponding to the **graph complement** (a matrix with a one for every zero in the original adjacency matrix and a zero for each one). We then take the sum of the reciprocals of one of the triangles (excluding the main diagonal) of the resulting matrix to find the betweenness of ego. 

In math:

$$
C_B(Ego) = \sum_{i < j}\left[\mathbf{A}^2 \bullet (\mathbf{J} - \mathbf{A})\right]_{ij}^{-1}
$$

Where $\mathbf{J}$ is a matrix full of ones of the same dimensions as $\mathbf{A}$ and $\bullet$ indicates element-wise matrix multiplication.

A simple function that does this looks like:

```{r}
   ego.bet <- function(x, n) {
      N <- neighbors(x, n)
      alter.net <- subgraph(x, c(n, names(N)))
      A <- as.matrix(as_adjacency_matrix(alter.net))
      A2 <- A %*% A
      J <- matrix(1, nrow(A), ncol(A))
      cb <- A2 * (J - A)
      cb <- 1/cb
      cb[is.infinite(cb)] <- 0
      cb <- sum(cb[upper.tri(cb)])
      return(cb)
   }
```

Let's see how it works for Luke:

```{r}
   round(ego.bet(g, "LUKE"), 2)
```

Which says that Luke has pretty high ego-network betweenness.

We can, of course, compute it for everyone in the network like before:

```{r}
   round(sapply(V(g)$name, ego.bet, x = g), 2)
```

Which confirms our original impression of Luke as the highest ego-network betweenness character with Leia in second place.

What does it mean to have an ego-network betweenness of zero? Well, this is only possible if your clustering coefficient is 1.0, that is, when all of your alters are directly connected to one another. This is evident in Chewbacca's ego network:

```{r}
#| fig-height: 8
#| fig-width: 8
#| fig-cap: "Chewbacca's Ego Network."
   N <- neighbors(g, "CHEWBACCA")
   chew <- subgraph(g, c("CHEWBACCA", names(N)))
   cols <- rep("#56B4E9", vcount(chew))
   names(cols) <- V(chew)$name
   cols[which(names(cols) == "CHEWBACCA")] <- categorical_pal(1)
   V(chew)$color <- cols
   plot(chew, 
     vertex.size=10, vertex.frame.color="lightgray", 
     vertex.label.dist=2, 
     layout = layout_as_star(chew, center = "CHEWBACCA"),
     vertex.label.cex = 1.25, edge.color = "lightgray")
```

Which is a complete clique of size seven.

## Compositional Measures
### Ego Network Diversity

If we have information on the categorical vertex attributes of ego's alters we may be interested in how diverse are ego's choices across those attributes. 

The most common measure is **Blau's Diversity Index** ($H$). For a categorical attribute with $m$ levels, this is given by:

$$
H = 1 - \sum_{k=1}^m p_k^2
$$

Where $p_k$ is the proportion of ego's alters that fall under category level $k$. 

The $H$ measure ranges from a minimum of $H = 0$ (all of ego's alters belong to a single category) to a maximum of $H = 1- \frac{1}{m}$ (all of ego's alters belong to a different category).

When the Blau diversity index is normalized by its theoretical maximum, it is sometimes referred to as the **Index of Qualitative Variation** or $IQV$:

$$
IQV = \frac{1 - \sum_{k=1}^m p_k^2}{1-\frac{1}{m}}
$$

The main difference between $H$ and $IQV$ is that the latter has a maximum of $IQV = 1.0$ indicating the top diversity that can be observed for a categorical attribute with $m$ categories. 

Let's see how this would work. 

First, let's switch to the *Attack of the Clones* Star Wars graph:

```{r}
   g <- starwars[[2]]
   g <- subgraph(g, degree(g)> 1) #removing singletons
```

Now, we will pick the vertex attribute `homeworld` and try to measure how diverse is each character's ego network on this score. 

To do that, we need to get the proportion of characters from each homeworld in the network. 

Let's check out this vertex attribute:

```{r}
   V(g)$homeworld
```

There are some `NA` values here, so let's create a residual category called "other":

```{r}
   V(g)$homeworld[is.na(V(g)$homeworld)] <- "Other"
   V(g)$homeworld
```

Great! Now we can use the native `R` function `table` to get the relevant proportions.

The function `table` gives us the count of characters in each category, and then we divide by the total number of actors in the network, given by `vcount`:

```{r}
   p.hw <- round(table(V(g)$homeworld)/vcount(g), 3)
   p.hw
```

Now that we know how to get the proportions we need, we can write a custom function that will compute $H$ (or its normalized counterpart the $IQV$) for a given ego network for any given attribute:

```{r}
   blau <- function(n, w, a, norm = FALSE) {
      x <- subgraph(w, neighbors(w, n)) #ego subgraph
      att.vec <- vertex_attr(x, a) #number of alters in each category of a
      H <- 1 - sum((table(att.vec)/vcount(x))^2)
      if (norm == TRUE) {H <- H /(1 - (1/length(att.vec)))} #IQV
      return(H)
      }
```

This function takes three inputs: The name of the ego `n`, the graph object `w`, and the name of the attribute `a`. It returns the Blau diversity index score for that ego on that attribute by default; when `norm` is set to `TRUE` it returns the normalized Blau score (a.k.a. the $IQV$). 

Let's see Padme's Home World ego network diversity score:

```{r}
   round(blau("PADME", g, "homeworld"), 3)
```

Which says that Padme has a fairly diverse ego network when it comes to Home World. 

We can, of course, just use `sapply` to compute everyone's Home World ego network diversity score:

```{r}
   round(sapply(V(g)$name, blau, w = g, a = "homeworld"), 3)
```

In this network Count Dooku stands out as having a very diverse ego network by Home World, while Owen sports a very homogeneous ego network on the same attribute. 

Let's see a side-by-side comparison:

```{r}
#| fig-height: 8
#| fig-width: 8
#| fig-cap: "Two Ego Networks with Nodes Colored by Homeworld"
#| fig-subcap:
#|   - ""
#|   - ""
#| layout-ncol: 2   
#| echo: false
   N <- neighbors(g, "COUNT DOOKU")
   cd <- subgraph(g, c("COUNT DOOKU", names(N)))
   V(cd)$color <- as.numeric(as.factor(V(cd)$homeworld))
   plot(cd, 
     vertex.size=10, vertex.frame.color="lightgray", 
     vertex.label.dist=2, 
     layout = layout_as_star(cd, center = "COUNT DOOKU"),
     vertex.label.cex = 1.25, edge.color = "lightgray")
   N <- neighbors(g, "OWEN")
   ow <- subgraph(g, c("OWEN", names(N)))
   V(ow)$color <- as.numeric(as.factor(V(ow)$homeworld))
   plot(ow, 
     vertex.size=10, vertex.frame.color="lightgray", 
     vertex.label.dist=2,  
     layout = layout_as_star(ow, center = "OWEN"),
     vertex.label.cex = 1.25, edge.color = "lightgray")
```

And here are the $IQV$ scores for everyone in the network:

```{r}
   round(sapply(V(g)$name, blau, w = g, 
                a = "homeworld", norm = TRUE), 3)
```

As we noted an ego network with maximum diversity $IQV = 1.0$ is one where every alter is in a different category. Here are two examples:

```{r}
#| fig-height: 8
#| fig-width: 8
#| fig-cap: "Two Ego Networks with Maximum Homeworld Diversity."
#| fig-subcap:
#|   - ""
#|   - ""
#| layout-ncol: 2   
#| echo: false
   N <- neighbors(g, "BOBA FETT")
   cd <- subgraph(g, c("BOBA FETT", names(N)))
   V(cd)$color <- as.numeric(as.factor(V(cd)$homeworld))
   plot(cd, 
     vertex.size=10, vertex.frame.color="lightgray", 
     vertex.label.dist=2, 
     layout = layout_as_star(cd, center = "BOBA FETT"),
     vertex.label.cex = 1.25, edge.color = "lightgray")
   N <- neighbors(g, "CAPTAIN TYPHO")
   ow <- subgraph(g, c("CAPTAIN TYPHO", names(N)))
   V(ow)$color <- as.numeric(as.factor(V(ow)$homeworld))
   plot(ow, 
     vertex.size=10, vertex.frame.color="lightgray", 
     vertex.label.dist=2,  
     layout = layout_as_star(ow, center = "CAPTAIN TYPHO"),
     vertex.label.cex = 1.25, edge.color = "lightgray")
```

### Ego Network Homophily

Diversity measures the extent to which ego's connect to alters who are different from one another. We may also want to get a sense of how *homophilous* an ego network is, namely, the extent to which ego connects to alters that are the same or different from *them*.

For instance, a person can have an ego network composed of 100% alters who are different from them on a given attribute (maximum "heterophily") but those alters could be 100% homogeneous---e.g., all come from the same planet---and thus ego will have the *minimum* Blau diversity score ($H = 0$).  

To measure homophily in the ego network we use the **EI homophily index**. This is given by:

$$
EI = \frac{E-I}{E+I}
$$

Where $E$ is the number of "external" ties (alter different from ego on attribute), and $I$ is the number of "internal" ties (alter same as ego on attribute).

The $EI$ index ranges from a minimum of $EI = -1$, indicating maximum homophily, to a maximum of $EI = 1$, indicating maximum heterophily. An EI index value of zero indicates no preference for internal over external ties. 

So let's write a function that does what we want to calculate EI:

```{r}
   EI <- function(n, w, a) {
      x <- subgraph(w, neighbors(w, n))
      E <- vertex_attr(w, a, n) != vertex_attr(x, a)
      E <- sum(as.numeric(E))
      I <- vertex_attr(w, a, n) == vertex_attr(x, a)
      I <- sum(as.numeric(I))
      ei.index = (E - I)/(E + I)
      return(ei.index)
      }
```

Let's look at the attribute `sex`:

```{r}
   V(g)$sex
```

Getting rid of the `NA` values:

```{r}
   V(g)$sex[is.na(V(g)$sex)] <- "Other"
   V(g)$sex
```

And calculating the homophily index on gender for everyone:

```{r}
   EI <- sapply(V(g)$name, EI, w = g, a = "sex")
   round(EI, 2)
```

As we can see, the Emperor, Mace Windu, Obi-Wan and other such characters have a homophilous "bro" network. Padme, on the other hand, has a heterophilous network with respect to gender. 

Let's see a side-by-side comparison:

```{r}
#| fig-height: 8
#| fig-width: 8
#| fig-cap: "Two Ego Networks with Nodes Colored by Gender"
#| fig-subcap:
#|   - ""
#|   - ""
#| layout-ncol: 2   
#| echo: false
   N <- neighbors(g, "MACE WINDU")
   mw <- subgraph(g, c("MACE WINDU", names(N)))
   V(mw)$color <- as.numeric(as.factor(V(mw)$sex))
   plot(mw, 
     vertex.size=10, vertex.frame.color="lightgray", 
     vertex.label.dist=2, 
     layout = layout_as_star(mw, center = "MACE WINDU"),
     vertex.label.cex = 1.25, edge.color = "lightgray")
   N <- neighbors(g, "PADME")
   p <- subgraph(g, c("PADME", names(N)))
   V(p)$color <- as.numeric(as.factor(V(p)$sex))
   plot(p, 
     vertex.size=10, vertex.frame.color="lightgray", 
     vertex.label.dist=2,  
     layout = layout_as_star(p, center = "PADME"),
     vertex.label.cex = 1.25, edge.color = "lightgray")
```

As we can see, Mace Windu is mostly surrounded by other men (like him) but Padme's network includes only one other woman, and the rest are composed of people with a different gender presentation than her (or have no discernible gender like the droids).

Like the clustering coefficient, we can compute a graph level index of homophily on a given attribute. This is given by the average EI index of nodes in the graph for that attribute.

In the case of gender in *Attack of the Clones*:

```{r}
   EI.gender = mean(EI)
   round(EI.gender, 2)
```

Which shows a slight preference for same-gender ties in the network. 


### Normalized EI

Sometimes we may want to take into account that the group sizes of different categories of people is unequal in the network. For instance, Star Wars is full characters gendered as men, which means that any homophily index will penalize men as being more homophilous simply because there are more men around to form ties with.

The normalized EI, or WEI [@oswal21, p.4] aims to fix this by instead calculating:

$$
E^*=E\left(\frac{N_s}{N - N_s}\right)
$$

$$
WEI = \frac{E^*-I}{E^*+I}
$$


With $N_s$ being the number of "similar" nodes to ego in the whole graph (or external population) and $N$ being the total number of nodes (or persons in the population).

A function that calculates the WEI looks like:

```{r}
   WEI <- function(n, w, a) {
      x <- subgraph(w, neighbors(w, n))
      Ns <- sum(as.numeric(vertex_attr(w, a) == vertex_attr(w, a, n)))
      r <- Ns/(vcount(w) - Ns)
      E <- vertex_attr(w, a, n) != vertex_attr(x, a)
      E <- sum(as.numeric(E))* r
      I <- vertex_attr(w, a, n) == vertex_attr(x, a)
      I <- sum(as.numeric(I))
      ei.index = (E - I)/(E + I)
      return(ei.index)
   }
```

Let's re-check Mace Windu's and Padme's EI index using the weighted scale:

```{r}
   round(WEI("MACE WINDU", g, "sex"), 2)
   round(WEI("PADME", g, "sex"), 2)
```

As we can see the weighted EI scores are less extreme than the unweighted ones, once we take into account that the majority of characters in the film are men.

Here are the weighted EI scores with respect to gender for everyone:

```{r}
   WEI <- sapply(V(g)$name, WEI, w = g, a = "sex")
   round(WEI, 2)
```

Interestingly, while most people's scores are attenuated towards zero in the weighted scale, R2-D2's becomes more extreme going from weakly positive (demonstrating "gender" heterophily) to extreme negative (showing same "gender" preference). 

Let's see what's going on:

```{r}
#| fig-height: 5
#| fig-width: 5
#| fig-cap: "R2-D2's Ego Network with Nodes Colored by Gender"
#| echo: false
   N <- neighbors(g, "R2-D2")
   r2 <- subgraph(g, c("R2-D2", names(N)))
   V(r2)$color <- as.numeric(as.factor(V(r2)$sex))
   plot(r2, 
     vertex.size=10, vertex.frame.color="lightgray", 
     vertex.label.dist=2, 
     layout = layout_as_star(r2, center = "R2-D2"),
     vertex.label.cex = 1, edge.color = "lightgray")
```

Here we can see that the reason why R2-D2 ends up being high in homophily in the weighted scale despite containing a network with just three nodes and only a single "same-gender" (i.e., none) tie, is that he is connected to C3PO who is the only other character (a droid) whose gender is also assigned to "none."

And here's the graph's overall WEI:

```{r}
   WEI.gender = mean(WEI)
   round(WEI.gender, 2)
```

Which shows that our previous unweighted average under-estimated homophily in this network. Instead, there is a moderately strong tendency for characters to co-appear with others of the same gender classification once the imbalance favoring men is accounted for. 


