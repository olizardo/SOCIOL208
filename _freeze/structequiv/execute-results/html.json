{
  "hash": "39365c3f6f463182f6ad03831f32077a",
  "result": {
    "markdown": "---\ntitle: \"Role Equivalence and Structural Similarity\"\nexecute: \n  eval: true\n  echo: true\n  output: true\n  warning: false\n  message: false\nformat: \n   html:\n      code-line-numbers: true\n---\n\n\nOne of the earlier \"proofs of concept\" of the power of social network analysis came from demonstrating that you could formalize the fuzzy idea of \"role\" central to functionalist sociology and British social anthropology using the combined tools of graph theoretical and matrix representations of networks [@white_etal76]. \n\nThis and other contemporaneous work [@breiger_etal75] set off an entire sub-tradition of data analysis of networks focused on the idea that one could *partition* the set of vertices in a graph into meaningful classes based on some mathematical (e.g., graph theoretic) criterion. \n\nThese classes would in turn  would be isomorphic with the concept of role as *social position* and the classes thereby derived as indicating the number of such positions in the social structure under investigation as well as which actors belonged to which positions. \n\n## Structural Equivalence\n\nThe earliest work pursued simultaneously by analysts at Harvard [@white_etal76] and Chicago [@burt76] relied on the idea of **structural equivalence**. \n\nIn a graph $G = \\{E, V\\}$ two nodes $v_i, v_j$ are structurally equivalent if they are connected to the same others in the network; that is, if $N(v_i)$ is the set of nodes adjacent to node $v_i$ and $N(v_j)$ is the set of nodes adjacent to node $v_j$, then:\n\n$$\n   v_i \\equiv v_j \\iff N(v_i) = N(v_j)\n$$\n\nIn a graph, an equivalence class $C$ is just a set of nodes that are structurally equivalent, such that if $v_i \\in C_i$ and $v_j \\in C_i$ then $v_i \\equiv v_j$ for all pairs $(v_i, v_j) \\in C_i$. \n\nThe partitioning of the vertex set into a set of equivalence classes $\\{C_1, C_2 \\ldots C_k\\}$ as well as the adjacency relations between nodes in the same class and nodes in different classes defines the **role structure** of the network. \n\n## Structural Equivalence in an Ideal World\n\nLet us illustrate these concepts. Consider the following toy graph:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![A toy graph demonstrating structural equivalence.](structequiv_files/figure-html/fig-se-1.png){#fig-se width=672}\n:::\n:::\n\n\nWith associated adjacency matrix:\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-hover table-condensed table-responsive\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\">   </th>\n   <th style=\"text-align:center;\"> A </th>\n   <th style=\"text-align:center;\"> B </th>\n   <th style=\"text-align:center;\"> C </th>\n   <th style=\"text-align:center;\"> D </th>\n   <th style=\"text-align:center;\"> E </th>\n   <th style=\"text-align:center;\"> F </th>\n   <th style=\"text-align:center;\"> G </th>\n   <th style=\"text-align:center;\"> H </th>\n   <th style=\"text-align:center;\"> I </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;border-right: 0.75px solid;border-bottom: 0.75px solid;border-left: 0.75px solid;border-top: 0.75px solid;\"> A </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-top: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-top: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-top: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-top: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-top: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-top: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-top: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-top: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-top: 0.75px solid;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;border-right: 0.75px solid;border-bottom: 0.75px solid;border-left: 0.75px solid;\"> B </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;border-right: 0.75px solid;border-bottom: 0.75px solid;border-left: 0.75px solid;\"> C </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;border-right: 0.75px solid;border-bottom: 0.75px solid;border-left: 0.75px solid;\"> D </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;border-right: 0.75px solid;border-bottom: 0.75px solid;border-left: 0.75px solid;\"> E </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;border-right: 0.75px solid;border-bottom: 0.75px solid;border-left: 0.75px solid;\"> F </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;border-right: 0.75px solid;border-bottom: 0.75px solid;border-left: 0.75px solid;\"> G </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;border-right: 0.75px solid;border-bottom: 0.75px solid;border-left: 0.75px solid;\"> H </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;border-right: 0.75px solid;border-bottom: 0.75px solid;border-left: 0.75px solid;\"> I </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nA simple function to check for structural equivalence in the graph, relying on the native `R` function `setequal` would be:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   check.equiv <- function(x) {\n      n <- vcount(x)\n      v <- V(x)$name\n      E <- matrix(0, n, n)\n      for (i in v) {\n         for (j in v) {\n            if (i != j & E[which(v == j), which(v == i)] != 1) {\n               N.i <- neighbors(x, i)\n               N.j <- neighbors(x, j)\n               if (are_adjacent(x, i, j) == TRUE) {\n                  N.i <- c(names(N.i), i)\n                  N.j <- c(names(N.j), j)\n                  } #end sub-if\n               if (setequal(N.i, N.j) == TRUE) {\n                  E[which(v == i), which(v == j)] <- 1\n                  E[which(v == j), which(v == i)] <- 1\n                  } #end sub-if\n               } #end main if\n            } #end j loop\n         } #end i loop\n      rownames(E) <- v\n      colnames(E) <- v\n   return(E)\n   }\n```\n:::\n\n\nThis function creates an empty \"equivalence\" matrix $\\mathbf{E}$ in line 4, loops through each pair of nodes in the graph in lines 5-20. The main condition restricts the checking to nodes that are not the same or have not yet to be found to be equivalent (line 7). Lines 8-9 extract the node neighborhoods using the `igraph` function `neighbors`. \n\nLines 10-13 check to see if the pair of nodes that are being checked for equivalence are themselves adjacent. If they are indeed adjacent (the conditional in line 10 is `TRUE`) then we need to use the so-called **closed neighborhood** of $v_i$ and $v_j$, written $N[v_i], N[v_j]$, to do the equivalence check, or otherwise we get the wrong answer.^[The closed neighborhood of a node is that which includes nodes adjacent to it and the node itself.]\n\nThe equivalence check is done in line 14 using the native `R` function `setequal`. This function takes two inputs (e.g., two vectors) and will return a value of `TRUE` if the elements in the first vector are the same as the elements in the second vector. In that case we update the matrix $\\mathbf{E}$ accordingly. \n\nAfter writing our function, we can then type:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   Equiv <- check.equiv(g)\n```\n:::\n\n\nAnd the resulting equivalence matrix $\\mathbf{E}$ corresponding to the graph in @fig-se is:\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-hover table-condensed table-responsive\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\">   </th>\n   <th style=\"text-align:center;\"> A </th>\n   <th style=\"text-align:center;\"> B </th>\n   <th style=\"text-align:center;\"> C </th>\n   <th style=\"text-align:center;\"> D </th>\n   <th style=\"text-align:center;\"> E </th>\n   <th style=\"text-align:center;\"> F </th>\n   <th style=\"text-align:center;\"> G </th>\n   <th style=\"text-align:center;\"> H </th>\n   <th style=\"text-align:center;\"> I </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;border-right: 0.75px solid;border-bottom: 0.75px solid;border-left: 0.75px solid;border-top: 0.75px solid;\"> A </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-top: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-top: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-top: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-top: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-top: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-top: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-top: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-top: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-top: 0.75px solid;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;border-right: 0.75px solid;border-bottom: 0.75px solid;border-left: 0.75px solid;\"> B </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;border-right: 0.75px solid;border-bottom: 0.75px solid;border-left: 0.75px solid;\"> C </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;border-right: 0.75px solid;border-bottom: 0.75px solid;border-left: 0.75px solid;\"> D </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;border-right: 0.75px solid;border-bottom: 0.75px solid;border-left: 0.75px solid;\"> E </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;border-right: 0.75px solid;border-bottom: 0.75px solid;border-left: 0.75px solid;\"> F </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;border-right: 0.75px solid;border-bottom: 0.75px solid;border-left: 0.75px solid;\"> G </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;border-right: 0.75px solid;border-bottom: 0.75px solid;border-left: 0.75px solid;\"> H </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;border-right: 0.75px solid;border-bottom: 0.75px solid;border-left: 0.75px solid;\"> I </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nIn this matrix, there is a 1 in the corresponding cell if the row node is structurally equivalent to the column node. \n\nOne thing we can do with this matrix is *re-order* the rows and columns, so that rows(columns) corresponding to nodes that are \"adjacent\" in the equivalence relation appear next to one another in the matrix. \n\nTo do that we can use the `corrMatOrder` function from the `corrplot` package, designed to work with correlation matrices, but works with any matrix of values:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   #install.packages(\"corrplot\")\n   library(corrplot)\n   SE.ord <- corrMatOrder(Equiv, order = \"hclust\", hclust.method = \"ward.D2\")\n   SE.ord\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6 4 5 8 9 1 7 2 3\n```\n:::\n:::\n\n\nThe `corrplot` function `corrMatorder` takes a matrix as input and returns a vector of reordered values of the rows(columns) as output. We use a hierarchical clustering algorithm using Ward's method to do the job. \n\nWe can see that the new re-ordered vector has the previous row(column) 6 in fist position, 4 at second, five at third, 8 at fourth, and so forth.;\n\nWe can then re-order rows and columns of the old equivalence matrix using this new ordering by typing:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   Equiv <- Equiv[SE.ord, SE.ord]\n```\n:::\n\n\nThe resulting re-ordered matrix looks like:\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-hover table-condensed table-responsive\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\">   </th>\n   <th style=\"text-align:center;\"> F </th>\n   <th style=\"text-align:center;\"> D </th>\n   <th style=\"text-align:center;\"> E </th>\n   <th style=\"text-align:center;\"> H </th>\n   <th style=\"text-align:center;\"> I </th>\n   <th style=\"text-align:center;\"> A </th>\n   <th style=\"text-align:center;\"> G </th>\n   <th style=\"text-align:center;\"> B </th>\n   <th style=\"text-align:center;\"> C </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;border-right: 0.75px solid;border-bottom: 0.75px solid;border-left: 0.75px solid;border-top: 0.75px solid;\"> F </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-top: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-top: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-top: 0.75px solid;border-right: 3px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-top: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-top: 0.75px solid;border-right: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-top: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-top: 0.75px solid;border-right: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-top: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-top: 0.75px solid;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;border-right: 0.75px solid;border-bottom: 0.75px solid;border-left: 0.75px solid;\"> D </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-right: 3px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-right: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-right: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;border-right: 0.75px solid;border-bottom: 0.75px solid;border-left: 0.75px solid;border-bottom: 3px solid;\"> E </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-bottom: 3px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-bottom: 3px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-bottom: 3px solid;border-right: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-bottom: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-bottom: 3px solid;border-right: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-bottom: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-bottom: 3px solid;border-right: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-bottom: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-bottom: 3px solid;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;border-right: 0.75px solid;border-bottom: 0.75px solid;border-left: 0.75px solid;\"> H </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-right: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-right: 3px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-right: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;border-right: 0.75px solid;border-bottom: 0.75px solid;border-left: 0.75px solid;border-bottom: 3px solid;\"> I </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-bottom: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-bottom: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-bottom: 3px solid;border-right: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-bottom: 3px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-bottom: 3px solid;border-right: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-bottom: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-bottom: 3px solid;border-right: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-bottom: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-bottom: 3px solid;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;border-right: 0.75px solid;border-bottom: 0.75px solid;border-left: 0.75px solid;\"> A </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-right: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-right: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-right: 3px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;border-right: 0.75px solid;border-bottom: 0.75px solid;border-left: 0.75px solid;border-bottom: 3px solid;\"> G </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-bottom: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-bottom: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-bottom: 3px solid;border-right: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-bottom: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-bottom: 3px solid;border-right: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-bottom: 3px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-bottom: 3px solid;border-right: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-bottom: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-bottom: 3px solid;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;border-right: 0.75px solid;border-bottom: 0.75px solid;border-left: 0.75px solid;\"> B </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-right: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-right: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-right: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;border-right: 0.75px solid;border-bottom: 0.75px solid;border-left: 0.75px solid;\"> C </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-right: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-right: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;border-right: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;border-bottom: 0.75px solid;\"> 0 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nOnce the equivalence matrix is re-ordered we can see that sets of structurally equivalent nodes in @fig-se, appear clustered along the diagonals. This type of re-arranged matrix is said to be in **block-diagonal** form (e.g., non-zero entries clustered along the diagonals).\n\nEven more interestingly, we can do the same re-arranging on the original adjacency matrix, to reveal:\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-hover table-condensed table-responsive\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\">   </th>\n   <th style=\"text-align:center;\"> F </th>\n   <th style=\"text-align:center;\"> D </th>\n   <th style=\"text-align:center;\"> E </th>\n   <th style=\"text-align:center;\"> H </th>\n   <th style=\"text-align:center;\"> I </th>\n   <th style=\"text-align:center;\"> A </th>\n   <th style=\"text-align:center;\"> G </th>\n   <th style=\"text-align:center;\"> B </th>\n   <th style=\"text-align:center;\"> C </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;border-right: 0.75px solid;\"> F </td>\n   <td style=\"text-align:center;\"> 0 </td>\n   <td style=\"text-align:center;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 3px solid;\"> 1 </td>\n   <td style=\"text-align:center;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;\"> 1 </td>\n   <td style=\"text-align:center;\"> 1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;border-right: 0.75px solid;\"> D </td>\n   <td style=\"text-align:center;\"> 0 </td>\n   <td style=\"text-align:center;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 3px solid;\"> 1 </td>\n   <td style=\"text-align:center;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;\"> 1 </td>\n   <td style=\"text-align:center;\"> 1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;border-right: 0.75px solid;border-bottom: 3px solid;\"> E </td>\n   <td style=\"text-align:center;border-bottom: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-bottom: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-bottom: 3px solid;border-right: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-bottom: 3px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-bottom: 3px solid;border-right: 3px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-bottom: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-bottom: 3px solid;border-right: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-bottom: 3px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-bottom: 3px solid;\"> 1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;border-right: 0.75px solid;\"> H </td>\n   <td style=\"text-align:center;\"> 1 </td>\n   <td style=\"text-align:center;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 3px solid;\"> 1 </td>\n   <td style=\"text-align:center;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 3px solid;\"> 1 </td>\n   <td style=\"text-align:center;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;\"> 0 </td>\n   <td style=\"text-align:center;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;border-right: 0.75px solid;border-bottom: 3px solid;\"> I </td>\n   <td style=\"text-align:center;border-bottom: 3px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-bottom: 3px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-bottom: 3px solid;border-right: 3px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-bottom: 3px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-bottom: 3px solid;border-right: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-bottom: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-bottom: 3px solid;border-right: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-bottom: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-bottom: 3px solid;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;border-right: 0.75px solid;\"> A </td>\n   <td style=\"text-align:center;\"> 0 </td>\n   <td style=\"text-align:center;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 3px solid;\"> 1 </td>\n   <td style=\"text-align:center;\"> 1 </td>\n   <td style=\"text-align:center;\"> 1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;border-right: 0.75px solid;border-bottom: 3px solid;\"> G </td>\n   <td style=\"text-align:center;border-bottom: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-bottom: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-bottom: 3px solid;border-right: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-bottom: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-bottom: 3px solid;border-right: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-bottom: 3px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-bottom: 3px solid;border-right: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-bottom: 3px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-bottom: 3px solid;\"> 1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;border-right: 0.75px solid;\"> B </td>\n   <td style=\"text-align:center;\"> 1 </td>\n   <td style=\"text-align:center;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 3px solid;\"> 1 </td>\n   <td style=\"text-align:center;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 3px solid;\"> 1 </td>\n   <td style=\"text-align:center;\"> 0 </td>\n   <td style=\"text-align:center;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;border-right: 0.75px solid;\"> C </td>\n   <td style=\"text-align:center;\"> 1 </td>\n   <td style=\"text-align:center;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 3px solid;\"> 1 </td>\n   <td style=\"text-align:center;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 3px solid;\"> 0 </td>\n   <td style=\"text-align:center;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 3px solid;\"> 1 </td>\n   <td style=\"text-align:center;\"> 0 </td>\n   <td style=\"text-align:center;\"> 0 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nThis is called a **blocked adjacency matrix**.  As you can see, once the structural equivalence relations in the network are revealed by permuting the rows and columns, the adjacency matrix shows an orderly pattern. \n\nThe way to interpret the blocked adjacency matrix is as follows:\n\n- The **block diagonals** of the matrix reveal the *intra-block* relations between sets of structurally equivalent nodes. If the block diagonal is empty--called a **zero block**--it means that set of structurally equivalent nodes does not connect with one another directly. If it has ones--called a **one block**--it it means that members of that set of structurally equivalent nodes are also neighbors.\n\n- The **off diagonal blocks** reveals the *inter-block* adjacency relations between different clusters of structurally equivalent nodes. If an off-diagonal block is a one-block, it means that members of block $C_i$ send ties to members of block $C_j$. If and off diagonal block is a zero-block, it means that members of block $C_i$ avoid associating with members of block $C_j$.\n\nSo if:\n\n$$\nC_1 = \\{D, E, F\\} \n$$\n\n$$\nC_2 = \\{H, I\\} \n$$\n\n$$\nC_3 = \\{A, G\\} \n$$\n\n$$\nC_4 = \\{B, C\\} \n$$\n\nThen we can see that:\n\n- Members of $C_1$ connect with members of $C_2$ and $C_4$ but not among themselves.\n\n- Members of $C_2$ connect among themselves and with $C_1$.\n\n- Members of $C_3$ connect among themselves and with $C_4$.\n\n- Members of $C_4$ connect with $C_1$ and $C_3$ but avoid associating with their own block.\n\nThese intra and inter-block relations can then be represented in the reduced **image matrix**:\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-hover table-condensed table-responsive\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\">   </th>\n   <th style=\"text-align:center;\"> C_1 </th>\n   <th style=\"text-align:center;\"> C_2 </th>\n   <th style=\"text-align:center;\"> C_3 </th>\n   <th style=\"text-align:center;\"> C_4 </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;border-right: 0.75px solid;\"> C_1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;\"> 1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;border-top: 0.75px solid;border-right: 0.75px solid;\"> C_2 </td>\n   <td style=\"text-align:center;border-top: 0.75px solid;border-right: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-top: 0.75px solid;border-right: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-top: 0.75px solid;border-right: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-top: 0.75px solid;border-right: 0.75px solid;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;border-right: 0.75px solid;\"> C_3 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-right: 0.75px solid;\"> 1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;border-bottom: 0.75px solid;border-right: 0.75px solid;\"> C_4 </td>\n   <td style=\"text-align:center;border-bottom: 0.75px solid;border-right: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-bottom: 0.75px solid;border-right: 0.75px solid;\"> 0 </td>\n   <td style=\"text-align:center;border-bottom: 0.75px solid;border-right: 0.75px solid;\"> 1 </td>\n   <td style=\"text-align:center;border-bottom: 0.75px solid;border-right: 0.75px solid;\"> 0 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nWhich reveals a more economical representation of the system based on structural equivalence. \n\n## Structural Equivalence in the Real World\n\nOf course, in real data, it is very unlikely that two nodes will meet the exact mathematical criterion of structural equivalence. They might have three out of five, or eight out of nine common neighbors but would still get a big zero in the $\\mathbf{E}$ defined using our strict function.\n\nSo, a lot of role analysis in real networks follows instead searches for a *near cousin* to structural equivalence. This leads us to the large class of **distance** and **similarity** metrics, and the task is to pick one such that structural equivalence falls off as a special case of the given metric.\n\nFor random reasons, early work in social network analysis focused on **distance metrics**, while more recent work inspired by network science focuses on **similarity metrics**. The end goal is the same though; to cluster nodes in a graph such that those in the same class are the most structurally similar to one another. \n\nLet us, therefore, begin with the distance approach. Here the goal is simply to pick a distance metric $d$ with a well defined minimum $d_{min}$ or maximum value $d_{max}$, such that:\n\n$$\n   v_i \\equiv v_j \\iff d(v_i, v_j) = d_{min} \\lor d(v_i, v_j) = d_{max}\n$$\n\nWhere whether we pick the maximum or minimum value depends on the particularities of the measure $d$.\n\nWe then populate the $\\mathbf{E}$ matrix with the values of $d$ for each pair of nodes $(v_i, v_j)$, do some kind of clustering on the matrix, and use our clusters assignments to re-arrange the original adjacency matrix to find our blocks, and so forth. \n\nA very obvious candidate for $d$ is the **Euclidean Distance** [@burt76]:\n\n$$\n   d_{i,j} = \\sqrt{\\sum_{k \\neq i,j} (a_{ik} - a_{jk})^2}\n$$ \n\nWhere $a_{ik}$ and $a_{jk}$ are the corresponding entries in the graph's adjacency matrix $\\mathbf{A}$. The minimum for this measure is $d_{min} = 0$, so this is the value we should find for structurally equivalent nodes. \n\nA function that does this for any graph is:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   d.euclid <- function(x) {\n      A <- as.matrix(as_adjacency_matrix(x))\n      n <- nrow(A)\n      E <- matrix(0, n, n)\n      for (i in 1:n) {\n         for (j in 1:n) {\n            if (i < j & i != j) {\n               d.ij <- 0\n               for (k in 1:n) {\n                  if (k != i & k != j) {\n                     d.ij <- d.ij + (A[i,k] - A[j,k])^2\n                     }\n                  }\n               E[i,j] <- sqrt(d.ij)\n               E[j,i] <- sqrt(d.ij)\n            }\n         }\n      }\n   rownames(E) <- rownames(A)\n   colnames(E) <- colnames(A)\n   return(E)\n   }\n```\n:::\n\n\nAnd we can try it out with our toy graph:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   E <- d.euclid(g)\n   round(E, 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    A   B   C   D   E   F   G   H   I\nA 0.0 2.0 2.0 1.7 1.7 1.7 0.0 2.6 2.6\nB 2.0 0.0 0.0 2.6 2.6 2.6 2.0 1.7 1.7\nC 2.0 0.0 0.0 2.6 2.6 2.6 2.0 1.7 1.7\nD 1.7 2.6 2.6 0.0 0.0 0.0 1.7 2.0 2.0\nE 1.7 2.6 2.6 0.0 0.0 0.0 1.7 2.0 2.0\nF 1.7 2.6 2.6 0.0 0.0 0.0 1.7 2.0 2.0\nG 0.0 2.0 2.0 1.7 1.7 1.7 0.0 2.6 2.6\nH 2.6 1.7 1.7 2.0 2.0 2.0 2.6 0.0 0.0\nI 2.6 1.7 1.7 2.0 2.0 2.0 2.6 0.0 0.0\n```\n:::\n:::\n\n\nAnd it looks like indeed it detected the structurally equivalent nodes in the graph. We can see it clearly by re-ordering the rows and columns according to our known ordering:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   E <- E[SE.ord, SE.ord]\n   round(E, 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    F   D   E   H   I   A   G   B   C\nF 0.0 0.0 0.0 2.0 2.0 1.7 1.7 2.6 2.6\nD 0.0 0.0 0.0 2.0 2.0 1.7 1.7 2.6 2.6\nE 0.0 0.0 0.0 2.0 2.0 1.7 1.7 2.6 2.6\nH 2.0 2.0 2.0 0.0 0.0 2.6 2.6 1.7 1.7\nI 2.0 2.0 2.0 0.0 0.0 2.6 2.6 1.7 1.7\nA 1.7 1.7 1.7 2.6 2.6 0.0 0.0 2.0 2.0\nG 1.7 1.7 1.7 2.6 2.6 0.0 0.0 2.0 2.0\nB 2.6 2.6 2.6 1.7 1.7 2.0 2.0 0.0 0.0\nC 2.6 2.6 2.6 1.7 1.7 2.0 2.0 0.0 0.0\n```\n:::\n:::\n\n\nHere the block-diagonals of the matrix contain zeroes because the $d$ is a distance function with a minimum of zero. If we wanted it to contain ones instead we would normalize:\n\n$$\n   d^* = 1-\\left(\\frac{d}{max(d)}\\right)\n$$\n\nWhich would give us:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   E.norm <- 1 - E/max(E)\n   round(E.norm, 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    F   D   E   H   I   A   G   B   C\nF 1.0 1.0 1.0 0.2 0.2 0.3 0.3 0.0 0.0\nD 1.0 1.0 1.0 0.2 0.2 0.3 0.3 0.0 0.0\nE 1.0 1.0 1.0 0.2 0.2 0.3 0.3 0.0 0.0\nH 0.2 0.2 0.2 1.0 1.0 0.0 0.0 0.3 0.3\nI 0.2 0.2 0.2 1.0 1.0 0.0 0.0 0.3 0.3\nA 0.3 0.3 0.3 0.0 0.0 1.0 1.0 0.2 0.2\nG 0.3 0.3 0.3 0.0 0.0 1.0 1.0 0.2 0.2\nB 0.0 0.0 0.0 0.3 0.3 0.2 0.2 1.0 1.0\nC 0.0 0.0 0.0 0.3 0.3 0.2 0.2 1.0 1.0\n```\n:::\n:::\n\n\nAs noted, a distance function defines a *clustering* on the nodes, and the results of the clustering generate our blocks. In `R` we can use the functions `dist` and `hclust` to do the job:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   E <- dist(E) #transforming E to a dist object\n   h.res <- hclust(E, method = \"ward.D2\")\n   plot(h.res)\n```\n\n::: {.cell-output-display}\n![](structequiv_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nWhich are our original clusters of structurally equivalent nodes!\n\nLet's see how this would work in real data. Let's take the *Flintstones* (film) co-appearance network as an example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   library(networkdata)\n   g.flint <- movie_267\n   g.flint <- delete_vertices(g.flint, degree(g.flint) <= 3)\n   E <- d.euclid(g.flint)\n   E <- dist(E) #transforming E to a dist object\n   h.res <- hclust(E, method = \"ward.D2\") #hierarchical clustering\n   #install.packages(\"dendextend\")\n   library(dendextend) #nice dendrogram plotting\n   dend <- as.dendrogram(h.res) %>% \n      color_branches(k = 8) %>% \n      color_labels(k = 8) %>% \n      set(\"labels_cex\", 0.65) %>% \n      set(\"branches_lwd\", 2) %>% \n      plot\n```\n\n::: {.cell-output-display}\n![](structequiv_files/figure-html/unnamed-chunk-16-1.png){width=768}\n:::\n:::\n\n\nThe *Flintstones* is a film based on a family, and families are the prototypes of *social roles* in networks, so if structural equivalence gets at roles, then it should recover known kin roles here, and indeed it does to some extent. One cluster is the focal parents separated into \"moms\" and \"dads\" roles, and another has the kids.\n\nAfter we have our clustering, we may wish to extract the structurally equivalent blocks from the hierarchical clustering results. To do that, we need to *cut* the dendrogram at a height that will produce a given number of clusters. Of course because hierarchical clustering is agglomerative, it begins with all nodes in the same cluster and ends with all nodes in a single cluster. So a reasonable solution is some (relatively) small number of clusters $k$ such that $1 > k < n$ that is, some number larger than one but smaller than the number of nodes in the graph. \n\nChoosing the number of clusters after a hierarchical clustering is not a well-defined problem, so you have to use a combination of pragmatic and domain-specific knowledge criteria to decide. Here, it looks like four blocks provides enough resolution and substantive interpretability so let's do that. To do the job we use a function from the `dendextend` package we used above to draw our pretty colored dendrogram data viz, called `cutree` which as its name implies cuts the dendrogram at a height that produces the required number of classes:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   blocks  <- cutree(h.res, k = 4)\n   blocks\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        BAM-BAM          BARNEY           BETTY        FELDSPAR            FRED \n              1               2               2               3               2 \n   HEADMISTRESS      HERDMASTER            LAVA           LEACH          MORRIS \n              4               3               2               1               4 \n      MRS SLATE         PEBBLES PEBBLES BAM-BAM        PILTDOWN      POINDEXTER \n              4               1               1               3               4 \n         PYRITE           SLATE           WILMA \n              3               2               2 \n```\n:::\n:::\n\n\nNote that the result is a **named vector** with the node labels as the names and a value of $k$ for each node, where $k$ indicates the class of that node. For instance, $\\{Barney, Betty,  Fred, Lava, Slate, Wilma\\}$ all belong to $k = 2$. Remember this is a purely **nominal** classification so the order of the numbers doesn't matter. \n\n\n## CONCOR\n\nThe other (perhaps less obvious) way of defining a distance between nodes in the network based on their connectivity patterns to other nodes is the **correlation distance**:\n\n$$\n    d_{i,j} = \n    \\frac{\n    \\sum_{i \\neq k}\n    (a_{ki} - \\overline{a}_{i}) \\times \n    \\sum_{j \\neq k}\n    (a_{kj} - \\overline{a}_{j})\n    }\n    {\n    \\sqrt{\n    \\sum_{i \\neq k}\n    (a_{ki} - \\overline{a}_{i})^2 \\times\n    \\sum_{j \\neq k}\n    (a_{kj} - \\overline{a}_{j})^2\n        }\n    }\n$$\n\nA more involved but still meaningful formula compared of the Euclidean distance. Here $\\overline{a}_{i}$ is the *column mean* of the entries of node $i$ in the affiliation matrix. \n\nSo the correlation distance is the ratio of the covariance of the column vectors corresponding to each node in the adjacency matrix and the product of their standard deviations. \n\nThe correlation distance between nodes in our toy network is given by simply typing:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   m <- as.matrix(as_adjacency_matrix(g))\n   C <- cor(m)\n   round(C, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      A     B     C     D     E     F     G     H     I\nA  1.00 -0.32 -0.32  0.32  0.32  0.32  0.50 -0.63 -0.63\nB -0.32  1.00  1.00 -1.00 -1.00 -1.00 -0.32  0.35  0.35\nC -0.32  1.00  1.00 -1.00 -1.00 -1.00 -0.32  0.35  0.35\nD  0.32 -1.00 -1.00  1.00  1.00  1.00  0.32 -0.35 -0.35\nE  0.32 -1.00 -1.00  1.00  1.00  1.00  0.32 -0.35 -0.35\nF  0.32 -1.00 -1.00  1.00  1.00  1.00  0.32 -0.35 -0.35\nG  0.50 -0.32 -0.32  0.32  0.32  0.32  1.00 -0.63 -0.63\nH -0.63  0.35  0.35 -0.35 -0.35 -0.35 -0.63  1.00  0.55\nI -0.63  0.35  0.35 -0.35 -0.35 -0.35 -0.63  0.55  1.00\n```\n:::\n:::\n\n\nWhich gives the Pearson product moment correlation of each pair of columns in the adjacency matrix. \n\nThe key thing that was noticed by @breiger_etal75 is that we can *iterate* this process, and compute *correlation distances of correlation distances* between nodes in the graph. If we do this for our toy network a few (e.g., three) times we get:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   C1 <- cor(C)\n   C2 <- cor(C1)\n   C3 <- cor(C2)\n   round(C3, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   A  B  C  D  E  F  G  H  I\nA  1 -1 -1  1  1  1  1 -1 -1\nB -1  1  1 -1 -1 -1 -1  1  1\nC -1  1  1 -1 -1 -1 -1  1  1\nD  1 -1 -1  1  1  1  1 -1 -1\nE  1 -1 -1  1  1  1  1 -1 -1\nF  1 -1 -1  1  1  1  1 -1 -1\nG  1 -1 -1  1  1  1  1 -1 -1\nH -1  1  1 -1 -1 -1 -1  1  1\nI -1  1  1 -1 -1 -1 -1  1  1\n```\n:::\n:::\n\n\nInterestingly the positive correlations converge to 1.0 and the negative correlations converge to -1.0!\n\nIf we sort the rows and columns of the new matrix according to these values, we get:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   C.ord <- corrMatOrder(C3, order = \"hclust\", hclust.method = \"ward.D2\")\n   C3 <- C3[C.ord, C.ord]\n   round(C3, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   B  C  H  I  F  D  E  A  G\nB  1  1  1  1 -1 -1 -1 -1 -1\nC  1  1  1  1 -1 -1 -1 -1 -1\nH  1  1  1  1 -1 -1 -1 -1 -1\nI  1  1  1  1 -1 -1 -1 -1 -1\nF -1 -1 -1 -1  1  1  1  1  1\nD -1 -1 -1 -1  1  1  1  1  1\nE -1 -1 -1 -1  1  1  1  1  1\nA -1 -1 -1 -1  1  1  1  1  1\nG -1 -1 -1 -1  1  1  1  1  1\n```\n:::\n:::\n\n\nAha! The iterated correlations seems to have split the matrix into two **blocks** $C_1 = \\{G, F, D, A, G\\}$ and $C_2 = \\{I, H, B, C\\}$. Each of the blocks is composed of two sub-blocks that we know are structurally equivalent from our previous analysis. \n\nA function implementing this method of iterated correlation distances until convergence looks like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   con.cor <- function(x) {\n      C <- x\n      while (mean(abs(C)) != 1) {\n         C <- cor(C)\n         }\n      b1 <- C[, 1] > 0\n      b2 <- !b1\n      return(list(x[, b1, drop = FALSE], x[, b2, drop = FALSE]))\n      }\n```\n:::\n\n\nThis function takes a graph's adjacency matrix as input, creates a copy of the adjacency matrix in line 2 (to be put through the iterated correlations meat grinder). The three-line (3-5) `while` loop goes through the iterated correlations (stopping when the matrix is full of ones). Then the resulting two blocks are returned as the columns of a couple of matrices stored in a list in line 8. \n\nFor instance, to use our example above:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   con.cor(m)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n  A D E F G\nA 0 0 0 0 1\nB 1 1 1 1 1\nC 1 1 1 1 1\nD 0 0 0 0 0\nE 0 0 0 0 0\nF 0 0 0 0 0\nG 1 0 0 0 0\nH 0 1 1 1 0\nI 0 1 1 1 0\n\n[[2]]\n  B C H I\nA 1 1 0 0\nB 0 0 0 0\nC 0 0 0 0\nD 1 1 1 1\nE 1 1 1 1\nF 1 1 1 1\nG 1 1 0 0\nH 0 0 0 1\nI 0 0 1 0\n```\n:::\n:::\n\n\nThe columns of these two matrices are the two blocks we found before. Of course, to implement this method as a *divisive* clustering algorithm, what we want is to split these two blocks into two finer grained blocks, by iterative correlations of the columns of these two sub-matrices (to reveal two further sub-matrices each) and thus find our original four structurally equivalent groups. \n\nThe following function--simplified and adapted from [Adam Slez's work](https://rdrr.io/github/aslez/concoR/src/R/concoR.R)---which includes the `con.cor` function shown earlier inside of it, will do it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  blocks <- function(g, s = 2) {\n     A <- as.matrix(as_adjacency_matrix(g))\n     B <- list(A)\n     for(i in 1:s) {\n       B <- unlist(lapply(B, con.cor), recursive = FALSE)\n       }\n     return(lapply(B, colnames))\n   }\n```\n:::\n\n\nThis function takes the graph as input and returns a list of column names containing the structurally equivalent blocks as output:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   blocks(g)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"A\" \"G\"\n\n[[2]]\n[1] \"D\" \"E\" \"F\"\n\n[[3]]\n[1] \"B\" \"C\"\n\n[[4]]\n[1] \"H\" \"I\"\n```\n:::\n:::\n\n\nWhich are the original structurally equivalent classes. The argument `s` controls the number of splits. When it is equal to one, the function produces two blocks, and when it is equal to two it produces four blocks, when it is equal to three, six blocks, and so on. \n\nThis is the algorithm called CONCOR [@breiger_etal75], short for **con**vergence of iterate **cor**relations, and can be used to cluster the rows(columns) of any valued square data matrix. \n\nFor instance, if we wanted to split the *Flintstones* network into four blocks we would proceed as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   g.flint <- movie_267\n   g.flint <- delete_vertices(g.flint, degree(g.flint) <= 3)\n   blocks(g.flint)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"BAM-BAM\"    \"BETTY\"      \"PEBBLES\"    \"POINDEXTER\" \"WILMA\"     \n\n[[2]]\n[1] \"FELDSPAR\"   \"HERDMASTER\" \"LAVA\"       \"PILTDOWN\"   \"PYRITE\"    \n[6] \"SLATE\"     \n\n[[3]]\n[1] \"BARNEY\"          \"FRED\"            \"LEACH\"           \"PEBBLES BAM-BAM\"\n\n[[4]]\n[1] \"HEADMISTRESS\" \"MORRIS\"       \"MRS SLATE\"   \n```\n:::\n:::\n\n\nWhich is similar to the results we got from the Euclidean distance method, except that now the children are put in the same blocks as the moms. \n\nWe could then visualize the results as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   #install.packages(\"ggcorrplot\")\n   library(ggcorrplot)\n   A <- as.matrix(as_adjacency_matrix(g.flint))\n   ord <- unlist(blocks(g.flint, 2))\n   A <- A[ord, ord]\n   p <- ggcorrplot(A, colors = c(\"white\", \"white\", \"black\")) \n   p <- p + theme(legend.position = \"none\", \n                  axis.text.y = element_text(size = 8),\n                  axis.text.x = element_text(size = 8),\n                  )\n   p <- p + geom_hline(yintercept = 5.5, linewidth = 2, color = \"blue\")\n   p <- p + geom_vline(xintercept = 5.5, linewidth = 2, color = \"blue\")\n   p <- p + geom_hline(yintercept = 11.5, linewidth = 2, color = \"blue\")\n   p <- p + geom_vline(xintercept = 11.5, linewidth = 2, color = \"blue\")\n   p <- p + geom_hline(yintercept = 15.5, linewidth = 2, color = \"blue\")\n   p <- p + geom_vline(xintercept = 15.5, linewidth = 2, color = \"blue\")\n   p\n```\n\n::: {.cell-output-display}\n![](structequiv_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\nWhich is just a tile plot of the original adjacency matrix (adjacent cells in black) with rows and columns re-ordered according to the four-block solution and `ggplot` vertical and horizontal lines highlighting the boundaries of the blocked matrix. \n\nAs you can see, characters with similar patterns of scene co-appearances (like Barney and Fred) are drawn next to one another, revealing the larger \"roles\" in the network. \n\n## Structural Equivalence in Directed Graphs\n\nLike before, the main complication introduced by the directed case is the \"doubling\" of the relations considered. \n\nIn the Euclidean distance case, we have to decide whether we want to compute two set of distances between nodes, one based on the in-distance vectors and the other on the out-distance vectors, and the two sets of hierarchical clustering partitions. \n\nAnother approach is simply to combine both according to the formula:\n\n$$\n   d_{i,j} = \\sqrt{\n                  \\sum_{k \\neq i,j} (a_{ik} - a_{jk})^2 +\n                  \\sum_{k \\neq i,j} (a_{ki} - a_{kj})^2\n                  }\n$$ \n\nWhich just computes the Euclidean distances between nodes using both in and out neighbors. Here nodes would be structurally equivalent only if they have the same set of in and out-neighbors. This would mean changing line 11 in the function `d.euclid` above with the following: \n\n\n::: {.cell}\n\n```{.r .cell-code}\n   d.ij <- d.ij + ((A[i,k] - A[j,k])^2 + (A[k,i] - A[k,j])^2)\n```\n:::\n\n\nThis way, distances are computed on both the row and columns of the directed graph's adjacency matrix.\n\nIf we are using the correlation distance approach in a directed graph, then the main trick is to *stack* the original adjacency matrix against its transpose, and then compute the correlation distance on the columns of the stacked matrices, which by definition combines information in incoming and outgoing ties. \n\nLet's see a brief example. Let's load up the Krackhardt's high-tech managers data on advice relations and look at the adjacency matrix:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   g <- ht_advice\n   A <- as.matrix(as_adjacency_matrix(g))\n   A\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13]\n [1,]    0    1    0    1    0    0    0    1    0     0     0     0     0\n [2,]    0    0    0    0    0    1    1    0    0     0     0     0     0\n [3,]    1    1    0    1    0    1    1    1    1     1     1     1     0\n [4,]    1    1    0    0    0    1    0    1    0     1     1     1     0\n [5,]    1    1    0    0    0    1    1    1    0     1     1     0     1\n [6,]    0    0    0    0    0    0    0    0    0     0     0     0     0\n [7,]    0    1    0    0    0    1    0    0    0     0     1     1     0\n [8,]    0    1    0    1    0    1    1    0    0     1     1     0     0\n [9,]    1    1    0    0    0    1    1    1    0     1     1     1     0\n[10,]    1    1    1    1    1    0    0    1    0     0     1     0     1\n[11,]    1    1    0    0    0    0    1    0    0     0     0     0     0\n[12,]    0    0    0    0    0    0    1    0    0     0     0     0     0\n[13,]    1    1    0    0    1    0    0    0    1     0     0     0     0\n[14,]    0    1    0    0    0    0    1    0    0     0     0     0     0\n[15,]    1    1    1    1    1    1    1    1    1     1     1     1     1\n[16,]    1    1    0    0    0    0    0    0    0     1     0     0     0\n[17,]    1    1    0    1    0    0    1    0    0     0     0     0     0\n[18,]    1    1    1    1    1    0    1    1    1     1     1     0     1\n[19,]    1    1    1    0    1    0    1    0    0     1     1     0     0\n[20,]    1    1    0    0    0    1    0    1    0     0     1     1     0\n[21,]    0    1    1    1    0    1    1    1    0     0     0     1     0\n      [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21]\n [1,]     0     0     1     0     1     0     0     1\n [2,]     0     0     0     0     0     0     0     1\n [3,]     1     0     0     1     1     0     1     1\n [4,]     0     0     1     1     1     0     1     1\n [5,]     1     0     1     1     1     1     1     1\n [6,]     0     0     0     0     0     0     0     1\n [7,]     1     0     0     1     1     0     0     1\n [8,]     0     0     0     0     1     0     0     1\n [9,]     1     0     1     1     1     0     0     1\n[10,]     0     1     1     1     1     1     1     0\n[11,]     0     0     0     0     0     0     0     0\n[12,]     0     0     0     0     0     0     0     1\n[13,]     1     0     0     0     1     0     0     0\n[14,]     0     0     0     0     1     0     0     1\n[15,]     1     0     1     1     1     1     1     1\n[16,]     0     0     0     0     1     0     0     0\n[17,]     0     0     0     0     0     0     0     1\n[18,]     1     1     1     0     0     1     1     1\n[19,]     1     1     0     0     1     0     1     0\n[20,]     1     1     1     1     1     0     0     1\n[21,]     1     0     0     1     1     0     1     0\n```\n:::\n:::\n\n\nRecall that [in these data](https://rdrr.io/github/schochastics/networkdata/man/ht_advice.html) a tie goes *from* an advice seeker *to* an advisor. So the standard correlation distance on the columns computes the in-correlation, or structural equivalence based on incoming ties (two managers are equivalent if they are nominated as advisors by the same others).\n\nWe may also be interested in the out-correlation, that is structural equivalence based on out-going ties. Here two managers are structurally equivalent is they seek advice from the same others. This information is contained in the transpose of the original adjacency matrix:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   A.t <- t(A)\n   A.t\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13]\n [1,]    0    0    1    1    1    0    0    0    1     1     1     0     1\n [2,]    1    0    1    1    1    0    1    1    1     1     1     0     1\n [3,]    0    0    0    0    0    0    0    0    0     1     0     0     0\n [4,]    1    0    1    0    0    0    0    1    0     1     0     0     0\n [5,]    0    0    0    0    0    0    0    0    0     1     0     0     1\n [6,]    0    1    1    1    1    0    1    1    1     0     0     0     0\n [7,]    0    1    1    0    1    0    0    1    1     0     1     1     0\n [8,]    1    0    1    1    1    0    0    0    1     1     0     0     0\n [9,]    0    0    1    0    0    0    0    0    0     0     0     0     1\n[10,]    0    0    1    1    1    0    0    1    1     0     0     0     0\n[11,]    0    0    1    1    1    0    1    1    1     1     0     0     0\n[12,]    0    0    1    1    0    0    1    0    1     0     0     0     0\n[13,]    0    0    0    0    1    0    0    0    0     1     0     0     0\n[14,]    0    0    1    0    1    0    1    0    1     0     0     0     1\n[15,]    0    0    0    0    0    0    0    0    0     1     0     0     0\n[16,]    1    0    0    1    1    0    0    0    1     1     0     0     0\n[17,]    0    0    1    1    1    0    1    0    1     1     0     0     0\n[18,]    1    0    1    1    1    0    1    1    1     1     0     0     1\n[19,]    0    0    0    0    1    0    0    0    0     1     0     0     0\n[20,]    0    0    1    1    1    0    0    0    0     1     0     0     0\n[21,]    1    1    1    1    1    1    1    1    1     0     0     1     0\n      [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21]\n [1,]     0     1     1     1     1     1     1     0\n [2,]     1     1     1     1     1     1     1     1\n [3,]     0     1     0     0     1     1     0     1\n [4,]     0     1     0     1     1     0     0     1\n [5,]     0     1     0     0     1     1     0     0\n [6,]     0     1     0     0     0     0     1     1\n [7,]     1     1     0     1     1     1     0     1\n [8,]     0     1     0     0     1     0     1     1\n [9,]     0     1     0     0     1     0     0     0\n[10,]     0     1     1     0     1     1     0     0\n[11,]     0     1     0     0     1     1     1     0\n[12,]     0     1     0     0     0     0     1     1\n[13,]     0     1     0     0     1     0     0     0\n[14,]     0     1     0     0     1     1     1     1\n[15,]     0     0     0     0     1     1     1     0\n[16,]     0     1     0     0     1     0     1     0\n[17,]     0     1     0     0     0     0     1     1\n[18,]     1     1     1     0     0     1     1     1\n[19,]     0     1     0     0     1     0     0     0\n[20,]     0     1     0     0     1     1     0     1\n[21,]     1     1     0     1     1     0     1     0\n```\n:::\n:::\n\n\nCorrelating the columns of this matrix would thus give us the out-correlation distance based on advice seeking relations. \n\n\"Stacking\" is a way to combine both in and out-going ties and compute a single distance based on both. It just means that we literally bind the rows of the firs matrix and its transpose:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   A.stack <- rbind(A, A.t)\n   A.stack\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13]\n [1,]    0    1    0    1    0    0    0    1    0     0     0     0     0\n [2,]    0    0    0    0    0    1    1    0    0     0     0     0     0\n [3,]    1    1    0    1    0    1    1    1    1     1     1     1     0\n [4,]    1    1    0    0    0    1    0    1    0     1     1     1     0\n [5,]    1    1    0    0    0    1    1    1    0     1     1     0     1\n [6,]    0    0    0    0    0    0    0    0    0     0     0     0     0\n [7,]    0    1    0    0    0    1    0    0    0     0     1     1     0\n [8,]    0    1    0    1    0    1    1    0    0     1     1     0     0\n [9,]    1    1    0    0    0    1    1    1    0     1     1     1     0\n[10,]    1    1    1    1    1    0    0    1    0     0     1     0     1\n[11,]    1    1    0    0    0    0    1    0    0     0     0     0     0\n[12,]    0    0    0    0    0    0    1    0    0     0     0     0     0\n[13,]    1    1    0    0    1    0    0    0    1     0     0     0     0\n[14,]    0    1    0    0    0    0    1    0    0     0     0     0     0\n[15,]    1    1    1    1    1    1    1    1    1     1     1     1     1\n[16,]    1    1    0    0    0    0    0    0    0     1     0     0     0\n[17,]    1    1    0    1    0    0    1    0    0     0     0     0     0\n[18,]    1    1    1    1    1    0    1    1    1     1     1     0     1\n[19,]    1    1    1    0    1    0    1    0    0     1     1     0     0\n[20,]    1    1    0    0    0    1    0    1    0     0     1     1     0\n[21,]    0    1    1    1    0    1    1    1    0     0     0     1     0\n[22,]    0    0    1    1    1    0    0    0    1     1     1     0     1\n[23,]    1    0    1    1    1    0    1    1    1     1     1     0     1\n[24,]    0    0    0    0    0    0    0    0    0     1     0     0     0\n[25,]    1    0    1    0    0    0    0    1    0     1     0     0     0\n[26,]    0    0    0    0    0    0    0    0    0     1     0     0     1\n[27,]    0    1    1    1    1    0    1    1    1     0     0     0     0\n[28,]    0    1    1    0    1    0    0    1    1     0     1     1     0\n[29,]    1    0    1    1    1    0    0    0    1     1     0     0     0\n[30,]    0    0    1    0    0    0    0    0    0     0     0     0     1\n[31,]    0    0    1    1    1    0    0    1    1     0     0     0     0\n[32,]    0    0    1    1    1    0    1    1    1     1     0     0     0\n[33,]    0    0    1    1    0    0    1    0    1     0     0     0     0\n[34,]    0    0    0    0    1    0    0    0    0     1     0     0     0\n[35,]    0    0    1    0    1    0    1    0    1     0     0     0     1\n[36,]    0    0    0    0    0    0    0    0    0     1     0     0     0\n[37,]    1    0    0    1    1    0    0    0    1     1     0     0     0\n[38,]    0    0    1    1    1    0    1    0    1     1     0     0     0\n[39,]    1    0    1    1    1    0    1    1    1     1     0     0     1\n[40,]    0    0    0    0    1    0    0    0    0     1     0     0     0\n[41,]    0    0    1    1    1    0    0    0    0     1     0     0     0\n[42,]    1    1    1    1    1    1    1    1    1     0     0     1     0\n      [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21]\n [1,]     0     0     1     0     1     0     0     1\n [2,]     0     0     0     0     0     0     0     1\n [3,]     1     0     0     1     1     0     1     1\n [4,]     0     0     1     1     1     0     1     1\n [5,]     1     0     1     1     1     1     1     1\n [6,]     0     0     0     0     0     0     0     1\n [7,]     1     0     0     1     1     0     0     1\n [8,]     0     0     0     0     1     0     0     1\n [9,]     1     0     1     1     1     0     0     1\n[10,]     0     1     1     1     1     1     1     0\n[11,]     0     0     0     0     0     0     0     0\n[12,]     0     0     0     0     0     0     0     1\n[13,]     1     0     0     0     1     0     0     0\n[14,]     0     0     0     0     1     0     0     1\n[15,]     1     0     1     1     1     1     1     1\n[16,]     0     0     0     0     1     0     0     0\n[17,]     0     0     0     0     0     0     0     1\n[18,]     1     1     1     0     0     1     1     1\n[19,]     1     1     0     0     1     0     1     0\n[20,]     1     1     1     1     1     0     0     1\n[21,]     1     0     0     1     1     0     1     0\n[22,]     0     1     1     1     1     1     1     0\n[23,]     1     1     1     1     1     1     1     1\n[24,]     0     1     0     0     1     1     0     1\n[25,]     0     1     0     1     1     0     0     1\n[26,]     0     1     0     0     1     1     0     0\n[27,]     0     1     0     0     0     0     1     1\n[28,]     1     1     0     1     1     1     0     1\n[29,]     0     1     0     0     1     0     1     1\n[30,]     0     1     0     0     1     0     0     0\n[31,]     0     1     1     0     1     1     0     0\n[32,]     0     1     0     0     1     1     1     0\n[33,]     0     1     0     0     0     0     1     1\n[34,]     0     1     0     0     1     0     0     0\n[35,]     0     1     0     0     1     1     1     1\n[36,]     0     0     0     0     1     1     1     0\n[37,]     0     1     0     0     1     0     1     0\n[38,]     0     1     0     0     0     0     1     1\n[39,]     1     1     1     0     0     1     1     1\n[40,]     0     1     0     0     1     0     0     0\n[41,]     0     1     0     0     1     1     0     1\n[42,]     1     1     0     1     1     0     1     0\n```\n:::\n:::\n\n\nNote that this matrix has the same number of columns as the original adjacency matrix and double the number of rows. This doesn't matter since the correlation distance works on the columns, meaning that it will return a matrix of the same dimensions as the original:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   round(cor(A.stack), 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7] [,8]  [,9] [,10] [,11] [,12]\n [1,]  1.00  0.43  0.00  0.09  0.09  0.22  0.14 0.37  0.13  0.25  0.37  0.22\n [2,]  0.43  1.00 -0.19  0.00 -0.19  0.49  0.24 0.38 -0.15 -0.24  0.51  0.52\n [3,]  0.00 -0.19  1.00  0.52  0.62 -0.24  0.19 0.33  0.57  0.00  0.03 -0.03\n [4,]  0.09  0.00  0.52  1.00  0.43 -0.03  0.29 0.33  0.57  0.10  0.03 -0.03\n [5,]  0.09 -0.19  0.62  0.43  1.00 -0.35  0.00 0.14  0.67  0.20  0.03 -0.15\n [6,]  0.22  0.49 -0.24 -0.03 -0.35  1.00  0.27 0.36 -0.16  0.00  0.50  0.74\n [7,]  0.14  0.24  0.19  0.29  0.00  0.27  1.00 0.19  0.24 -0.05  0.10  0.06\n [8,]  0.37  0.38  0.33  0.33  0.14  0.36  0.19 1.00  0.27  0.01  0.41  0.49\n [9,]  0.13 -0.15  0.57  0.57  0.67 -0.16  0.24 0.27  1.00  0.07  0.03  0.04\n[10,]  0.25 -0.24  0.00  0.10  0.20  0.00 -0.05 0.01  0.07  1.00  0.24 -0.11\n[11,]  0.37  0.51  0.03  0.03  0.03  0.50  0.10 0.41  0.03  0.24  1.00  0.49\n[12,]  0.22  0.52 -0.03 -0.03 -0.15  0.74  0.06 0.49  0.04 -0.11  0.49  1.00\n[13,]  0.17 -0.11  0.36  0.14  0.25 -0.08  0.11 0.19  0.22  0.17  0.32 -0.16\n[14,]  0.47  0.51  0.13  0.03  0.13  0.50  0.30 0.51  0.24  0.03  0.57  0.62\n[15,] -0.08 -0.48  0.63  0.25  0.63 -0.47 -0.19 0.07  0.42  0.18 -0.10 -0.25\n[16,]  0.38  0.21  0.14  0.24  0.14  0.22  0.00 0.62  0.12  0.15  0.56  0.18\n[17,]  0.37  0.40  0.13  0.03 -0.07  0.61  0.00 0.61  0.03  0.03  0.68  0.74\n[18,]  0.06  0.11 -0.03 -0.14  0.09  0.21 -0.45 0.15 -0.11  0.28  0.28  0.29\n[19,] -0.08 -0.25  0.38  0.18  0.38 -0.22 -0.05 0.26  0.30  0.28  0.21 -0.15\n[20,]  0.28  0.00  0.52  0.52  0.43  0.08  0.38 0.33  0.57  0.29  0.24  0.08\n[21,]  0.02  0.10 -0.04  0.06 -0.23  0.24  0.29 0.18  0.05 -0.02  0.24  0.17\n      [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21]\n [1,]  0.17  0.47 -0.08  0.38  0.37  0.06 -0.08  0.28  0.02\n [2,] -0.11  0.51 -0.48  0.21  0.40  0.11 -0.25  0.00  0.10\n [3,]  0.36  0.13  0.63  0.14  0.13 -0.03  0.38  0.52 -0.04\n [4,]  0.14  0.03  0.25  0.24  0.03 -0.14  0.18  0.52  0.06\n [5,]  0.25  0.13  0.63  0.14 -0.07  0.09  0.38  0.43 -0.23\n [6,] -0.08  0.50 -0.47  0.22  0.61  0.21 -0.22  0.08  0.24\n [7,]  0.11  0.30 -0.19  0.00  0.00 -0.45 -0.05  0.38  0.29\n [8,]  0.19  0.51  0.07  0.62  0.61  0.15  0.26  0.33  0.18\n [9,]  0.22  0.24  0.42  0.12  0.03 -0.11  0.30  0.57  0.05\n[10,]  0.17  0.03  0.18  0.15  0.03  0.28  0.28  0.29 -0.02\n[11,]  0.32  0.57 -0.10  0.56  0.68  0.28  0.21  0.24  0.24\n[12,] -0.16  0.62 -0.25  0.18  0.74  0.29 -0.15  0.08  0.17\n[13,]  1.00  0.20  0.26  0.51  0.20  0.05  0.63  0.36 -0.02\n[14,]  0.20  1.00 -0.10  0.34  0.57  0.16  0.11  0.24  0.14\n[15,]  0.26 -0.10  1.00  0.02 -0.10  0.08  0.34  0.25 -0.18\n[16,]  0.51  0.34  0.02  1.00  0.45  0.11  0.41  0.24  0.17\n[17,]  0.20  0.57 -0.10  0.45  1.00  0.40  0.11  0.24  0.14\n[18,]  0.05  0.16  0.08  0.11  0.40  1.00  0.18 -0.03 -0.32\n[19,]  0.63  0.11  0.34  0.41  0.11  0.18  1.00  0.28 -0.03\n[20,]  0.36  0.24  0.25  0.24  0.24 -0.03  0.28  1.00 -0.04\n[21,] -0.02  0.14 -0.18  0.17  0.14 -0.32 -0.03 -0.04  1.00\n```\n:::\n:::\n\n\nAnd we would then do a blockmodel based on these distances:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   blocks2 <- function(A, s = 2) {\n     colnames(A) <- 1:ncol(A) #use only if the original matrix has no names\n     B <- list(A)\n     for(i in 1:s) {\n       B <- unlist(lapply(B, con.cor), recursive = FALSE)\n       }\n     return(lapply(B, colnames))\n   }\n   blocks2(A.stack)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n [1] \"1\"  \"2\"  \"6\"  \"8\"  \"11\" \"12\" \"14\" \"16\" \"17\" \"18\"\n\n[[2]]\n[1] \"7\"  \"21\"\n\n[[3]]\n[1] \"3\"  \"4\"  \"5\"  \"9\"  \"15\" \"20\"\n\n[[4]]\n[1] \"10\" \"13\" \"19\"\n```\n:::\n:::\n\n\n## Structural Equivalence in Multigraphs\n\nNote that we would apply the same trick if we wanted to do a blockmodel based on multiple relations like friendship *and* advice. Here's a blockmodel based on the stacked matrices of incoming ties of both types:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   A.f <- as.matrix(as_adjacency_matrix(ht_friends))\n   A.stack <- rbind(A, A.f)\n   blocks2(A.stack)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"1\"  \"3\"  \"5\"  \"14\" \"15\" \"20\"\n\n[[2]]\n[1] \"4\"  \"9\"  \"13\" \"19\"\n\n[[3]]\n[1] \"2\"  \"8\"  \"12\" \"16\" \"17\" \"18\"\n\n[[4]]\n[1] \"6\"  \"7\"  \"10\" \"11\" \"21\"\n```\n:::\n:::\n\n\nAnd one combining incoming and outgoing friendship and advice ties:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   A.stack <- rbind(A, A.t, A.f, t(A.f))\n   blocks2(A.stack)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"1\"  \"2\"  \"8\"  \"12\" \"16\" \"21\"\n\n[[2]]\n[1] \"6\"  \"11\" \"14\" \"17\"\n\n[[3]]\n[1] \"3\"  \"4\"  \"5\"  \"7\"  \"9\"  \"20\"\n\n[[4]]\n[1] \"10\" \"13\" \"15\" \"18\" \"19\"\n```\n:::\n:::\n\n\nNote that here the stacked matrix has four sub-matrices: (1) Incoming advice, (2) outgoing advice, (3) incoming friendship, and (4) Outgoing friendship.\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "supporting": [
      "structequiv_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\r\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}