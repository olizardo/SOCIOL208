## Eigenvector Status

Measures of status and prestige are particularly applicable to two-mode networks. The reason is that the *reflective* principle behind these measures interacts nicely with the *duality* principle. 

For instance, when it comes to **eigenvector**-style measures, the neat idea that *people are central if they belong to central groups and groups and central if their members are central people* (with people centrality defined by membership in central groups) can be effectively captured by these metrics [@bonacich91].

Thus if $x$ are the status scores for people, and $y$ are the status scores for groups, then the $x$ scores should be given by the sum of the $y$ scores of the groups each person belongs, and the $y$ scores should be given by the sum of the $x$ scores of their members. 

In mathese:

$$
x = \mathbf{A}^Ty
$$

$$
y = \mathbf{A}x
$$

Once again, producing another instance of a cat chasing its own tail (we need to know the values of $y$ to figure out the values of $x$ and we need to know the values of $x$ to figure out the values of $y$). 

How do we proceed? Well, let's bring back our trusty status distribution game:

```{r}
   status1 <- function(A) {
      n <- nrow(A) #number of actors
      x <- rep(1, n) #initial status vector set to all ones
      w <- 1 
      k <- 0 #initializing counter
      while (w > 0.0001) {
          o.x <- x #old status scores
          x <- A %*% x #new scores a function of old scores and adjacency matrix
          x <- x/norm(x, type = "E") #normalizing new status scores
          w <- abs(sum(abs(x) - abs(o.x))) #diff. between new and old scores
          k <- k + 1 #incrementing while counter
      }
   return(as.vector(x))
   }
```

Then the main question is over what matrix will the status game be played for *both* people and groups?

As @bonacich91 noted, the projection matrices of @breiger74 are natural candidates for this task. Let's try it out.

For people this would be:

```{r}
   p.s <- status1(P)
   names(p.s) <- rownames(P)
   round(p.s, 3)
```

And for groups:

```{r}
   g.s <- status1(G)
   names(g.s) <- colnames(A)
   round(g.s, 3)
```

Lo and behold, these are the status scores we seek. It turns out they can be computed by figuring out the leading eigenvector (what our status game does for any matrix) of the Breiger projection matrices [@bonacich91]:

$$
\lambda x = (\mathbf{A}\mathbf{A}^T)x
$$

$$
\lambda y = (\mathbf{A}^T\mathbf{A})y
$$

In `R` we can do this using the `eigen` function:

```{r}
   eig.p <- eigen(P)
   eig.g <- eigen(G)
   p.s <- eig.p$vector[, 1] * -1
   g.s <- eig.g$vector[, 1] * -1
   names(p.s) <- rownames(A)
   names(g.s) <- colnames(A)
   round(p.s, 3)
   round(g.s, 3)
```

Neat! These are the same scores we obtained by playing our status game. The scores are also readily interpretable: The most central people belong to the most central (largest membership) groups and the most central groups are the ones that attract the most central (highest activity) members. 

Another way of thinking of the eigenvector centrality of each node in this context is as a weighted sum^[Where the weight (for obscure technical reasons) is the inverse of the square root of the first eigenvalue obtained from the `eigen` analysis.] of the eigenvector centralities on the nodes in the other mode they are connected to [@faust97, p. 170].

So for any person, let's say $EVELYN$, their eigenvector centrality is equal to:

```{r}
   sum(A["EVELYN", ] * g.s) * 1/sqrt(eig.p$values[1])
```

Which is indeed Evelyn's Eigenvector score. 

The same goes for the eigenvector score of groups, which are just a weighted sum of the Eigenvector centralities of the people who belong to them:

```{r}
   sum(A[, "6/27"] * p.s) *1/sqrt(eig.p$values[1])
```

Which is indeed the eigenvector score for the event held on 6/27. Duality at work!

Finally, here are the Southern Women dual Eigenvector Centralities in tabular form:

```{r}
   library(kableExtra)
   p.dat <- data.frame(People = rownames(A), Eig.Cent = round(p.s, 3))
   p.dat <- p.dat[order(p.dat$Eig.Cent, decreasing = TRUE), ]
   kbl(p.dat, format = "html", , align = c("l", "c"), row.names = FALSE) %>% 
      column_spec(1, bold = TRUE) %>% 
      kable_styling(full_width = TRUE,
                     bootstrap_options = c("hover", "condensed", "responsive"))
```

```{r}
   g.dat <- data.frame(Groups = colnames(A), Eig.Cent = round(g.s, 3))
   g.dat <- g.dat[order(g.dat$Eig.Cent, decreasing = TRUE), ]
   kbl(g.dat, format = "html", align = c("l", "c"), row.names = FALSE) %>% 
      column_spec(1, bold = TRUE) %>% 
      kable_styling(full_width = TRUE,
                     bootstrap_options = c("hover", "condensed", "responsive"))
```

## Core and Periphery

As noted by @borgatti_everett00, the Bonacich Eigenvector scores are also a model of a core-periphery partition in the two-mode network. This is already evident in the *definition* of the dual centralities: Popular actors (who participate in many events) make the events they participate in more central, and central events (that have many actors) become central when they attract the popular kids. The most central actors and most central events will thus form a clique in the network separating them from the rest.

This means the Eigenvector scores can be used to partition any two-mode network into a **core** (popular kids, popular events) and a **periphery** (less popular kids, less popular events). All we need to do to see the partition is to re-order the rows and columns of the affiliation matrix according to the value of the magnitude of the Eigenvector scores for people and events:

```{r}
   p <- ggcorrplot(t(A[order(p.s), order(g.s)]), 
                   colors = c("white", "white", "red")) 
   p <- p + theme(legend.position = "none", 
                  axis.text.y = element_text(size = 8),
                  axis.text.x = element_text(size = 8, angle = 0),
                  )
   p <- p + scale_x_discrete(position = "top") 
   p <- p + geom_hline(yintercept = 10.5, linewidth = 2, color = "blue")
   p <- p + geom_vline(xintercept = 8.5, linewidth = 2, color = "blue")
   p
```

Here the upper-right block reveals the core actors and events in the network; namely, the events almost universally attended by the most active participants [@everett_borgatti13, table 2].


## Bicliques

```{r}
#| layout-ncol: 3
#| fig-height: 12
#| fig-width: 12
   library(here) 
   source(here("biclique.r")) #loading Kieran Healy's biclique finding function
   clique.res <- biclique(g, 3, 4)
   for (i in 1:length(clique.res)) {
      c <- subgraph(g, c(clique.res[[i]]$m1, clique.res[[i]]$m2))
      V(c)$type <- bipartite_mapping(c)$type
      V(c)$shape <- ifelse(V(c)$type, "square", "circle")
      V(c)$color <- bipartite_mapping(c)$type + 1
      set.seed(123)
      plot(c, 
        vertex.size=12, vertex.frame.color="lightgray", 
        vertex.label.dist = 3, vertex.label.cex = 2, 
        edge.color = "black",
        layout = layout_as_bipartite)
      }
```