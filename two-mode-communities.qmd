---
title: "Community Detection in Two Mode Networks"
execute: 
  eval: true
  echo: true
  output: true
  warning: false
  message: false
format: 
   html:
      code-line-numbers: true
---

In the CA handout, we took a first stab at finding communities in two networks taking the simplest case of splitting a two-mode network into two-communities. We later saw, when discussing spectral clustering approaches approaches to community detection how to generalize that approach to split a two-mode network into multiple communities, while evaluating the quality of a given partition using the bipartite generalization of the modularity due to @barber07.

One limitation of Barber's approach is that it can only be used under the assumption that the number of communities is the *same* for both persons and groups. However, it could be that the optimal partition is actually one in which the people node set is split into a different number of clusters than the group node set.

So we need a way to evaluate the modularity of a partition when we have different number of communities on the people and group side. 

Let's load some data and see how it works. 

```{r}
   library(igraph)
   library(networkdata)
   g <- southern_women #southern women data
   A <- as.matrix(as_biadjacency_matrix(g)) #bi-adjacency matrix
```

## The Dual Projection Approach to Bipartite Commmunity Detection

To estimate distinct number of communities across the separate modes we follow the dual projection approach of @everett_borgatti13.

First, we need to create the matrices we will need, namely, the one-mode projections of people and groups and the modularity matrices based on those projections:

```{r}
   P <- A %*% t(A) #person projection
   G <- t(A) %*% A #group projection
   d.p <- rowSums(P) #people degree
   d.g <- rowSums(G) #group degree
   B.p <- P - (d.p %*% t(d.p))/sum(P) #person modularity matrix
   B.g <- G - (d.g %*% t(d.g))/sum(G) #group modularity matrix
```

We then perform the spectral decomposition of each single-mode modularity matrix, keeping the first three eigenvectors:

```{r}
   eig.p <- eigen(B.p)$vectors[, 1:4]
   eig.g <- eigen(B.g)$vectors[, 1:4]
```

We can now use our trusty `k.cuts` function from the spectral community detection handout to come up with a bunch of partitions of people and groups based on the first $k$ eigenvectors of the spectral decomposition of the modularity matrix:

```{r}
   k.cuts <- function(x, max = 9) {
      clus <- list()
      for (i in 1:max) {
         set.seed(456) #setting seed because kmeans uses random starting nodes for cluster centroids
         k <- i + 1
         clus[[i]] <- kmeans(x, k)$cluster
         }
      return(clus)
   }
   k.cuts.p <- k.cuts(eig.p, max = 12)
   k.cuts.g <- k.cuts(eig.g, max = 12)
```

## Finding the Bi-partition with the Best Modularity

OK, now that we have some candidate communities for both the people and groups (stored in the `k.cuts.p` and `k.cuts.g` objects) we need to come up with a way of measuring the modularity for a candidate partition that puts the people into $m$ clusters and the groups into $n$ communities. 

As an example, let's pick the solution that partitions people into four clusters and events into three communities:

```{r}
   p.4 <- k.cuts.p[[3]]
   g.3 <- k.cuts.g[[2]]
```

Given this information we can create a $4 X 3$ matrix counting the proportion of edges that go from person community $i$ to group community $j$:

```{r}
   e <- matrix(0, 4, 3)
   for (i in 1:4) {
      for (j in 1:3) {
         e[i, j] = sum(A[which(p.4 == i), which(g.3 == j)])
      }
   }
   e
```

@suzuki_wakita09 based on work by @murata09 suggest  using the `e` matrix above to compute the modularity according to the following formula:

$$
Q = \sum_{i, j} = \frac{e_{ij}}{p_i}\left[\frac{e_{ij}}{vol(A)} - \frac{p_ig_j}{(vol(A))^2}\right]
$$

Where $e_{ij}$ is the fraction of edges connecting people in the $i^{th}$ person community to groups in the $j^{th}$ group community, $p_i$ is the fraction of edges originating in person community $i$, $g_j$ is the fraction of edges originating in group community $j$. For instance, $e_{43} = 0.28$ for person-community four and group-community three above. Similarly $p_4$ is 0.04 + 0.11 + 0.28 = `r 0.04 + 0.11 + 0.28` for person-community four and Similarly $g_3$ is 0 + 0.07 + 0 + 0.28 = `r 0 + 0.07 + 0 + 0.28` for group-community three; $vol(A)$ is the sum of the entries in the bi-adjacency matrix.

Here's a way of computing the Suzuki modularity using the information above:

```{r}
   Q <- 0
   a <- rowSums(e)
   b <- colSums(e)
   E = sum(A)
   for (i in 1:4) {
      for (j in 1:3) {
         Q <- Q + ((e[i, j]/a[i]) * (e[i, j]/E - (a[i]*b[j])/E^2))
         Q <- Q + ((t(e)[j, i]/b[j]) * (t(e)[j, i]/E - (a[i]*b[j])/E^2))
      }
   }
   Q/2
```

Which seems like a positive number, indicating it is picking up modularity-based communities in these data. But is it the best partition? 

To answer this question, we need to search for all the candidate person and group partitions and select the pair of clusterings that maximizes the modularity as defined above. 

To do this, first let's package the steps we used to find $Q$ from `e` into a function:

```{r}
   find.mod <- function(a, b, x) {
      c <- max(a)
      d <- max(b)
      e <- matrix(0, c, d)
      for (i in 1:c) {
         for (j in 1:d) {
            e[i, j] = sum(x[which(a == i), which(b == j)])
         }
      }
      Q <- 0
      f <- rowSums(e)
      g <- colSums(e)
      E = sum(x)
      for (i in 1:nrow(e)) {
         for (j in 1:ncol(e)) {
            Q <- Q + ((e[i, j]/f[i]) * (e[i, j]/E - (f[i]*g[j])/E^2))
            Q <- Q + ((t(e)[j, i]/g[j]) * (t(e)[j, i]/E - (f[i]*g[j])/E^2))
         }
      }
   return(Q/2)
   }
```

Now, we can use the `find.mod` function to compute the modularity between *every pair* of partition values between people and groups:

```{r}
   mod.mat <- matrix(0, 12, 12)
   for (i in 1:12) {
      for (j in 1:12) {
         mod.mat[i, j] <- find.mod(k.cuts.p[[i]], k.cuts.g[[j]], A)
      }
   }
   Q <- round(mod.mat, 3)
   Q
```

Interestingly, the analysis suggests that the maximum modularity $Q = `r Q[2, 4]`$ is obtained with a equi-partition of people and groups into five communities each corresponding to cell $(4, 4)$ of the matrix above.

Here's what this community assignment looks like in the Southern Women data:

```{r}  
#| label: fig-women
#| fig-height: 12
#| fig-width: 12
#| fig-cap: "Spectral Clustering of Nodes in the Southern Women Data with Optimal Community Assignment Obtained via the Suzuki Modularity."
#| echo: false

   V(g)$type <- bipartite_mapping(g)$type
   V(g)$shape <- ifelse(V(g)$type, "square", "circle")
   V(g)$color <- c(k.cuts.p[[4]], k.cuts.g[[4]] + 5)
   set.seed(123)
   plot(g, 
     vertex.size=7, vertex.frame.color="lightgray", 
     vertex.label.dist = 1.5, edge.curved=0.2, 
     vertex.label.cex = 1.15)
```

The analysis separates two groups of densely connected actors, namely, $\{Brenda, Theresa, Laura, Frances, Evelyn\}$ and $\{Katherine, Nora, Sylvia\}$ along with their corresponding events from the one another. Among the core group of densely connected actors $\{Charlotte, Eleanor, Helen\}$ form their own sub-community; while $\{Pearl, Dorothy, Myrna, Verne\}$ form a clique of more peripheral actors; $\{Flora, Olivia\}$ are a two-actor clique.

Note that two very well-attended events $\{9/16\}$ and $\{3/15\}$ occupy unique structural positions as singleton clusters mainly because the mediate between the otherwise separate cliques of women across the bipartite graph. The events in the two-event community comprising $\{4/8, 2/23\}$ also play a mediating role, but mainly between they connect the more peripheral actor set and the rest.





